{
    "https://en.wikipedia.org/wiki/Python_(programming_language)": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History 1 History 1 History 2 Design philosophy and features 2 Design philosophy and features 2 Design philosophy and features 3 Syntax and semantics Toggle Syntax and semantics subsection 3.1 Indentation 3.2 Statements and control flow 3.3 Expressions 3.4 Methods 3.5 Typing 3.6 Arithmetic operations 3.7 Function syntax 3 Syntax and semantics 3 Syntax and semantics Toggle Syntax and semantics subsection 3.1 Indentation 3.1 Indentation 3.1 Indentation 3.2 Statements and control flow 3.2 Statements and control flow 3.2 Statements and control flow 3.3 Expressions 3.3 Expressions 3.3 Expressions 3.4 Methods 3.4 Methods 3.4 Methods 3.5 Typing 3.5 Typing 3.5 Typing 3.6 Arithmetic operations 3.6 Arithmetic operations 3.6 Arithmetic operations 3.7 Function syntax 3.7 Function syntax 3.7 Function syntax 4 Programming examples 4 Programming examples 4 Programming examples 5 Libraries 5 Libraries 5 Libraries 6 Development environments 6 Development environments 6 Development environments 7 Implementations Toggle Implementations subsection 7.1 Reference implementation 7.2 Other implementations 7.3 No longer supported implementations 7.4 Cross-compilers to other languages 7.5 Performance 7 Implementations 7 Implementations Toggle Implementations subsection 7.1 Reference implementation 7.1 Reference implementation 7.1 Reference implementation 7.2 Other implementations 7.2 Other implementations 7.2 Other implementations 7.3 No longer supported implementations 7.3 No longer supported implementations 7.3 No longer supported implementations 7.4 Cross-compilers to other languages 7.4 Cross-compilers to other languages 7.4 Cross-compilers to other languages 7.5 Performance 7.5 Performance 7.5 Performance 8 Development 8 Development 8 Development 9 API documentation generators 9 API documentation generators 9 API documentation generators 10 Naming 10 Naming 10 Naming 11 Popularity 11 Popularity 11 Popularity 12 Uses 12 Uses 12 Uses 13 Languages influenced by Python 13 Languages influenced by Python 13 Languages influenced by Python 14 See also 14 See also 14 See also 15 References Toggle References subsection 15.1 Sources 15 References 15 References Toggle References subsection 15.1 Sources 15.1 Sources 15.1 Sources 16 Further reading 16 Further reading 16 Further reading 17 External links 17 External links 17 External links Toggle the table of contents Python (programming language) Python (programming language) 112 languages Afrikaans Afrikaans Afrikaans Alemannisch Alemannisch Alemannisch \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s Aragon\u00e9s Aragon\u00e9s \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be Asturianu Asturianu Asturianu Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 Basa Bali Basa Bali Basa Bali \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u092d\u094b\u091c\u092a\u0941\u0930\u0940 \u092d\u094b\u091c\u092a\u0941\u0930\u0940 \u092d\u094b\u091c\u092a\u0941\u0930\u0940 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Bosanski Bosanski Bosanski Brezhoneg Brezhoneg Brezhoneg Catal\u00e0 Catal\u00e0 Catal\u00e0 Cebuano Cebuano Cebuano \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Cymraeg Cymraeg Cymraeg Dansk Dansk Dansk Deutsch Deutsch Deutsch Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais Galego Galego Galego \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 Hausa Hausa Hausa \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Hrvatski Hrvatski Ido Ido Ido Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia Interlingua Interlingua Interlingua \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 Kiswahili Kiswahili Kiswahili Kurd\u00ee Kurd\u00ee Kurd\u00ee \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u0ea5\u0eb2\u0ea7 \u0ea5\u0eb2\u0ea7 \u0ea5\u0eb2\u0ea7 Latina Latina Latina Latvie\u0161u Latvie\u0161u Latvie\u0161u Lietuvi\u0173 Lietuvi\u0173 Lietuvi\u0173 La .lojban. La .lojban. La .lojban. Lombard Lombard Lombard Magyar Magyar Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 Bahasa Melayu Bahasa Melayu Bahasa Melayu \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Na Vosa Vakaviti Na Vosa Vakaviti Na Vosa Vakaviti Nederlands Nederlands Nederlands \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u07d2\u07de\u07cf \u07d2\u07de\u07cf \u07d2\u07de\u07cf Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk nynorsk Norsk nynorsk Norsk nynorsk \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a Plattd\u00fc\u00fctsch Plattd\u00fc\u00fctsch Plattd\u00fc\u00fctsch Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 Runa Simi Runa Simi Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u1c65\u1c5f\u1c71\u1c5b\u1c5f\u1c72\u1c64 \u1c65\u1c5f\u1c71\u1c5b\u1c5f\u1c72\u1c64 \u1c65\u1c5f\u1c71\u1c5b\u1c5f\u1c72\u1c64 Scots Scots Scots Shqip Shqip Shqip \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd Simple English Simple English Simple English Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Suomi Suomi Svenska Svenska Svenska Tagalog Tagalog Tagalog \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u107d\u1083\u1087\u101e\u1083\u1087\u1010\u1086\u1038 \u107d\u1083\u1087\u101e\u1083\u1087\u1010\u1086\u1038 \u107d\u1083\u1087\u101e\u1083\u1087\u1010\u1086\u1038 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e Basa Ugi Basa Ugi Basa Ugi \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5 / Uyghurche \u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5 / Uyghurche \u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5 / Uyghurche Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Walon Walon Walon \u6587\u8a00 \u6587\u8a00 \u6587\u8a00 Winaray Winaray Winaray \u5434\u8bed \u5434\u8bed \u5434\u8bed \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read Edit Edit Edit View history View history View history Tools Read Read Read Edit Edit Edit View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons MediaWiki MediaWiki MediaWiki Wikibooks Wikibooks Wikibooks Wikifunctions Wikifunctions Wikifunctions Wikiquote Wikiquote Wikiquote Wikiversity Wikiversity Wikiversity Wikidata item Wikidata item Wikidata item Python (genus) Paradigm Multi-paradigm object-oriented [1] [ ] procedural imperative functional structured reflective Designed by Guido van Rossum Developer Python Software Foundation ; 33 years ago (1991-02-20) 1991-02-20 [2] [ ] Stable release ; 29 days ago (3 December 2024) 3 December 2024 Typing discipline duck dynamic strong [3] [ ] optional type annotations [4] [ ] OS Tier 1: 64-bit Linux, macOS; 64- and 32-bit Windows 10+[5] Linux macOS Windows [5] [ ] Tier 2: E.g. 32-bit WebAssembly (WASI) WebAssembly Tier 3: 64-bit Android,[6] iOS, FreeBSD, and (32-bit) Raspberry Pi OSUnofficial (or has been known to work): Other Unix-like/BSD variants) and a few other platforms[7][8][9] Android [6] [ ] iOS FreeBSD Raspberry Pi OS Unix-like BSD [7] [ ] [8] [ ] [9] [ ] License Python Software Foundation License Filename extensions [10] [ ] python.org python.org implementations CPython PyPy Stackless Python MicroPython CircuitPython IronPython Jython Dialects Cython RPython Starlark [11] [ ] ABC [12] [ ] Ada [13] [ ] ALGOL 68 [14] [ ] APL [15] [ ] C [16] [ ] C++ [17] [ ] CLU [18] [ ] Dylan [19] [ ] Haskell [20] [ ] [15] [ ] Icon [21] [ ] Lisp [22] [ ] Modula-3 Modula-3 [14] [ ] [17] [ ] Perl [23] [ ] Standard ML [15] [ ] Apache Groovy Boo Cobra CoffeeScript [24] [ ] D F# GDScript Go JavaScript [25] [ ] [26] [ ] Julia [27] [ ] Mojo [28] [ ] Nim Ring [29] [ ] Ruby [30] [ ] Swift [31] [ ] V [32] [ ] Python Programming at Wikibooks Python Programming Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.[33] high-level general-purpose programming language code readability significant indentation [33] [ ] Python is dynamically type-checked and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a \"batteries included\" language due to its comprehensive standard library.[34][35] dynamically type-checked garbage-collected programming paradigms structured procedural object-oriented functional programming standard library [34] [ ] [35] [ ] Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[36] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[37] Guido van Rossum ABC [36] [ ] backward-compatible [37] [ ] Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[38][39][40][41] machine learning [38] [ ] [39] [ ] [40] [ ] [41] [ ] History [edit] [ edit edit ] History of Python Guido van Rossum OSCON Python was conceived in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities as Python's \"benevolent dictator for life\" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he has since come out of retirement and is self-titled \"BDFL-emeritus\"). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47] [42] [ ] Guido van Rossum Centrum Wiskunde & Informatica Netherlands ABC SETL [43] [ ] exception handling Amoeba [12] [ ] [44] [ ] benevolent dictator for life [45] [ ] [46] [ ] [47] [ ] The name Python is said to come from the British comedy series Monty Python's Flying Circus.[48] Monty Python's Flying Circus [48] [ ] Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[49] Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[50][51] No further security patches or other improvements will be released for it.[52][53] While Python 2.7 and older versions are officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. \"2.7.18+\" (plus 3.10), with the plus meaning (at least some) \"backported security updates\".[54] list comprehensions cycle-detecting reference counting Unicode [49] [ ] end-of-life [50] [ ] [51] [ ] [52] [ ] [53] [ ] PyPy backported [54] [ ] Python 3.0 was released on 3 December 2008, with some new semantics and changed syntax. At least every Python release since (now unsupported) 3.5 has added some syntax to the language, and a few later releases have dropped outdated modules, or changed semantics, at least in a minor way. Since 7 October 2024[update], Python 3.13 is the latest stable release, and it and, for few more months, 3.12 are the only releases with active support including for bug fixes (as opposed to just for security) and Python 3.9,[55] is the oldest supported version of Python (albeit in the 'security support' phase), due to Python 3.8 reaching end-of-life.[56][57] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half), followed by 3 years of security support (for same total support as before). [update] [55] [ ] end-of-life [56] [ ] [57] [ ] Security updates were expedited in 2021 (and again twice in 2022, and more fixed in 2023 and in September 2024 for Python 3.12.6 down to 3.8.20), since all Python versions were insecure (including 2.7[58]) because of security issues leading to possible remote code execution[59] and web-cache poisoning.[60] [58] [ ] remote code execution [59] [ ] web-cache poisoning [60] [ ] Python 3.10 added the | union type operator[61] and the match and case keywords (for structural pattern matching statements). 3.11 expanded exception handling functionality. Python 3.12 added the new keyword type. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.[62] Python 3.11 claims to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages (again improved in 3.14), and many other changes. [61] [ ] pattern matching exception handling [62] [ ] Python 3.13 introduces more syntax for types, a new and improved interactive interpreter (REPL), featuring multi-line editing and color support; an incremental garbage collector (producing shorter pauses for collection in programs with a lot of objects, and addition to the improved speed in 3.11 and 3.12), and an experimental just-in-time (JIT) compiler (such features, can/needs to be enabled specifically for the increase in speed),[63] and an experimental free-threaded build mode, which disables the global interpreter lock (GIL), allowing threads to run more concurrently, that latter feature enabled with python3.13t or python3.13t.exe. REPL just-in-time (JIT) compiler [63] [ ] global interpreter lock Python 3.13 introduces some change in behavior, i.e. new \"well-defined semantics\", fixing bugs (plus many removals of deprecated classes, functions and methods, and removed some of the C API and outdated modules): \"The [old] implementation of locals() and frame.f_locals is slow, inconsistent and buggy [and it] has many corner cases and oddities. Code that works around those may need to be changed. Code that uses locals() for simple templating, or print debugging, will continue to work correctly.\"[64] [64] [ ] Some (more) standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 or 3.16.[65][66] [65] [ ] [66] [ ] Python 3.14 is now in alpha 2;[67] regarding possible change to annotations: \"In Python 3.14, from __future__ import annotations will continue to work as it did before, converting annotations into strings.\" [68] [67] [ ] [68] [ ] PEP 711 proposes PyBI: a standard format for distributing Python Binaries.[69] [69] [ ] Python 3.15 will \"Make UTF-8 mode default\",[70] the mode exists in all current Python versions, but currently needs to be opted into. UTF-8 is already used, by default, on Windows (and elsewhere), for most things, but e.g. to open files it's not and enabling also makes code fully cross-platform, i.e. use UTF-8 for everything on all platforms. [70] [ ] UTF-8 Design philosophy and features [edit] [ edit edit ] Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75] Python is known as a glue language,[76] able to work very well with many other languages with ease of access. multi-paradigm programming language Object-oriented programming structured programming aspect-oriented programming metaprogramming [71] [ ] metaobjects [72] [ ] design by contract [73] [ ] [74] [ ] logic programming [75] [ ] glue language [76] [ ] Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management.[77] It uses dynamic name resolution (late binding), which binds method and variable names during program execution. dynamic typing reference counting memory management [77] [ ] name resolution late binding Its design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions.[78] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[79] Lisp list comprehensions dictionaries generator [78] [ ] Haskell Standard ML [79] [ ] Its core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:[80] Zen of Python aphorisms [80] [ ] Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Readability counts. However, Python features regularly violate these principles and have received criticism for adding unnecessary language bloat.[81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84] [81] [ ] [82] [ ] [83] [ ] [84] [ ] Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[42] extensible ABC [42] [ ] Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's \"there is more than one way to do it\" motto, Python embraces a \"there should be one\u2014and preferably only one\u2014obvious way to do it.\" philosophy.[80] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[85] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: \"To describe something as 'clever' is not considered a compliment in the Python culture.\"[86] Perl there is more than one way to do it [80] [ ] [85] [ ] Alex Martelli Fellow Python Software Foundation [86] [ ] Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[87] Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.[88] premature optimization CPython [87] [ ] just-in-time compiler PyPy cross-compile to other languages dynamic language [88] [ ] Python's developers aim for it to be fun to use. This is reflected in its name\u2014a tribute to the British comedy group Monty Python[89]\u2014and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms \"spam\" and \"eggs\" (a reference to a Monty Python sketch) in examples, instead of the often-used \"foo\" and \"bar\".[90][91] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. \"Pythonic\" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[92] Monty Python [89] [ ] a Monty Python sketch \"foo\" and \"bar\" [90] [ ] [91] [ ] neologism idioms [92] [ ] Syntax and semantics [edit] [ edit edit ] Python syntax and semantics C# Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.[93] curly brackets C Pascal [93] [ ] Indentation [edit] [ edit edit ] Python syntax and semantics \u00a7 Indentation Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[94] Thus, the program's visual structure accurately represents its semantic structure.[95] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[96] whitespace curly brackets blocks [94] [ ] [95] [ ] off-side rule [96] [ ] Statements and control flow [edit] [ edit edit ] Python's statements include: statements The assignment statement, using a single equals sign = assignment The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if) if The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block for The while statement, which executes a block of code as long as its condition is true while The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups[97]); it also ensures that clean-up code in a finally block is always run regardless of how the block exits try [97] [ ] The raise statement, used to raise a specified exception or re-raise a caught exception The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming class The def statement, which defines a function or method function method The with statement, which encloses a code block within a context manager (for example, acquiring a lock before it is run, then releasing the lock; or opening and closing a file), allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom[98] with lock file resource-acquisition-is-initialization [98] [ ] The break statement, which exits a loop break The continue statement, which skips the rest of the current iteration and continues with the next The del statement, which removes a variable\u2014deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined The pass statement, serving as a NOP, syntactically needed to create an empty code block NOP The assert statement, used in debugging to check for conditions that should apply assert The yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines generator coroutines The return statement, used to return a value from a function The import and from statements, used to import modules whose functions or variables can be used in the current program import The match and case statements, an analog of the switch statement construct, that compares an expression against one or more cases as a control-of-flow measure. switch statement The assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing\u2014in contrast to statically-typed languages, where each variable may contain only a value of a certain type. reference object data type dynamic typing statically-typed Python does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[99][100] However, better support for coroutine-like functionality is provided by extending Python's generators.[101] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.[102] tail call first-class continuations [99] [ ] [100] [ ] coroutine generators [101] [ ] lazy iterators [102] [ ] Expressions [edit] [ edit edit ] Python's expressions include: expressions The +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and floating-point/division.[103] Python uses the ** operator for exponentiation. floor division [103] [ ] Python uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times. The @ infix operator is intended to be used by libraries such as NumPy for matrix multiplication.[104][105] NumPy matrix multiplication [104] [ ] [105] [ ] The syntax :=, called the \"walrus operator\", was introduced in Python 3.8. It assigns values to variables as part of a larger expression.[106] [106] [ ] In Python, == compares by value. Python's is operator may be used to compare object identities (comparison by reference), and comparisons may be chained\u2014for example, a <= b <= c. a <= b <= c Python uses and, or, and not as Boolean operators. Python has a type of expression named a list comprehension, and a more general expression named a generator expression.[78] list comprehension generator [78] [ ] Anonymous functions are implemented using lambda expressions; however, there may be only one expression in each body. Anonymous functions lambda expressions Conditional expressions are written as x if c else y[107] (different in order of operands from the c ? x : y operator common to many other languages). x if c else y [107] [ ] c ? x : y Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5), which is then assigned back to t\u2014thereby effectively \"modifying the contents\" of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.[108] lists tuples [ 1 , 2 , 3 ] immutable ( 1 , 2 , 3 ) ( 1 , 2 , 3 ) t = t + ( 4 , 5 ) t + ( 4 , 5 ) ( 1 , 2 , 3 , 4 , 5 ) [108] [ ] Python features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals\u2014and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left.[109] [109] [ ] Python has a \"string format\" operator % that functions analogously to printf format strings in C\u2014e.g. \"spam=%s eggs=%d\" % (\"blah\", 2) evaluates to \"spam=blah eggs=2\". In Python 2.6+ and 3+, this was supplemented by the format() method of the str class, e.g. \"spam={0} eggs={1}\".format(\"blah\", 2). Python 3.6 added \"f-strings\": spam = \"blah\"; eggs = 2; f'spam={spam} eggs={eggs}'.[110] printf \"spam= %s eggs= %d \" % ( \"blah\" , 2 ) \"spam= {0} eggs= {1} \" . format ( \"blah\" , 2 ) spam = \"blah\" ; eggs = 2 ; f 'spam= { spam } eggs= { eggs } ' [110] [ ] Strings in Python can be concatenated by \"adding\" them (with the same operator as for adding integers and floats), e.g. \"spam\" + \"eggs\" returns \"spameggs\". If strings contain numbers, they are added as strings rather than integers, e.g. \"2\" + \"2\" returns \"22\". concatenated \"spam\" + \"eggs\" \"2\" + \"2\" Python has various string literals: Delimited by single or double quotes; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quotes work the same. Both use the backslash (\\) as an escape character. String interpolation became available in Python 3.6 as \"formatted string literals\".[110] Triple-quoted (beginning and ending with three single or double quotes), which may span multiple lines and function like here documents in shells, Perl, and Ruby. Raw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare \"@-quoting\" in C#.) string literals Delimited by single or double quotes; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quotes work the same. Both use the backslash (\\) as an escape character. String interpolation became available in Python 3.6 as \"formatted string literals\".[110] Unix shells Perl escape character String interpolation [110] [ ] Triple-quoted (beginning and ending with three single or double quotes), which may span multiple lines and function like here documents in shells, Perl, and Ruby. here documents Ruby Raw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare \"@-quoting\" in C#.) Raw string regular expressions Windows C# Python has array index and array slicing expressions in lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted\u2014for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy. array index array slicing a [ start : stop ] a [ start : stop : step ] zero-based a [:] shallow copy In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example: Common Lisp Scheme Ruby List comprehensions vs. for-loops List comprehensions Conditional expressions vs. if blocks Conditional The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements Statements cannot be a part of an expression\u2014so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement. lambda expressions a = 1 Methods [edit] [ edit edit ] Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby).[111] Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.[112] Methods functions instance . method ( argument ) syntactic sugar Class . method ( instance , argument ) self instance data C++ Java Objective-C Ruby [111] [ ] arithmetic operations [112] [ ] Typing [edit] [ edit edit ] Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them. duck typing compile time dynamically typed strongly typed Python allows programmers to define their own types using classes, most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection. classes object-oriented programming instances SpamClass () EggsClass () metaclass reflection Before version 3.0, Python had two kinds of classes (both using the same syntax): old-style and new-style;[113] current Python versions only support the semantics of the new style. [113] [ ] Python supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[117] optional type annotations [4] [ ] [114] [ ] [115] [ ] [116] [ ] [117] [ ] Mutability Boolean value True False bytes bytearray ( b 'Some ASCII' ) bytearray ( b \"Some ASCII\" ) bytearray ([ 119 , 105 , 107 , 105 ]) b 'Some ASCII' b \"Some ASCII\" bytes ([ 119 , 105 , 107 , 105 ]) Complex number 3 + 2.7 j 3 + 2.7 j Associative array { 'key1' : 1.0 , 3 : False } {} ellipsis NumPy ... Ellipsis Double-precision floating-point number IEEE 754 [118] [ ] 1.33333 1.33333 set frozenset([4.0, 'string', True]) frozenset ([ 4.0 , 'string' , True ]) Integer [119] [ ] 42 List [ 4.0 , 'string' , True ] [] null None overloaded operators NotImplemented [120] [ ] range ( \u2212 1 , 10 ) range ( 10 , \u2212 5 , \u2212 2 ) set { 4.0 , 'string' , True } set () character string 'Wikipedia' \"Wikipedia\" \"\"\"Spanning multiple lines\"\"\" Spanning multiple lines ( 4.0 , 'string' , True ) ( 'single element' ,) () Arithmetic operations [edit] [ edit edit ] Python has the usual symbols for arithmetic operators (+, -, *, /), the floor division operator // and the modulo operation % (where the remainder can be negative, e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0, and a matrix\u2011multiplication operator @ .[121] These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and negative numbers respectively). modulo operation exponentiation [121] [ ] precedence rules infix unary The division between integers produces floating-point results. The behavior of division has changed significantly over time:[122] [122] [ ] Current Python (i.e. since 3.0) changed / to always be floating-point division, e.g. 5/2 == 2.5. 5 / 2 == 2.5 The floor division // operator was introduced. So 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 and -7.5//3 == -3.0. Adding from __future__ import division causes a module used in Python 2.7 to use Python 3.0 rules for division (see above). from __future__ import division In Python terms, / is true division (or simply division), and // is floor division. / before version 3.0 is classic division.[122] [122] [ ] Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b), where b is a positive integer, it has to lie in the interval (b, 0] when b is negative.[123] ( a + b ) // b == a // b + 1 b * ( a // b ) + a % b == a half-open interval [123] [ ] Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2.[124] Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5) is \u22121.0.[125] rounding tie-breaking round to even [124] [ ] round-away-from-zero [125] [ ] Python allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c.[126] C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[127] [126] [ ] [127] [ ] Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes.[128] The Fraction class in the fractions module provides arbitrary precision for rational numbers.[129] arbitrary-precision arithmetic decimal floating-point numbers [128] [ ] rational numbers [129] [ ] Due to Python's extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.[130][131] NumPy [130] [ ] [131] [ ] Function syntax [edit] [ edit edit ] Functions are created in Python using the def keyword. In Python, you define the function as if you were calling it, by typing the function name and then the attributes required. Here is an example of a function that will print whatever is given: def printer ( input1 , input2 = \"already there\" ): print ( input1 ) print ( input2 ) printer ( \"hello\" ) # Example output: # hello # already there If you want the attribute to have a set value if no value is given, use the variable-defining syntax inside the function definition. Programming examples [edit] [ edit edit ] \"Hello, World!\" program: \"Hello, World!\" program print ( 'Hello, world!' ) Program to calculate the factorial of a positive integer: factorial n = int ( input ( 'Type a number, and its factorial will be printed: ' )) if n < 0 : raise ValueError ( 'You must enter a non-negative integer' ) factorial = 1 for i in range ( 2 , n + 1 ): factorial *= i print ( factorial ) Libraries [edit] [ edit edit ] Python's large standard library[132] provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals,[128] manipulating regular expressions, and unit testing. [132] [ ] MIME HTTP graphical user interfaces relational databases generating pseudorandom numbers [128] [ ] regular expressions unit testing Some parts of the standard library are covered by specifications\u2014for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333[133]\u2014but most are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations. Web Server Gateway Interface [133] [ ] test suites As of 17 March 2024,[update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 523,000[134] packages with a wide range of functionality, including: [update] Python Package Index [134] [ ] Automation Automation Data analytics Data analytics Databases Databases Documentation Documentation Graphical user interfaces Graphical user interfaces Image processing Image processing Machine learning Machine learning Mobile apps Mobile apps Multimedia Multimedia Computer networking Computer networking Scientific computing Scientific computing System administration System administration Test frameworks Test frameworks Text processing Text processing Web frameworks Web frameworks Web scraping Web scraping Development environments [edit] [ edit edit ] Comparison of integrated development environments \u00a7 Python Most Python implementations (including CPython) include a read\u2013eval\u2013print loop (REPL), permitting them to function as a command line interpreter for which users enter statements sequentially and receive results immediately. read\u2013eval\u2013print loop command line interpreter Python also comes with an Integrated development environment (IDE) called IDLE, which is more beginner-oriented. Integrated development environment (IDE) IDLE Other shells, including IDLE and IPython, add further abilities such as improved auto-completion, session state retention, and syntax highlighting. IDLE IPython syntax highlighting As well as standard desktop integrated development environments including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are web browser-based IDEs, including SageMath, for developing science- and math-related programs; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.[135] integrated development environments web browser SageMath PythonAnywhere scientific computing [135] [ ] Implementations [edit] [ edit edit ] List of Python software \u00a7 Python implementations Reference implementation [edit] [ edit edit ] CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions\u2014e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.) CPython reference implementation C89 C11 [136] [ ] C99 C11 [137] [ ] [138] [ ] compiles bytecode [139] [ ] virtual machine [140] [ ] Windows 7 [141] [ ] [142] [ ] Windows XP Unix-like Apple M1 VMS [143] [ ] [144] [ ] OS/2 Solaris [145] [ ] All current Python versions (i.e. since 3.7) only support operating systems with multi-threading support. Other implementations [edit] [ edit edit ] All alternative implementations have at least slightly different semantics (e.g. may have unordered dictionaries, unlike all current Python versions), e.g. with the larger Python ecosystem, such as with supporting the C Python API of with PyPy: PyPy is a fast, compliant interpreter of Python 2.7 and 3.10.[146][147] Its just-in-time compiler often brings a significant speed improvement over CPython, but some libraries written in C cannot be used with it.[148] It has e.g. RISC-V support. PyPy [146] [ ] [147] [ ] just-in-time compiler [148] [ ] RISC-V Codon is a language with an ahead-of-time (AOT) compiler, that (AOT) compiles a statically-typed Python-like language with \"syntax and semantics are nearly identical to Python's, there are some notable differences\"[149] e.g. it uses 64-bit machine integers, for speed, not arbitrary like Python, and it claims speedups over CPython are usually on the order of 10\u2013100x. It compiles to machine code (via LLVM) and supports native multithreading.[150] Codon can also compile to Python extension modules that can be imported and used from Python. Codon ahead-of-time (AOT) compiler [149] [ ] LLVM [150] [ ] Stackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version.[151] Stackless Python microthreads call stack [151] [ ] MicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms EV3.[152] MicroPython CircuitPython microcontrollers Lego Mindstorms EV3 [152] [ ] Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs.[153] [153] [ ] Cinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler.[154] JIT [154] [ ] Snek[155][156][157] Embedded Computing Language (compatible with e.g. 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, as well as larger ones compatible with MicroPython) \"is Python-inspired, but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek.\"[158] It is an imperative language not including OOP / classes, unlike Python, and simplifying to one number type with 32-bit single-precision (similar to JavaScript, except smaller). Snek [155] [ ] [156] [ ] [157] [ ] AVR microcontrollers ATmega 328P MicroPython [158] [ ] OOP single-precision JavaScript No longer supported implementations [edit] [ edit edit ] Other just-in-time Python compilers have been developed, but are now unsupported: Google began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter five-fold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores,[159] while ordinary implementations suffer from the global interpreter lock. Unladen Swallow LLVM multithreading [159] [ ] global interpreter lock Psyco is a discontinued just-in-time specializing compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than the standard Python code. Psyco does not support Python 2.7 or later. Psyco just-in-time specializing data types PyS60 was a Python 2 interpreter for Series 60 mobile phones released by Nokia in 2005. It implemented many of the modules from the standard library and some additional modules for integrating with the Symbian operating system. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run on the target device.[160] PyS60 Series 60 Nokia Symbian N900 GTK [160] [ ] Cross-compilers to other languages [edit] [ edit edit ] There are several compilers/transpilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language: transpilers Brython,[161] Transcrypt[162][163] and Pyjs (latest release in 2012) compile Python to JavaScript. [161] [ ] [162] [ ] [163] [ ] Pyjs JavaScript Cython compiles (a superset of) Python to C. The resulting code is also usable with Python via direct C-level API calls into the Python interpreter. Cython PyJL compiles/transpiles a subset of Python to \"human-readable, maintainable, and high-performance Julia source code\".[88] Despite claiming high performance, no tool can claim to do that for arbitrary Python code; i.e. it's known not possible to compile to a faster language or machine code. Unless semantics of Python are changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then be used from Python, or compiled to machine code, and based that way. [88] [ ] Nuitka compiles Python into C.[164] It works with Python 3.4 to 3.12 (and 2.6 and 2.7), for Python's main supported platforms (and Windows 7 or even Windows XP) and for Android. It claims complete support for Python 3.10, some support for 3.11 and 3.12 and experimental support for Python 3.13. It supports macOS including Apple Silicon-based. It's a free compiler, though it also has commercial add-ons (e.g. for hiding source code). Nuitka [164] [ ] Numba is used from Python, as a tool (enabled by adding a decorator to relevant Python code), a JIT compiler that translates a subset of Python and NumPy code into fast machine code. Numba Pythran compiles a subset of Python 3 to C++ (C++11).[165] C++11 [165] [ ] RPython can be compiled to C, and is used to build the PyPy interpreter of Python. RPython The Python \u2192 11l \u2192 C++ transpiler[166] compiles a subset of Python 3 to C++ (C++17). [166] [ ] C++17 Specialized: MyHDL is a Python-based hardware description language (HDL), that converts MyHDL code to Verilog or VHDL code. MyHDL hardware description language Verilog VHDL Older projects (or not to be used with Python 3.x and latest syntax): Google's Grumpy (latest release in 2017) transpiles Python 2 to Go.[167][168][169] transpiles Go [167] [ ] [168] [ ] [169] [ ] IronPython allows running Python 2.7 programs (and an alpha, released in 2021, is also available for \"Python 3.4, although features and behaviors from later versions may be included\"[170]) on the .NET Common Language Runtime.[171] IronPython alpha [170] [ ] Common Language Runtime [171] [ ] Jython compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program.[172] Jython [172] [ ] Pyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively. Pyrex Shed Skin Performance [edit] [ edit edit ] Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.[173] Python's performance compared to other programming languages is also benchmarked by The Computer Language Benchmarks Game.[174] [173] [ ] The Computer Language Benchmarks Game [174] [ ] Development [edit] [ edit edit ] Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.[175] Python coding style is covered in PEP 8.[176] Outstanding PEPs are reviewed and commented on by the Python community and the steering council.[175] [175] [ ] [176] [ ] [175] [ ] Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation.[177] In 2022, all issues and discussions were migrated to GitHub.[178] Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017.[179] Roundup bug tracker [177] [ ] GitHub [178] [ ] self-hosted Mercurial GitHub [179] [ ] CPython's public releases come in three types, distinguished by which part of the version number is incremented: Backward-incompatible versions, where code is expected to break and needs to be manually ported. The first part of the version number is incremented. These releases happen infrequently\u2014version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen.[180] ported [180] [ ] Major or \"feature\" releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to happen annually.[181][182] Each major version is supported by bug fixes for several years after its release.[183] [181] [ ] [182] [ ] [183] [ ] Bug fix releases,[184] which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.[184] [184] [ ] [184] [ ] Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large unit test suite during development.[185] alpha, beta, and release-candidates unit test [185] [ ] The major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies. academic conference PyCon PyLadies Python 3.12 removed wstr meaning Python extensions[186] need to be modified,[187] and 3.10 added pattern matching to the language.[188] [186] [ ] [187] [ ] pattern matching [188] [ ] Python 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15. API documentation generators [edit] [ edit edit ] Tools that can generate documentation for Python API include pydoc (available as part of the standard library), Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.[189] API pydoc Sphinx Pdoc Doxygen Graphviz [189] [ ] Naming [edit] [ edit edit ] Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as \"Pythonistas\".[194] Monty Python [190] [ ] metasyntactic variables spam and eggs foo and bar [190] [ ] [191] [ ] [192] [ ] [193] [ ] [194] [ ] The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of Simple DirectMedia Layer to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python implementation originally written in Python. Pygame binding Simple DirectMedia Layer PyQt PyGTK Qt PyPy Popularity [edit] [ edit edit ] Since 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022[update] it was the most popular language (ahead of C, C++, and Java).[40] It was selected as Programming Language of the Year (for \"the highest rise in ratings in a year\") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020[update][195]). TIOBE Programming Community Index [update] Java [40] [ ] [update] [195] [ ] Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like Industrial Light & Magic[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205] Organizations that partially use Python include Discord[206] and Baidu.[207] Wikipedia Google [196] [ ] Yahoo! [197] [ ] CERN [198] [ ] NASA [199] [ ] Facebook [200] [ ] Amazon Instagram [201] [ ] Spotify [202] [ ] Industrial Light & Magic [203] [ ] ITA [204] [ ] Reddit [205] [ ] Discord [206] [ ] Baidu [207] [ ] Uses [edit] [ edit edit ] List of Python software Python can serve as a scripting language for web applications, e.g. via mod_wsgi for the Apache webserver.[208] With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox. scripting language web applications mod_wsgi Apache webserver [208] [ ] Web Server Gateway Interface Web frameworks Django Pylons Pyramid TurboGears web2py Tornado Flask Zope IronPython SQLAlchemy data mapper Twisted Dropbox Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[209][210] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[211] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[212] NumPy SciPy Matplotlib [209] [ ] [210] [ ] Biopython Astropy SageMath computer algebra system notebook interface mathematics algebra combinatorics numerical mathematics number theory calculus [211] [ ] OpenCV computer vision image processing [212] [ ] Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[213][214][215][216][217] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[218] artificial intelligence TensorFlow Keras Pytorch scikit-learn ProbLog [213] [ ] [214] [ ] [215] [ ] [216] [ ] [217] [ ] modular architecture natural language processing [218] [ ] The combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capabilities. The Janus system, in particular, exploits the similarities between these two languages, in part because of their use of dynamic typing, and the simple recursive nature of their data structures. Typical applications of this combination include natural language processing, visual query answering, geospatial reasoning, and handling of semantic web data.[219][220] The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.[221] Prolog [219] [ ] [220] [ ] Definite Clause Grammars [221] [ ] Python can also be used for graphical user interface (GUI) by using libraries like Tkinter.[222][223] graphical user interface Tkinter [222] [ ] [223] [ ] Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[224] Inkscape, Scribus and Paint Shop Pro,[225] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[226] It has also been used in several video games,[227][228] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[229] finite element method Abaqus FreeCAD 3ds Max Blender Cinema 4D Lightwave Houdini Maya modo MotionBuilder Softimage Nuke GIMP [224] [ ] Inkscape Scribus Paint Shop Pro [225] [ ] musical notation scorewriter capella GNU Debugger pretty printer Esri ArcGIS [226] [ ] [227] [ ] [228] [ ] programming languages Google App Engine Java Go [229] [ ] Many operating systems include Python as a standard component. It ships with most Linux distributions,[230] AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage. Linux distributions [230] [ ] AmigaOS 4 FreeBSD NetBSD OpenBSD Ubuntu Ubiquity Red Hat Linux Fedora Linux Anaconda Gentoo Linux package management system Portage Python is used extensively in the information security industry, including in exploit development.[231][232] information security [231] [ ] [232] [ ] Most of the Sugar software for the One Laptop per Child XO, developed at Sugar Labs as of 2008[update], is written in Python.[233] The Raspberry Pi single-board computer project has adopted Python as its main user-programming language. Sugar One Laptop per Child Sugar Labs [update] [233] [ ] Raspberry Pi single-board computer LibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature[234] since Version 4.0 from 7 February 2013. LibreOffice [234] [ ] Languages influenced by Python [edit] [ edit edit ] Python's design and philosophy have influenced many other programming languages: Boo uses indentation, a similar syntax, and a similar object model.[235] Boo [235] [ ] Cobra uses indentation and a similar syntax, and its Acknowledgements document lists Python first among languages that influenced it.[236] Cobra [236] [ ] CoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax. CoffeeScript ECMAScript\u2013JavaScript borrowed iterators and generators from Python.[237] ECMAScript JavaScript generators [237] [ ] GDScript, a scripting language very similar to Python, built-in to the Godot game engine.[238] GDScript Godot [238] [ ] Go is designed for the \"speed of working in a dynamic language like Python\"[239] and shares the same syntax for slicing arrays. Go [239] [ ] Groovy was motivated by the desire to bring the Python design philosophy to Java.[240] Groovy Java [240] [ ] Julia was designed to be \"as usable for general programming as Python\".[27] Julia [27] [ ] Mojo is a non-strict[28][241] superset of Python (e.g. still missing classes, and adding e.g. struct).[242] Mojo [28] [ ] [241] [ ] struct [242] [ ] Nim uses indentation and similar syntax.[243] Nim [243] [ ] Ruby's creator, Yukihiro Matsumoto, has said: \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"[244] Ruby Yukihiro Matsumoto [244] [ ] Swift, a programming language developed by Apple, has some Python-inspired syntax.[245] Swift [245] [ ] Kotlin blends Python and Java features, minimizing boilerplate code for enhanced developer efficiency.[246] Kotlin [246] [ ] Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl,[247] Erlang,[248] and Swift.[249] Tcl [247] [ ] Erlang [248] [ ] [249] [ ] See also [edit] [ edit edit ] Computer programming portal Computer programming portal Computer programming portal Free and open-source software portal Free and open-source software portal Free and open-source software portal Python syntax and semantics Python syntax and semantics pip (package manager) pip (package manager) List of programming languages List of programming languages History of programming languages History of programming languages Comparison of programming languages Comparison of programming languages References [edit] [ edit edit ] ^ \"General Python FAQ \u2013 Python 3 documentation\". docs.python.org. Retrieved 7 July 2024. ^ ^ \"General Python FAQ \u2013 Python 3 documentation\". docs.python.org. Retrieved 7 July 2024. \"General Python FAQ \u2013 Python 3 documentation\" . Retrieved 7 July 2024 7 July ^ \"Python 0.9.1 part 01/21\". alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021. ^ ^ \"Python 0.9.1 part 01/21\". alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021. \"Python 0.9.1 part 01/21\" Archived . Retrieved 11 August 2021 11 August ^ \"Why is Python a dynamic language and also a strongly typed language\". Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021. ^ ^ \"Why is Python a dynamic language and also a strongly typed language\". Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021. \"Why is Python a dynamic language and also a strongly typed language\" Archived . Retrieved 27 January 2021 27 January ^ a b \"PEP 483 \u2013 The Theory of Type Hints\". Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018. ^ a b a b \"PEP 483 \u2013 The Theory of Type Hints\". Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018. \"PEP 483 \u2013 The Theory of Type Hints\" Archived . Retrieved 14 June 2018 14 June ^ \"PEP 11 \u2013 CPython platform support | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 22 April 2024. ^ ^ \"PEP 11 \u2013 CPython platform support | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 22 April 2024. \"PEP 11 \u2013 CPython platform support | peps.python.org\" . Retrieved 22 April 2024 22 April ^ \"PEP 738 \u2013 Adding Android as a supported platform | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 19 May 2024. ^ ^ \"PEP 738 \u2013 Adding Android as a supported platform | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 19 May 2024. \"PEP 738 \u2013 Adding Android as a supported platform | peps.python.org\" . Retrieved 19 May 2024 19 May ^ \"Download Python for Other Platforms\". Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023. ^ ^ \"Download Python for Other Platforms\". Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023. \"Download Python for Other Platforms\" Archived . Retrieved 18 August 2023 18 August ^ \"test \u2013 Regression tests package for Python \u2013 Python 3.7.13 documentation\". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ ^ \"test \u2013 Regression tests package for Python \u2013 Python 3.7.13 documentation\". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. \"test \u2013 Regression tests package for Python \u2013 Python 3.7.13 documentation\" Archived . Retrieved 17 May 2022 17 May ^ \"platform \u2013 Access to underlying platform's identifying data \u2013 Python 3.10.4 documentation\". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ ^ \"platform \u2013 Access to underlying platform's identifying data \u2013 Python 3.10.4 documentation\". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. \"platform \u2013 Access to underlying platform's identifying data \u2013 Python 3.10.4 documentation\" Archived . Retrieved 17 May 2022 17 May ^ Holth, Moore (30 March 2014). \"PEP 0441 \u2013 Improving Python ZIP Application Support\". Archived from the original on 26 December 2018. Retrieved 12 November 2015. ^ ^ Holth, Moore (30 March 2014). \"PEP 0441 \u2013 Improving Python ZIP Application Support\". Archived from the original on 26 December 2018. Retrieved 12 November 2015. \"PEP 0441 \u2013 Improving Python ZIP Application Support\" Archived . Retrieved 12 November 2015 12 November ^ \"Starlark Language\". Archived from the original on 15 June 2020. Retrieved 25 May 2019. ^ ^ \"Starlark Language\". Archived from the original on 15 June 2020. Retrieved 25 May 2019. \"Starlark Language\" Archived . Retrieved 25 May 2019 25 May ^ a b \"Why was Python created in the first place?\". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python). ^ a b a b \"Why was Python created in the first place?\". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python). \"Why was Python created in the first place?\" Archived . Retrieved 22 March 2007 22 March ^ \"Ada 83 Reference Manual (raise statement)\". Archived from the original on 22 October 2019. Retrieved 7 January 2020. ^ ^ \"Ada 83 Reference Manual (raise statement)\". Archived from the original on 22 October 2019. Retrieved 7 January 2020. \"Ada 83 Reference Manual (raise statement)\" Archived . Retrieved 7 January 2020 7 January ^ a b Kuchling, Andrew M. (22 December 2006). \"Interview with Guido van Rossum (July 1998)\". amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I'd spent a summer at DEC's Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon. ^ a b a b Kuchling, Andrew M. (22 December 2006). \"Interview with Guido van Rossum (July 1998)\". amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I'd spent a summer at DEC's Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon. \"Interview with Guido van Rossum (July 1998)\" the original . Retrieved 12 March 2012 12 March ^ a b c \"itertools \u2013 Functions creating iterators for efficient looping \u2013 Python 3.7.1 documentation\". docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. ^ a b c a b c \"itertools \u2013 Functions creating iterators for efficient looping \u2013 Python 3.7.1 documentation\". docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. \"itertools \u2013 Functions creating iterators for efficient looping \u2013 Python 3.7.1 documentation\" Archived . Retrieved 22 November 2016 22 November ^ van Rossum, Guido (1993). \"An Introduction to Python for UNIX/C Programmers\". Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable. ^ ^ van Rossum, Guido (1993). \"An Introduction to Python for UNIX/C Programmers\". Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable. CiteSeerX 10.1.1.38.2023 10.1.1.38.2023 ^ a b \"Classes\". The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3 ^ a b a b \"Classes\". The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3 \"Classes\" Archived . Retrieved 20 February 2012 20 February ^ Lundh, Fredrik. \"Call By Object\". effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model. ^ ^ Lundh, Fredrik. \"Call By Object\". effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model. \"Call By Object\" Archived . Retrieved 21 November 2017 21 November ^ Simionato, Michele. \"The Python 2.3 Method Resolution Order\". Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers ^ ^ Simionato, Michele. \"The Python 2.3 Method Resolution Order\". Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers \"The Python 2.3 Method Resolution Order\" Archived . Retrieved 29 July 2014 29 July ^ Kuchling, A. M. \"Functional Programming HOWTO\". Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell. ^ ^ Kuchling, A. M. \"Functional Programming HOWTO\". Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell. \"Functional Programming HOWTO\" Archived . Retrieved 9 February 2012 9 February ^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). \"PEP 255 \u2013 Simple Generators\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012. ^ ^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). \"PEP 255 \u2013 Simple Generators\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012. \"PEP 255 \u2013 Simple Generators\" Archived . Retrieved 9 February 2012 9 February ^ \"More Control Flow Tools\". Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created. ^ ^ \"More Control Flow Tools\". Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created. \"More Control Flow Tools\" Archived . Retrieved 24 July 2015 24 July ^ \"re \u2013 Regular expression operations \u2013 Python 3.10.6 documentation\". docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in Perl. ^ ^ \"re \u2013 Regular expression operations \u2013 Python 3.10.6 documentation\". docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in Perl. \"re \u2013 Regular expression operations \u2013 Python 3.10.6 documentation\" Archived . Retrieved 6 September 2022 6 September ^ \"CoffeeScript\". coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018. ^ ^ \"CoffeeScript\". coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018. \"CoffeeScript\" Archived . Retrieved 3 July 2018 3 July ^ \"Perl and Python influences in JavaScript\". www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ ^ \"Perl and Python influences in JavaScript\". www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015. \"Perl and Python influences in JavaScript\" Archived . Retrieved 15 May 2015 15 May ^ Rauschmayer, Axel. \"Chapter 3: The Nature of JavaScript; Influences\". O'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ ^ Rauschmayer, Axel. \"Chapter 3: The Nature of JavaScript; Influences\". O'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015. \"Chapter 3: The Nature of JavaScript; Influences\" Archived . Retrieved 15 May 2015 15 May ^ a b \"Why We Created Julia\". Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...] ^ a b a b \"Why We Created Julia\". Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...] \"Why We Created Julia\" Archived . Retrieved 5 June 2014 5 June ^ a b Krill, Paul (4 May 2023). \"Mojo language marries Python and MLIR for AI development\". InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023. ^ a b a b Krill, Paul (4 May 2023). \"Mojo language marries Python and MLIR for AI development\". InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023. \"Mojo language marries Python and MLIR for AI development\" Archived . Retrieved 5 May 2023 5 May ^ Ring Team (4 December 2017). \"Ring and other languages\". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017. ^ ^ Ring Team (4 December 2017). \"Ring and other languages\". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017. \"Ring and other languages\" ring-lang Archived . Retrieved 4 December 2017 4 December ^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. ^ ^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform 3 ISBN 978-1-59059-881-8 ^ Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ ^ Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. \"Chris Lattner's Homepage\" Archived . Retrieved 3 June 2014 3 June ^ \"V documentation (Introduction)\". GitHub. Retrieved 24 December 2024. ^ ^ \"V documentation (Introduction)\". GitHub. Retrieved 24 December 2024. \"V documentation (Introduction)\" . Retrieved 24 December 2024 24 December ^ Kuhlman, Dave. \"A Python Book: Beginning Python, Advanced Python, and Python Exercises\". Section 1.1. Archived from the original (PDF) on 23 June 2012. ^ ^ Kuhlman, Dave. \"A Python Book: Beginning Python, Advanced Python, and Python Exercises\". Section 1.1. Archived from the original (PDF) on 23 June 2012. \"A Python Book: Beginning Python, Advanced Python, and Python Exercises\" the original (PDF) ^ \"About Python\". Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section \"Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files.\" ^ ^ \"About Python\". Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section \"Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files.\" \"About Python\" Archived . Retrieved 24 April 2012 24 April ^ \"PEP 206 \u2013 Python Advanced Library\". Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021. ^ ^ \"PEP 206 \u2013 Python Advanced Library\". Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021. \"PEP 206 \u2013 Python Advanced Library\" Archived . Retrieved 11 October 2021 11 October ^ Rossum, Guido Van (20 January 2009). \"The History of Python: A Brief Timeline of Python\". The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021. ^ ^ Rossum, Guido Van (20 January 2009). \"The History of Python: A Brief Timeline of Python\". The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021. \"The History of Python: A Brief Timeline of Python\" Archived . Retrieved 5 March 2021 5 March ^ Peterson, Benjamin (20 April 2020). \"Python 2.7.18, the last release of Python 2\". Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020. ^ ^ Peterson, Benjamin (20 April 2020). \"Python 2.7.18, the last release of Python 2\". Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020. \"Python 2.7.18, the last release of Python 2\" Archived . Retrieved 27 April 2020 27 April ^ \"Stack Overflow Developer Survey 2022\". Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022. ^ ^ \"Stack Overflow Developer Survey 2022\". Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022. \"Stack Overflow Developer Survey 2022\" Archived . Retrieved 12 August 2022 12 August ^ \"The State of Developer Ecosystem in 2020 Infographic\". JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021. ^ ^ \"The State of Developer Ecosystem in 2020 Infographic\". JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021. \"The State of Developer Ecosystem in 2020 Infographic\" Archived . Retrieved 5 March 2021 5 March ^ a b \"TIOBE Index\". TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required. ^ a b a b \"TIOBE Index\". TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required. \"TIOBE Index\" Archived . Retrieved 3 January 2023 3 January ^ \"PYPL PopularitY of Programming Language index\". pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021. ^ ^ \"PYPL PopularitY of Programming Language index\". pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021. \"PYPL PopularitY of Programming Language index\" Archived . Retrieved 26 March 2021 26 March ^ a b Venners, Bill (13 January 2003). \"The Making of Python\". Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007. ^ a b a b Venners, Bill (13 January 2003). \"The Making of Python\". Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007. \"The Making of Python\" Archived . Retrieved 22 March 2007 22 March ^ van Rossum, Guido (29 August 2000). \"SETL (was: Lukewarm about range literals)\". Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011. ^ ^ van Rossum, Guido (29 August 2000). \"SETL (was: Lukewarm about range literals)\". Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011. van Rossum, Guido \"SETL (was: Lukewarm about range literals)\" Archived . Retrieved 13 March 2011 13 March ^ van Rossum, Guido (20 January 2009). \"A Brief Timeline of Python\". The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009. ^ ^ van Rossum, Guido (20 January 2009). \"A Brief Timeline of Python\". The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009. \"A Brief Timeline of Python\" Archived . Retrieved 20 January 2009 20 January ^ Fairchild, Carlie (12 July 2018). \"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life\". Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018. ^ ^ Fairchild, Carlie (12 July 2018). \"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life\". Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018. \"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life\" Archived . Retrieved 13 July 2018 13 July ^ \"PEP 8100\". Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019. ^ ^ \"PEP 8100\". Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019. \"PEP 8100\" Archived . Retrieved 4 May 2019 4 May ^ \"PEP 13 \u2013 Python Language Governance\". Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021. ^ ^ \"PEP 13 \u2013 Python Language Governance\". Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021. \"PEP 13 \u2013 Python Language Governance\" Archived . Retrieved 25 August 2021 25 August ^ Briggs, Jason R.; Lipova\u010da, Miran (2013). Python for kids: a playful introduction to programming. San Francisco, Calif: No Starch Press. ISBN 978-1-59327-407-8. ^ ^ Briggs, Jason R.; Lipova\u010da, Miran (2013). Python for kids: a playful introduction to programming. San Francisco, Calif: No Starch Press. ISBN 978-1-59327-407-8. ISBN 978-1-59327-407-8 ^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). \"What's New in Python 2.0\". Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012. ^ ^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). \"What's New in Python 2.0\". Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012. \"What's New in Python 2.0\" Archived . Retrieved 11 February 2012 11 February ^ \"PEP 373 \u2013 Python 2.7 Release Schedule\". python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017. ^ ^ \"PEP 373 \u2013 Python 2.7 Release Schedule\". python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017. \"PEP 373 \u2013 Python 2.7 Release Schedule\" Archived . Retrieved 9 January 2017 9 January ^ \"PEP 466 \u2013 Network Security Enhancements for Python 2.7.x\". python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017. ^ ^ \"PEP 466 \u2013 Network Security Enhancements for Python 2.7.x\". python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017. \"PEP 466 \u2013 Network Security Enhancements for Python 2.7.x\" Archived . Retrieved 9 January 2017 9 January ^ \"Sunsetting Python 2\". Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019. ^ ^ \"Sunsetting Python 2\". Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019. \"Sunsetting Python 2\" Archived . Retrieved 22 September 2019 22 September ^ \"PEP 373 \u2013 Python 2.7 Release Schedule\". Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019. ^ ^ \"PEP 373 \u2013 Python 2.7 Release Schedule\". Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019. \"PEP 373 \u2013 Python 2.7 Release Schedule\" Archived . Retrieved 22 September 2019 22 September ^ mattip (25 December 2023). \"PyPy v7.3.14 release\". PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024. ^ ^ mattip (25 December 2023). \"PyPy v7.3.14 release\". PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024. \"PyPy v7.3.14 release\" Archived . Retrieved 5 January 2024 5 January ^ Langa, \u0141ukasz (17 May 2022). \"Python 3.9.13 is now available\". Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022. ^ ^ Langa, \u0141ukasz (17 May 2022). \"Python 3.9.13 is now available\". Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022. \"Python 3.9.13 is now available\" Archived . Retrieved 21 May 2022 21 May ^ \"Status of Python versions\". Python Developer's Guide. Retrieved 7 October 2024. ^ ^ \"Status of Python versions\". Python Developer's Guide. Retrieved 7 October 2024. \"Status of Python versions\" . Retrieved 7 October 2024 7 October ^ \"Python\". endoflife.date. 8 October 2024. Retrieved 20 November 2024. ^ ^ \"Python\". endoflife.date. 8 October 2024. Retrieved 20 November 2024. \"Python\" . Retrieved 20 November 2024 20 November ^ \"CVE-2021-3177\". Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021. ^ ^ \"CVE-2021-3177\". Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021. \"CVE-2021-3177\" Archived . Retrieved 26 February 2021 26 February ^ \"CVE-2021-3177\". CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021. ^ ^ \"CVE-2021-3177\". CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021. \"CVE-2021-3177\" Archived . Retrieved 26 February 2021 26 February ^ \"CVE-2021-23336\". CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021. ^ ^ \"CVE-2021-23336\". CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021. \"CVE-2021-23336\" Archived . Retrieved 26 February 2021 26 February ^ \"Built-in Types\". ^ ^ \"Built-in Types\". \"Built-in Types\" ^ corbet (24 October 2022). \"Python 3.11 released [LWN.net]\". lwn.net. Retrieved 15 November 2022. ^ ^ corbet (24 October 2022). \"Python 3.11 released [LWN.net]\". lwn.net. Retrieved 15 November 2022. \"Python 3.11 released [LWN.net]\" . Retrieved 15 November 2022 15 November ^ \"What's New In Python 3.13\". Python documentation. Retrieved 30 April 2024. ^ ^ \"What's New In Python 3.13\". Python documentation. Retrieved 30 April 2024. \"What's New In Python 3.13\" . Retrieved 30 April 2024 30 April ^ \"PEP 667 \u2013 Consistent views of namespaces | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 7 October 2024. ^ ^ \"PEP 667 \u2013 Consistent views of namespaces | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 7 October 2024. \"PEP 667 \u2013 Consistent views of namespaces | peps.python.org\" . Retrieved 7 October 2024 7 October ^ Wouters, Thomas (9 April 2024). \"Python Insider: Python 3.12.3 and 3.13.0a6 released\". Python Insider. Retrieved 29 April 2024. ^ ^ Wouters, Thomas (9 April 2024). \"Python Insider: Python 3.12.3 and 3.13.0a6 released\". Python Insider. Retrieved 29 April 2024. \"Python Insider: Python 3.12.3 and 3.13.0a6 released\" . Retrieved 29 April 2024 29 April ^ \"PEP 594 \u2013 Removing dead batteries from the standard library\". Python Enhancement Proposals. Python Softtware Foundation. 20 May 2019. ^ ^ \"PEP 594 \u2013 Removing dead batteries from the standard library\". Python Enhancement Proposals. Python Softtware Foundation. 20 May 2019. \"PEP 594 \u2013 Removing dead batteries from the standard library\" ^ Hugo (15 October 2024). \"Python Insider: Python 3.14.0 alpha 1 is now available\". Python Insider. Retrieved 16 October 2024. ^ ^ Hugo (15 October 2024). \"Python Insider: Python 3.14.0 alpha 1 is now available\". Python Insider. Retrieved 16 October 2024. \"Python Insider: Python 3.14.0 alpha 1 is now available\" . Retrieved 16 October 2024 16 October ^ \"PEP 749 \u2013 Implementing PEP 649 | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ ^ \"PEP 749 \u2013 Implementing PEP 649 | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. \"PEP 749 \u2013 Implementing PEP 649 | peps.python.org\" . Retrieved 20 November 2024 20 November ^ \"PEP 711: PyBI: a standard format for distributing Python Binaries\". Discussions on Python.org. 7 April 2023. Retrieved 20 November 2024. ^ ^ \"PEP 711: PyBI: a standard format for distributing Python Binaries\". Discussions on Python.org. 7 April 2023. Retrieved 20 November 2024. \"PEP 711: PyBI: a standard format for distributing Python Binaries\" . Retrieved 20 November 2024 20 November ^ \"PEP 686 \u2013 Make UTF-8 mode default | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ ^ \"PEP 686 \u2013 Make UTF-8 mode default | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. \"PEP 686 \u2013 Make UTF-8 mode default | peps.python.org\" . Retrieved 20 November 2024 20 November ^ The Cain Gang Ltd. \"Python Metaclasses: Who? Why? When?\" (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009. ^ ^ The Cain Gang Ltd. \"Python Metaclasses: Who? Why? When?\" (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009. \"Python Metaclasses: Who? Why? When?\" (PDF) the original (PDF) . Retrieved 27 June 2009 27 June ^ \"3.3. Special method names\". The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ ^ \"3.3. Special method names\". The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009. \"3.3. Special method names\" Archived . Retrieved 27 June 2009 27 June ^ \"PyDBC: method preconditions, method postconditions and class invariants for Python\". Archived from the original on 23 November 2019. Retrieved 24 September 2011. ^ ^ \"PyDBC: method preconditions, method postconditions and class invariants for Python\". Archived from the original on 23 November 2019. Retrieved 24 September 2011. \"PyDBC: method preconditions, method postconditions and class invariants for Python\" Archived . Retrieved 24 September 2011 24 September ^ \"Contracts for Python\". Archived from the original on 15 June 2020. Retrieved 24 September 2011. ^ ^ \"Contracts for Python\". Archived from the original on 15 June 2020. Retrieved 24 September 2011. \"Contracts for Python\" Archived . Retrieved 24 September 2011 24 September ^ \"PyDatalog\". Archived from the original on 13 June 2020. Retrieved 22 July 2012. ^ ^ \"PyDatalog\". Archived from the original on 13 June 2020. Retrieved 22 July 2012. \"PyDatalog\" Archived . Retrieved 22 July 2012 22 July ^ \"Glue It All Together With Python\". Python.org. Retrieved 30 September 2024. ^ ^ \"Glue It All Together With Python\". Python.org. Retrieved 30 September 2024. \"Glue It All Together With Python\" . Retrieved 30 September 2024 30 September ^ \"Extending and Embedding the Python Interpreter: Reference Counts\". Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting. ^ ^ \"Extending and Embedding the Python Interpreter: Reference Counts\". Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting. \"Extending and Embedding the Python Interpreter: Reference Counts\" Archived . Retrieved 5 June 2020 5 June ^ a b Hettinger, Raymond (30 January 2002). \"PEP 289 \u2013 Generator Expressions\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ a b a b Hettinger, Raymond (30 January 2002). \"PEP 289 \u2013 Generator Expressions\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. \"PEP 289 \u2013 Generator Expressions\" Archived . Retrieved 19 February 2012 19 February ^ \"6.5 itertools \u2013 Functions creating iterators for efficient looping\". Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. ^ ^ \"6.5 itertools \u2013 Functions creating iterators for efficient looping\". Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. \"6.5 itertools \u2013 Functions creating iterators for efficient looping\" Archived . Retrieved 22 November 2016 22 November ^ a b Peters, Tim (19 August 2004). \"PEP 20 \u2013 The Zen of Python\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008. ^ a b a b Peters, Tim (19 August 2004). \"PEP 20 \u2013 The Zen of Python\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008. \"PEP 20 \u2013 The Zen of Python\" Archived . Retrieved 24 November 2008 24 November ^ Lutz, Mark (January 2022). \"Python Changes 2014+\". Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024. ^ ^ Lutz, Mark (January 2022). \"Python Changes 2014+\". Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024. \"Python Changes 2014+\" Archived . Retrieved 25 February 2024 25 February ^ \"Confusion regarding a rule in The Zen of Python\". Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024. ^ ^ \"Confusion regarding a rule in The Zen of Python\". Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024. \"Confusion regarding a rule in The Zen of Python\" Archived . Retrieved 25 February 2024 25 February ^ Ambi, Chetan (4 July 2021). \"The Most Controversial Python Walrus Operator\". Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024. ^ ^ Ambi, Chetan (4 July 2021). \"The Most Controversial Python Walrus Operator\". Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024. \"The Most Controversial Python Walrus Operator\" Archived . Retrieved 5 February 2024 5 February ^ Grifski, Jeremy (24 May 2020). \"The Controversy Behind The Walrus Operator in Python\". The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024. ^ ^ Grifski, Jeremy (24 May 2020). \"The Controversy Behind The Walrus Operator in Python\". The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024. \"The Controversy Behind The Walrus Operator in Python\" Archived . Retrieved 25 February 2024 25 February ^ Bader, Dan. \"Python String Formatting Best Practices\". Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024. ^ ^ Bader, Dan. \"Python String Formatting Best Practices\". Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024. \"Python String Formatting Best Practices\" Archived . Retrieved 25 February 2024 25 February ^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015. ^ ^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015. Python Cookbook, 2nd Edition O'Reilly Media ISBN 978-0-596-00797-3 Archived . Retrieved 14 November 2015 14 November ^ \"Python Culture\". ebeab. 21 January 2014. Archived from the original on 30 January 2014. ^ ^ \"Python Culture\". ebeab. 21 January 2014. Archived from the original on 30 January 2014. \"Python Culture\" the original ^ a b \"Transpiling Python to Julia using PyJL\" (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6\u00d7, making the translated Julia code 19.5\u00d7 faster than the original Python code. ^ a b a b \"Transpiling Python to Julia using PyJL\" (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6\u00d7, making the translated Julia code 19.5\u00d7 faster than the original Python code. \"Transpiling Python to Julia using PyJL\" (PDF) Archived (PDF) . Retrieved 20 September 2023 20 September ^ \"Why is it called Python?\". General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023. ^ ^ \"Why is it called Python?\". General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023. \"Why is it called Python?\" Archived . Retrieved 3 January 2023 3 January ^ \"15 Ways Python Is a Powerful Force on the Web\". Archived from the original on 11 May 2019. Retrieved 3 July 2018. ^ ^ \"15 Ways Python Is a Powerful Force on the Web\". Archived from the original on 11 May 2019. Retrieved 3 July 2018. \"15 Ways Python Is a Powerful Force on the Web\" the original . Retrieved 3 July 2018 3 July ^ \"pprint \u2013 Data pretty printer \u2013 Python 3.11.0 documentation\". docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni'] ^ ^ \"pprint \u2013 Data pretty printer \u2013 Python 3.11.0 documentation\". docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni'] \"pprint \u2013 Data pretty printer \u2013 Python 3.11.0 documentation\" Archived . Retrieved 5 November 2022 5 November ^ \"Code Style \u2013 The Hitchhiker's Guide to Python\". docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021. ^ ^ \"Code Style \u2013 The Hitchhiker's Guide to Python\". docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021. \"Code Style \u2013 The Hitchhiker's Guide to Python\" Archived . Retrieved 20 January 2021 20 January ^ \"Is Python a good language for beginning programmers?\". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007. ^ ^ \"Is Python a good language for beginning programmers?\". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007. \"Is Python a good language for beginning programmers?\" Archived . Retrieved 21 March 2007 21 March ^ \"Myths about indentation in Python\". Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011. ^ ^ \"Myths about indentation in Python\". Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011. \"Myths about indentation in Python\" the original . Retrieved 19 April 2011 19 April ^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4. ^ ^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4. ISBN 978-0-262-52962-4 ^ \"PEP 8 \u2013 Style Guide for Python Code\". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ ^ \"PEP 8 \u2013 Style Guide for Python Code\". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. \"PEP 8 \u2013 Style Guide for Python Code\" Archived . Retrieved 26 March 2019 26 March ^ \"8. Errors and Exceptions \u2013 Python 3.12.0a0 documentation\". docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022. ^ ^ \"8. Errors and Exceptions \u2013 Python 3.12.0a0 documentation\". docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022. \"8. Errors and Exceptions \u2013 Python 3.12.0a0 documentation\" Archived . Retrieved 9 May 2022 9 May ^ \"Highlights: Python 2.5\". Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018. ^ ^ \"Highlights: Python 2.5\". Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018. \"Highlights: Python 2.5\" Archived . Retrieved 20 March 2018 20 March ^ van Rossum, Guido (22 April 2009). \"Tail Recursion Elimination\". Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012. ^ ^ van Rossum, Guido (22 April 2009). \"Tail Recursion Elimination\". Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012. \"Tail Recursion Elimination\" Archived . Retrieved 3 December 2012 3 December ^ van Rossum, Guido (9 February 2006). \"Language Design Is Not Just Solving Puzzles\". Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007. ^ ^ van Rossum, Guido (9 February 2006). \"Language Design Is Not Just Solving Puzzles\". Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007. \"Language Design Is Not Just Solving Puzzles\" Archived . Retrieved 21 March 2007 21 March ^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). \"PEP 342 \u2013 Coroutines via Enhanced Generators\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012. ^ ^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). \"PEP 342 \u2013 Coroutines via Enhanced Generators\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012. \"PEP 342 \u2013 Coroutines via Enhanced Generators\" Archived . Retrieved 19 February 2012 19 February ^ \"PEP 380\". Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012. ^ ^ \"PEP 380\". Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012. \"PEP 380\" Archived . Retrieved 3 December 2012 3 December ^ \"division\". python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014. ^ ^ \"division\". python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014. \"division\" Archived . Retrieved 30 July 2014 30 July ^ \"PEP 0465 \u2013 A dedicated infix operator for matrix multiplication\". python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016. ^ ^ \"PEP 0465 \u2013 A dedicated infix operator for matrix multiplication\". python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016. \"PEP 0465 \u2013 A dedicated infix operator for matrix multiplication\" Archived . Retrieved 1 January 2016 1 January ^ \"Python 3.5.1 Release and Changelog\". python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016. ^ ^ \"Python 3.5.1 Release and Changelog\". python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016. \"Python 3.5.1 Release and Changelog\" Archived . Retrieved 1 January 2016 1 January ^ \"What's New in Python 3.8\". Archived from the original on 8 June 2020. Retrieved 14 October 2019. ^ ^ \"What's New in Python 3.8\". Archived from the original on 8 June 2020. Retrieved 14 October 2019. \"What's New in Python 3.8\" Archived . Retrieved 14 October 2019 14 October ^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). \"PEP 308 \u2013 Conditional Expressions\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011. ^ ^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). \"PEP 308 \u2013 Conditional Expressions\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011. \"PEP 308 \u2013 Conditional Expressions\" Archived . Retrieved 13 July 2011 13 July ^ \"4. Built-in Types \u2013 Python 3.6.3rc1 documentation\". python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017. ^ ^ \"4. Built-in Types \u2013 Python 3.6.3rc1 documentation\". python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017. \"4. Built-in Types \u2013 Python 3.6.3rc1 documentation\" Archived . Retrieved 1 October 2017 1 October ^ \"5.3. Tuples and Sequences \u2013 Python 3.7.1rc2 documentation\". python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018. ^ ^ \"5.3. Tuples and Sequences \u2013 Python 3.7.1rc2 documentation\". python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018. \"5.3. Tuples and Sequences \u2013 Python 3.7.1rc2 documentation\" Archived . Retrieved 17 October 2018 17 October ^ a b \"PEP 498 \u2013 Literal String Interpolation\". python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017. ^ a b a b \"PEP 498 \u2013 Literal String Interpolation\". python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017. \"PEP 498 \u2013 Literal String Interpolation\" Archived . Retrieved 8 March 2017 8 March ^ \"Why must 'self' be used explicitly in method definitions and calls?\". Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012. ^ ^ \"Why must 'self' be used explicitly in method definitions and calls?\". Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012. \"Why must 'self' be used explicitly in method definitions and calls?\" Archived . Retrieved 19 February 2012 19 February ^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021. ^ ^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021. Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code ISBN 978-1-59327-966-0 Archived . Retrieved 7 July 2021 7 July ^ \"The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1\". Archived from the original on 26 October 2012. Retrieved 12 January 2011. ^ ^ \"The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1\". Archived from the original on 26 October 2012. Retrieved 12 January 2011. \"The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1\" the original . Retrieved 12 January 2011 12 January ^ \"PEP 484 \u2013 Type Hints | peps.python.org\". peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023. ^ ^ \"PEP 484 \u2013 Type Hints | peps.python.org\". peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023. \"PEP 484 \u2013 Type Hints | peps.python.org\" Archived . Retrieved 29 November 2023 29 November ^ \"typing \u2014 Support for type hints\". Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023. ^ ^ \"typing \u2014 Support for type hints\". Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023. \"typing \u2014 Support for type hints\" Archived . Retrieved 22 December 2023 22 December ^ \"mypy \u2013 Optional Static Typing for Python\". Archived from the original on 6 June 2020. Retrieved 28 January 2017. ^ ^ \"mypy \u2013 Optional Static Typing for Python\". Archived from the original on 6 June 2020. Retrieved 28 January 2017. \"mypy \u2013 Optional Static Typing for Python\" Archived . Retrieved 28 January 2017 28 January ^ \"Introduction\". mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023. ^ ^ \"Introduction\". mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023. \"Introduction\" Archived . Retrieved 22 December 2023 22 December ^ \"15. Floating Point Arithmetic: Issues and Limitations \u2013 Python 3.8.3 documentation\". docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 \"double precision\". ^ ^ \"15. Floating Point Arithmetic: Issues and Limitations \u2013 Python 3.8.3 documentation\". docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 \"double precision\". \"15. Floating Point Arithmetic: Issues and Limitations \u2013 Python 3.8.3 documentation\" Archived . Retrieved 6 June 2020 6 June ^ Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 237 \u2013 Unifying Long Integers and Integers\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011. ^ ^ Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 237 \u2013 Unifying Long Integers and Integers\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011. \"PEP 237 \u2013 Unifying Long Integers and Integers\" Archived . Retrieved 24 September 2011 24 September ^ \"Built-in Types\". Archived from the original on 14 June 2020. Retrieved 3 October 2019. ^ ^ \"Built-in Types\". Archived from the original on 14 June 2020. Retrieved 3 October 2019. \"Built-in Types\" Archived . Retrieved 3 October 2019 3 October ^ \"PEP 465 \u2013 A dedicated infix operator for matrix multiplication\". python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018. ^ ^ \"PEP 465 \u2013 A dedicated infix operator for matrix multiplication\". python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018. \"PEP 465 \u2013 A dedicated infix operator for matrix multiplication\" Archived . Retrieved 3 July 2018 3 July ^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 238 \u2013 Changing the Division Operator\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013. ^ a b a b Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 238 \u2013 Changing the Division Operator\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013. \"PEP 238 \u2013 Changing the Division Operator\" Archived . Retrieved 23 October 2013 23 October ^ \"Why Python's Integer Division Floors\". 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010. ^ ^ \"Why Python's Integer Division Floors\". 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010. \"Why Python's Integer Division Floors\" Archived . Retrieved 25 August 2010 25 August ^ \"round\", The Python standard library, release 3.2, \u00a72: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011 ^ ^ \"round\", The Python standard library, release 3.2, \u00a72: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011 \"round\" archived , retrieved 14 August 2011 14 August ^ \"round\", The Python standard library, release 2.7, \u00a72: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011 ^ ^ \"round\", The Python standard library, release 2.7, \u00a72: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011 \"round\" archived , retrieved 14 August 2011 14 August ^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784. ^ ^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784. Python Essential Reference Python Essential Reference 66 ISBN 9780672329784 ^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206. ^ ^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206. The C Programming Language 206 ^ a b Batista, Facundo (17 October 2003). \"PEP 327 \u2013 Decimal Data Type\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008. ^ a b a b Batista, Facundo (17 October 2003). \"PEP 327 \u2013 Decimal Data Type\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008. \"PEP 327 \u2013 Decimal Data Type\" Archived . Retrieved 24 November 2008 24 November ^ \"What's New in Python 2.6\". Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015. ^ ^ \"What's New in Python 2.6\". Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015. \"What's New in Python 2.6\" Archived . Retrieved 26 September 2015 26 September ^ \"10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) \u2013 Hoyt Koepke\". University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019. ^ ^ \"10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) \u2013 Hoyt Koepke\". University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019. \"10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) \u2013 Hoyt Koepke\" the original . Retrieved 3 February 2019 3 February ^ Shell, Scott (17 June 2014). \"An introduction to Python for scientific computing\" (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019. ^ ^ Shell, Scott (17 June 2014). \"An introduction to Python for scientific computing\" (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019. \"An introduction to Python for scientific computing\" (PDF) Archived (PDF) . Retrieved 3 February 2019 3 February ^ Piotrowski, Przemyslaw (July 2006). \"Build a Rapid Web Development Environment for Python Server Pages and Oracle\". Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012. ^ ^ Piotrowski, Przemyslaw (July 2006). \"Build a Rapid Web Development Environment for Python Server Pages and Oracle\". Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012. \"Build a Rapid Web Development Environment for Python Server Pages and Oracle\" Archived . Retrieved 12 March 2012 12 March ^ Eby, Phillip J. (7 December 2003). \"PEP 333 \u2013 Python Web Server Gateway Interface v1.0\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ ^ Eby, Phillip J. (7 December 2003). \"PEP 333 \u2013 Python Web Server Gateway Interface v1.0\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. \"PEP 333 \u2013 Python Web Server Gateway Interface v1.0\" Archived . Retrieved 19 February 2012 19 February ^ \"PyPI\". PyPI. 17 March 2024. Archived from the original on 17 March 2024. ^ ^ \"PyPI\". PyPI. 17 March 2024. Archived from the original on 17 March 2024. \"PyPI\" Archived ^ Enthought, Canopy. \"Canopy\". www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016. ^ ^ Enthought, Canopy. \"Canopy\". www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016. \"Canopy\" the original . Retrieved 20 August 2016 20 August ^ \"PEP 7 \u2013 Style Guide for C Code | peps.python.org\". peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022. ^ ^ \"PEP 7 \u2013 Style Guide for C Code | peps.python.org\". peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022. \"PEP 7 \u2013 Style Guide for C Code | peps.python.org\" Archived . Retrieved 28 April 2022 28 April ^ \"4. Building C and C++ Extensions \u2013 Python 3.9.2 documentation\". docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021. ^ ^ \"4. Building C and C++ Extensions \u2013 Python 3.9.2 documentation\". docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021. \"4. Building C and C++ Extensions \u2013 Python 3.9.2 documentation\" Archived . Retrieved 1 March 2021 1 March ^ van Rossum, Guido (5 June 2001). \"PEP 7 \u2013 Style Guide for C Code\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008. ^ ^ van Rossum, Guido (5 June 2001). \"PEP 7 \u2013 Style Guide for C Code\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008. \"PEP 7 \u2013 Style Guide for C Code\" Archived . Retrieved 24 November 2008 24 November ^ \"CPython byte code\". Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016. ^ ^ \"CPython byte code\". Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016. \"CPython byte code\" Archived . Retrieved 16 February 2016 16 February ^ \"Python 2.5 internals\" (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011. ^ ^ \"Python 2.5 internals\" (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011. \"Python 2.5 internals\" (PDF) Archived (PDF) . Retrieved 19 April 2011 19 April ^ \"Changelog \u2013 Python 3.9.0 documentation\". docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021. ^ ^ \"Changelog \u2013 Python 3.9.0 documentation\". docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021. \"Changelog \u2013 Python 3.9.0 documentation\" Archived . Retrieved 8 February 2021 8 February ^ \"Download Python\". Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020. ^ ^ \"Download Python\". Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020. \"Download Python\" Archived . Retrieved 13 December 2020 13 December ^ \"history [vmspython]\". www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020. ^ ^ \"history [vmspython]\". www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020. \"history [vmspython]\" Archived . Retrieved 4 December 2020 4 December ^ \"An Interview with Guido van Rossum\". Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008. ^ ^ \"An Interview with Guido van Rossum\". Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008. \"An Interview with Guido van Rossum\" Archived . Retrieved 24 November 2008 24 November ^ \"Download Python for Other Platforms\". Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020. ^ ^ \"Download Python for Other Platforms\". Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020. \"Download Python for Other Platforms\" Archived . Retrieved 4 December 2020 4 December ^ \"PyPy compatibility\". Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012. ^ ^ \"PyPy compatibility\". Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012. \"PyPy compatibility\" Archived . Retrieved 3 December 2012 3 December ^ Team, The PyPy (28 December 2019). \"Download and Install\". PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022. ^ ^ Team, The PyPy (28 December 2019). \"Download and Install\". PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022. \"Download and Install\" Archived . Retrieved 8 January 2022 8 January ^ \"speed comparison between CPython and Pypy\". Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012. ^ ^ \"speed comparison between CPython and Pypy\". Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012. \"speed comparison between CPython and Pypy\" Archived . Retrieved 3 December 2012 3 December ^ \"Codon: Differences with Python\". Archived from the original on 25 May 2023. Retrieved 28 August 2023. ^ ^ \"Codon: Differences with Python\". Archived from the original on 25 May 2023. Retrieved 28 August 2023. \"Codon: Differences with Python\" Archived . Retrieved 28 August 2023 28 August ^ Lawson, Loraine (14 March 2023). \"MIT-Created Compiler Speeds up Python Code\". The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023. ^ ^ Lawson, Loraine (14 March 2023). \"MIT-Created Compiler Speeds up Python Code\". The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023. \"MIT-Created Compiler Speeds up Python Code\" Archived . Retrieved 28 August 2023 28 August ^ \"Application-level Stackless features \u2013 PyPy 2.0.2 documentation\". Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013. ^ ^ \"Application-level Stackless features \u2013 PyPy 2.0.2 documentation\". Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013. \"Application-level Stackless features \u2013 PyPy 2.0.2 documentation\" Archived . Retrieved 17 July 2013 17 July ^ \"Python-for-EV3\". LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019. ^ ^ \"Python-for-EV3\". LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019. \"Python-for-EV3\" Archived . Retrieved 17 April 2019 17 April ^ Yegulalp, Serdar (29 October 2020). \"Pyston returns from the dead to speed Python\". InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021. ^ ^ Yegulalp, Serdar (29 October 2020). \"Pyston returns from the dead to speed Python\". InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021. \"Pyston returns from the dead to speed Python\" InfoWorld Archived . Retrieved 26 January 2021 26 January ^ \"cinder: Instagram's performance-oriented fork of CPython\". GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021. ^ ^ \"cinder: Instagram's performance-oriented fork of CPython\". GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021. \"cinder: Instagram's performance-oriented fork of CPython\" GitHub Archived . Retrieved 4 May 2021 4 May ^ Aroca, Rafael (7 August 2021). \"Snek Lang: feels like Python on Arduinos\". Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ ^ Aroca, Rafael (7 August 2021). \"Snek Lang: feels like Python on Arduinos\". Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024. \"Snek Lang: feels like Python on Arduinos\" Archived . Retrieved 4 January 2024 4 January ^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). \"Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) \u2013 CNX Software\". CNX Software \u2013 Embedded Systems News. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ ^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). \"Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) \u2013 CNX Software\". CNX Software \u2013 Embedded Systems News. Archived from the original on 5 January 2024. Retrieved 4 January 2024. \"Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) \u2013 CNX Software\" Archived . Retrieved 4 January 2024 4 January ^ Kennedy (@mkennedy), Michael. \"Ready to find out if you're git famous?\". pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ ^ Kennedy (@mkennedy), Michael. \"Ready to find out if you're git famous?\". pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024. \"Ready to find out if you're git famous?\" Archived . Retrieved 4 January 2024 4 January ^ Packard, Keith (20 December 2022). \"The Snek Programming Language: A Python-inspired Embedded Computing Language\" (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024. ^ ^ Packard, Keith (20 December 2022). \"The Snek Programming Language: A Python-inspired Embedded Computing Language\" (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024. \"The Snek Programming Language: A Python-inspired Embedded Computing Language\" (PDF) Archived (PDF) . Retrieved 4 January 2024 4 January ^ \"Plans for optimizing Python\". Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011. ^ ^ \"Plans for optimizing Python\". Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011. \"Plans for optimizing Python\" Archived . Retrieved 24 September 2011 24 September ^ \"Python on the Nokia N900\". Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015. ^ ^ \"Python on the Nokia N900\". Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015. \"Python on the Nokia N900\" Archived . Retrieved 9 July 2015 9 July ^ \"Brython\". brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021. ^ ^ \"Brython\". brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021. \"Brython\" Archived . Retrieved 21 January 2021 21 January ^ \"Transcrypt \u2013 Python in the browser\". transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020. ^ ^ \"Transcrypt \u2013 Python in the browser\". transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020. \"Transcrypt \u2013 Python in the browser\" Archived . Retrieved 22 December 2020 22 December ^ \"Transcrypt: Anatomy of a Python to JavaScript Compiler\". InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021. ^ ^ \"Transcrypt: Anatomy of a Python to JavaScript Compiler\". InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021. \"Transcrypt: Anatomy of a Python to JavaScript Compiler\" Archived . Retrieved 20 January 2021 20 January ^ \"Nuitka Home | Nuitka Home\". nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017. ^ ^ \"Nuitka Home | Nuitka Home\". nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017. \"Nuitka Home | Nuitka Home\" Archived . Retrieved 18 August 2017 18 August ^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). \"Pythran: enabling static optimization of scientific Python programs\". Computational Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699. ^ ^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). \"Pythran: enabling static optimization of scientific Python programs\". Computational Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699. \"Pythran: enabling static optimization of scientific Python programs\" Bibcode 2015CS&D....8a4001G doi 10.1088/1749-4680/8/1/014001 10.1088/1749-4680/8/1/014001 ISSN 1749-4699 ^ \"The Python \u2192 11l \u2192 C++ transpiler\". Archived from the original on 24 September 2022. Retrieved 17 July 2022. ^ ^ \"The Python \u2192 11l \u2192 C++ transpiler\". Archived from the original on 24 September 2022. Retrieved 17 July 2022. \"The Python \u2192 11l \u2192 C++ transpiler\" Archived . Retrieved 17 July 2022 17 July ^ \"google/grumpy\". 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 \u2013 via GitHub. ^ ^ \"google/grumpy\". 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 \u2013 via GitHub. \"google/grumpy\" Archived . Retrieved 25 March 2020 25 March ^ \"Projects\". opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020. ^ ^ \"Projects\". opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020. \"Projects\" Archived . Retrieved 25 March 2020 25 March ^ Francisco, Thomas Claburn in San. \"Google's Grumpy code makes Python Go\". www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021. ^ ^ Francisco, Thomas Claburn in San. \"Google's Grumpy code makes Python Go\". www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021. \"Google's Grumpy code makes Python Go\" Archived . Retrieved 20 January 2021 20 January ^ \"GitHub \u2013 IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime\". GitHub. Archived from the original on 28 September 2021. ^ ^ \"GitHub \u2013 IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime\". GitHub. Archived from the original on 28 September 2021. \"GitHub \u2013 IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime\" GitHub Archived ^ \"IronPython.net /\". ironpython.net. Archived from the original on 17 April 2021. ^ ^ \"IronPython.net /\". ironpython.net. Archived from the original on 17 April 2021. \"IronPython.net /\" Archived ^ \"Jython FAQ\". www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021. ^ ^ \"Jython FAQ\". www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021. \"Jython FAQ\" Archived . Retrieved 22 April 2021 22 April ^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M. ^ ^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M. arXiv 1404.6388 1404.6388 Bibcode 2014arXiv1404.6388M ^ \"The Computer Language Benchmarks Game\". Archived from the original on 14 June 2020. Retrieved 30 April 2020. ^ ^ \"The Computer Language Benchmarks Game\". Archived from the original on 14 June 2020. Retrieved 30 April 2020. \"The Computer Language Benchmarks Game\" Archived . Retrieved 30 April 2020 30 April ^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). \"PEP 1 \u2013 PEP Purpose and Guidelines\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011. ^ a b a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). \"PEP 1 \u2013 PEP Purpose and Guidelines\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011. \"PEP 1 \u2013 PEP Purpose and Guidelines\" Archived . Retrieved 19 April 2011 19 April ^ \"PEP 8 \u2013 Style Guide for Python Code\". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ ^ \"PEP 8 \u2013 Style Guide for Python Code\". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. \"PEP 8 \u2013 Style Guide for Python Code\" Archived . Retrieved 26 March 2019 26 March ^ Cannon, Brett. \"Guido, Some Guys, and a Mailing List: How Python is Developed\". python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009. ^ ^ Cannon, Brett. \"Guido, Some Guys, and a Mailing List: How Python is Developed\". python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009. \"Guido, Some Guys, and a Mailing List: How Python is Developed\" the original . Retrieved 27 June 2009 27 June ^ \"Moving Python's bugs to GitHub [LWN.net]\". Archived from the original on 2 October 2022. Retrieved 2 October 2022. ^ ^ \"Moving Python's bugs to GitHub [LWN.net]\". Archived from the original on 2 October 2022. Retrieved 2 October 2022. \"Moving Python's bugs to GitHub [LWN.net]\" Archived . Retrieved 2 October 2022 2 October ^ \"Python Developer's Guide \u2013 Python Developer's Guide\". devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019. ^ ^ \"Python Developer's Guide \u2013 Python Developer's Guide\". devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019. \"Python Developer's Guide \u2013 Python Developer's Guide\" Archived . Retrieved 17 December 2019 17 December ^ Hughes, Owen (24 May 2021). \"Programming languages: Why Python 4.0 might never arrive, according to its creator\". TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022. ^ ^ Hughes, Owen (24 May 2021). \"Programming languages: Why Python 4.0 might never arrive, according to its creator\". TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022. \"Programming languages: Why Python 4.0 might never arrive, according to its creator\" Archived . Retrieved 16 May 2022 16 May ^ \"PEP 602 \u2013 Annual Release Cycle for Python\". Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019. ^ ^ \"PEP 602 \u2013 Annual Release Cycle for Python\". Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019. \"PEP 602 \u2013 Annual Release Cycle for Python\" Archived . Retrieved 6 November 2019 6 November ^ \"Changing the Python release cadence [LWN.net]\". lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019. ^ ^ \"Changing the Python release cadence [LWN.net]\". lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019. \"Changing the Python release cadence [LWN.net]\" Archived . Retrieved 6 November 2019 6 November ^ Norwitz, Neal (8 April 2002). \"[Python-Dev] Release Schedules (was Stability & change)\". Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ ^ Norwitz, Neal (8 April 2002). \"[Python-Dev] Release Schedules (was Stability & change)\". Archived from the original on 15 December 2018. Retrieved 27 June 2009. \"[Python-Dev] Release Schedules (was Stability & change)\" Archived . Retrieved 27 June 2009 27 June ^ a b Aahz; Baxter, Anthony (15 March 2001). \"PEP 6 \u2013 Bug Fix Releases\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009. ^ a b a b Aahz; Baxter, Anthony (15 March 2001). \"PEP 6 \u2013 Bug Fix Releases\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009. \"PEP 6 \u2013 Bug Fix Releases\" Archived . Retrieved 27 June 2009 27 June ^ \"Python Buildbot\". Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011. ^ ^ \"Python Buildbot\". Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011. \"Python Buildbot\" Archived . Retrieved 24 September 2011 24 September ^ \"1. Extending Python with C or C++ \u2013 Python 3.9.1 documentation\". docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021. ^ ^ \"1. Extending Python with C or C++ \u2013 Python 3.9.1 documentation\". docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021. \"1. Extending Python with C or C++ \u2013 Python 3.9.1 documentation\" Archived . Retrieved 14 February 2021 14 February ^ \"PEP 623 \u2013 Remove wstr from Unicode\". Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021. ^ ^ \"PEP 623 \u2013 Remove wstr from Unicode\". Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021. \"PEP 623 \u2013 Remove wstr from Unicode\" Archived . Retrieved 14 February 2021 14 February ^ \"PEP 634 \u2013 Structural Pattern Matching: Specification\". Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021. ^ ^ \"PEP 634 \u2013 Structural Pattern Matching: Specification\". Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021. \"PEP 634 \u2013 Structural Pattern Matching: Specification\" Archived . Retrieved 14 February 2021 14 February ^ \"Documentation Tools\". Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021. ^ ^ \"Documentation Tools\". Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021. \"Documentation Tools\" Archived . Retrieved 22 March 2021 22 March ^ a b \"Whetting Your Appetite\". The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012. ^ a b a b \"Whetting Your Appetite\". The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012. \"Whetting Your Appetite\" Archived . Retrieved 20 February 2012 20 February ^ \"In Python, should I use else after a return in an if block?\". Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011. ^ ^ \"In Python, should I use else after a return in an if block?\". Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011. \"In Python, should I use else after a return in an if block?\" Stack Overflow Archived . Retrieved 6 May 2011 6 May ^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ ^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017. Learning Python: Powerful Object-Oriented Programming ISBN 9781449379322 Archived . Retrieved 9 May 2017 9 May ^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ ^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017. Python ISBN 9780201748840 Archived . Retrieved 9 May 2017 9 May ^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023. ^ ^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023. Introducing Python ISBN 978-1-4493-5936-2 . Retrieved 31 July 2023 31 July ^ Blake, Troy (18 January 2021). \"TIOBE Index for January 2021\". Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021. ^ ^ Blake, Troy (18 January 2021). \"TIOBE Index for January 2021\". Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021. \"TIOBE Index for January 2021\" Archived . Retrieved 26 February 2021 26 February ^ \"Quotes about Python\". Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012. ^ ^ \"Quotes about Python\". Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012. \"Quotes about Python\" Archived . Retrieved 8 January 2012 8 January ^ \"Organizations Using Python\". Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009. ^ ^ \"Organizations Using Python\". Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009. \"Organizations Using Python\" Archived . Retrieved 15 January 2009 15 January ^ \"Python : the holy grail of programming\". CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012. ^ ^ \"Python : the holy grail of programming\". CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012. \"Python : the holy grail of programming\" Archived . Retrieved 11 February 2012 11 February ^ Shafer, Daniel G. (17 January 2003). \"Python Streamlines Space Shuttle Mission Design\". Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008. ^ ^ Shafer, Daniel G. (17 January 2003). \"Python Streamlines Space Shuttle Mission Design\". Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008. \"Python Streamlines Space Shuttle Mission Design\" Archived . Retrieved 24 November 2008 24 November ^ \"Tornado: Facebook's Real-Time Web Framework for Python \u2013 Facebook for Developers\". Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018. ^ ^ \"Tornado: Facebook's Real-Time Web Framework for Python \u2013 Facebook for Developers\". Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018. \"Tornado: Facebook's Real-Time Web Framework for Python \u2013 Facebook for Developers\" Archived . Retrieved 19 June 2018 19 June ^ \"What Powers Instagram: Hundreds of Instances, Dozens of Technologies\". Instagram Engineering. 11 December 2016. Archived from the original on 15 June 2020. Retrieved 27 May 2019. ^ ^ \"What Powers Instagram: Hundreds of Instances, Dozens of Technologies\". Instagram Engineering. 11 December 2016. Archived from the original on 15 June 2020. Retrieved 27 May 2019. \"What Powers Instagram: Hundreds of Instances, Dozens of Technologies\" Archived . Retrieved 27 May 2019 27 May ^ \"How we use Python at Spotify\". Spotify Labs. 20 March 2013. Archived from the original on 10 June 2020. Retrieved 25 July 2018. ^ ^ \"How we use Python at Spotify\". Spotify Labs. 20 March 2013. Archived from the original on 10 June 2020. Retrieved 25 July 2018. \"How we use Python at Spotify\" Archived . Retrieved 25 July 2018 25 July ^ Fortenberry, Tim (17 January 2003). \"Industrial Light & Magic Runs on Python\". Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 11 February 2012. ^ ^ Fortenberry, Tim (17 January 2003). \"Industrial Light & Magic Runs on Python\". Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 11 February 2012. \"Industrial Light & Magic Runs on Python\" Archived . Retrieved 11 February 2012 11 February ^ Taft, Darryl K. (5 March 2007). \"Python Slithers into Systems\". eWeek.com. Ziff Davis Holdings. Archived from the original on 13 August 2021. Retrieved 24 September 2011. ^ ^ Taft, Darryl K. (5 March 2007). \"Python Slithers into Systems\". eWeek.com. Ziff Davis Holdings. Archived from the original on 13 August 2021. Retrieved 24 September 2011. \"Python Slithers into Systems\" Archived . Retrieved 24 September 2011 24 September ^ GitHub \u2013 reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, archived from the original on 1 June 2020, retrieved 20 March 2019 ^ ^ GitHub \u2013 reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, archived from the original on 1 June 2020, retrieved 20 March 2019 GitHub \u2013 reddit-archive/reddit: historical code from reddit.com. archived , retrieved 20 March 2019 20 March ^ \"Real time communication at scale with Elixir at Discord\". 8 October 2020. ^ ^ \"Real time communication at scale with Elixir at Discord\". 8 October 2020. \"Real time communication at scale with Elixir at Discord\" ^ \"What Programming Language is Baidu Built In?\". 5 July 2018. ^ ^ \"What Programming Language is Baidu Built In?\". 5 July 2018. \"What Programming Language is Baidu Built In?\" ^ \"Usage statistics and market share of Python for websites\". 2012. Archived from the original on 13 August 2021. Retrieved 18 December 2012. ^ ^ \"Usage statistics and market share of Python for websites\". 2012. Archived from the original on 13 August 2021. Retrieved 18 December 2012. \"Usage statistics and market share of Python for websites\" Archived . Retrieved 18 December 2012 18 December ^ Oliphant, Travis (2007). \"Python for Scientific Computing\". Computing in Science and Engineering. 9 (3): 10\u201320. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. ISSN 1521-9615. S2CID 206457124. Archived from the original on 15 June 2020. Retrieved 10 April 2015. ^ ^ Oliphant, Travis (2007). \"Python for Scientific Computing\". Computing in Science and Engineering. 9 (3): 10\u201320. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. ISSN 1521-9615. S2CID 206457124. Archived from the original on 15 June 2020. Retrieved 10 April 2015. \"Python for Scientific Computing\" 10\u2013 Bibcode 2007CSE.....9c..10O CiteSeerX 10.1.1.474.6460 10.1.1.474.6460 doi 10.1109/MCSE.2007.58 ISSN 1521-9615 S2CID 206457124 Archived . Retrieved 10 April 2015 10 April ^ Millman, K. Jarrod; Aivazis, Michael (2011). \"Python for Scientists and Engineers\". Computing in Science and Engineering. 13 (2): 9\u201312. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Archived from the original on 19 February 2019. Retrieved 7 July 2014. ^ ^ Millman, K. Jarrod; Aivazis, Michael (2011). \"Python for Scientists and Engineers\". Computing in Science and Engineering. 13 (2): 9\u201312. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Archived from the original on 19 February 2019. Retrieved 7 July 2014. \"Python for Scientists and Engineers\" 9\u2013 Bibcode 2011CSE....13b...9M doi 10.1109/MCSE.2011.36 Archived . Retrieved 7 July 2014 7 July ^ Science education with SageMath, Innovative Computing in Science Education, archived from the original on 15 June 2020, retrieved 22 April 2019 ^ ^ Science education with SageMath, Innovative Computing in Science Education, archived from the original on 15 June 2020, retrieved 22 April 2019 Science education with SageMath the original , retrieved 22 April 2019 22 April ^ \"OpenCV: OpenCV-Python Tutorials\". docs.opencv.org. Archived from the original on 23 September 2020. Retrieved 14 September 2020. ^ ^ \"OpenCV: OpenCV-Python Tutorials\". docs.opencv.org. Archived from the original on 23 September 2020. Retrieved 14 September 2020. \"OpenCV: OpenCV-Python Tutorials\" Archived . Retrieved 14 September 2020 14 September ^ Dean, Jeff; Monga, Rajat; et al. (9 November 2015). \"TensorFlow: Large-scale machine learning on heterogeneous systems\" (PDF). TensorFlow.org. Google Research. Archived (PDF) from the original on 20 November 2015. Retrieved 10 November 2015. ^ ^ Dean, Jeff; Monga, Rajat; et al. (9 November 2015). \"TensorFlow: Large-scale machine learning on heterogeneous systems\" (PDF). TensorFlow.org. Google Research. Archived (PDF) from the original on 20 November 2015. Retrieved 10 November 2015. Dean, Jeff \"TensorFlow: Large-scale machine learning on heterogeneous systems\" (PDF) Archived (PDF) . Retrieved 10 November 2015 10 November ^ Piatetsky, Gregory. \"Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis\". KDnuggets. Archived from the original on 15 November 2019. Retrieved 30 May 2018. ^ ^ Piatetsky, Gregory. \"Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis\". KDnuggets. Archived from the original on 15 November 2019. Retrieved 30 May 2018. \"Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis\" Archived . Retrieved 30 May 2018 30 May ^ \"Who is using scikit-learn? \u2013 scikit-learn 0.20.1 documentation\". scikit-learn.org. Archived from the original on 6 May 2020. Retrieved 30 November 2018. ^ ^ \"Who is using scikit-learn? \u2013 scikit-learn 0.20.1 documentation\". scikit-learn.org. Archived from the original on 6 May 2020. Retrieved 30 November 2018. \"Who is using scikit-learn? \u2013 scikit-learn 0.20.1 documentation\" Archived . Retrieved 30 November 2018 30 November ^ Jouppi, Norm. \"Google supercharges machine learning tasks with TPU custom chip\". Google Cloud Platform Blog. Archived from the original on 18 May 2016. Retrieved 19 May 2016. ^ ^ Jouppi, Norm. \"Google supercharges machine learning tasks with TPU custom chip\". Google Cloud Platform Blog. Archived from the original on 18 May 2016. Retrieved 19 May 2016. Jouppi, Norm \"Google supercharges machine learning tasks with TPU custom chip\" Archived . Retrieved 19 May 2016 19 May ^ De Raedt, Luc; Kimmig, Angelika (2015). \"Probabilistic (logic) programming concepts\". Machine Learning. 100 (1): 5\u201347. doi:10.1007/s10994-015-5494-z. S2CID 3166992. ^ ^ De Raedt, Luc; Kimmig, Angelika (2015). \"Probabilistic (logic) programming concepts\". Machine Learning. 100 (1): 5\u201347. doi:10.1007/s10994-015-5494-z. S2CID 3166992. \"Probabilistic (logic) programming concepts\" 5\u2013 doi 10.1007/s10994-015-5494-z 10.1007/s10994-015-5494-z S2CID 3166992 ^ \"Natural Language Toolkit \u2013 NLTK 3.5b1 documentation\". www.nltk.org. Archived from the original on 13 June 2020. Retrieved 10 April 2020. ^ ^ \"Natural Language Toolkit \u2013 NLTK 3.5b1 documentation\". www.nltk.org. Archived from the original on 13 June 2020. Retrieved 10 April 2020. \"Natural Language Toolkit \u2013 NLTK 3.5b1 documentation\" Archived . Retrieved 10 April 2020 10 April ^ Andersen, C. and Swift, T., 2023. The Janus System: a bridge to new prolog applications. In Prolog: The Next 50 Years (pp. 93\u2013104). Cham: Springer Nature Switzerland. ^ ^ Andersen, C. and Swift, T., 2023. The Janus System: a bridge to new prolog applications. In Prolog: The Next 50 Years (pp. 93\u2013104). Cham: Springer Nature Switzerland. ^ \"SWI-Prolog Python interface\". Archived from the original on 15 March 2024. Retrieved 15 March 2024. ^ ^ \"SWI-Prolog Python interface\". Archived from the original on 15 March 2024. Retrieved 15 March 2024. \"SWI-Prolog Python interface\" Archived . Retrieved 15 March 2024 15 March ^ Tarau, P., 2023. Reflections on automation, learnability and expressiveness in logic-based programming languages. In Prolog: The Next 50 Years (pp. 359\u2013371). Cham: Springer Nature Switzerland. ^ ^ Tarau, P., 2023. Reflections on automation, learnability and expressiveness in logic-based programming languages. In Prolog: The Next 50 Years (pp. 359\u2013371). Cham: Springer Nature Switzerland. ^ \"Tkinter \u2014 Python interface to TCL/Tk\". Archived from the original on 18 October 2012. Retrieved 9 June 2023. ^ ^ \"Tkinter \u2014 Python interface to TCL/Tk\". Archived from the original on 18 October 2012. Retrieved 9 June 2023. \"Tkinter \u2014 Python interface to TCL/Tk\" Archived . Retrieved 9 June 2023 9 June ^ \"Python Tkinter Tutorial\". 3 June 2020. Archived from the original on 9 June 2023. Retrieved 9 June 2023. ^ ^ \"Python Tkinter Tutorial\". 3 June 2020. Archived from the original on 9 June 2023. Retrieved 9 June 2023. \"Python Tkinter Tutorial\" Archived . Retrieved 9 June 2023 9 June ^ \"Installers for GIMP for Windows \u2013 Frequently Asked Questions\". 26 July 2013. Archived from the original on 17 July 2013. Retrieved 26 July 2013. ^ ^ \"Installers for GIMP for Windows \u2013 Frequently Asked Questions\". 26 July 2013. Archived from the original on 17 July 2013. Retrieved 26 July 2013. \"Installers for GIMP for Windows \u2013 Frequently Asked Questions\" the original . Retrieved 26 July 2013 26 July ^ \"jasc psp9components\". Archived from the original on 19 March 2008. ^ ^ \"jasc psp9components\". Archived from the original on 19 March 2008. \"jasc psp9components\" the original ^ \"About getting started with writing geoprocessing scripts\". ArcGIS Desktop Help 9.2. Environmental Systems Research Institute. 17 November 2006. Archived from the original on 5 June 2020. Retrieved 11 February 2012. ^ ^ \"About getting started with writing geoprocessing scripts\". ArcGIS Desktop Help 9.2. Environmental Systems Research Institute. 17 November 2006. Archived from the original on 5 June 2020. Retrieved 11 February 2012. \"About getting started with writing geoprocessing scripts\" Archived . Retrieved 11 February 2012 11 February ^ CCP porkbelly (24 August 2010). \"Stackless Python 2.7\". EVE Community Dev Blogs. CCP Games. Archived from the original on 11 January 2014. Retrieved 11 January 2014. As you may know, EVE has at its core the programming language known as Stackless Python. ^ ^ CCP porkbelly (24 August 2010). \"Stackless Python 2.7\". EVE Community Dev Blogs. CCP Games. Archived from the original on 11 January 2014. Retrieved 11 January 2014. As you may know, EVE has at its core the programming language known as Stackless Python. \"Stackless Python 2.7\" CCP Games Archived . Retrieved 11 January 2014 11 January ^ Caudill, Barry (20 September 2005). \"Modding Sid Meier's Civilization IV\". Sid Meier's Civilization IV Developer Blog. Firaxis Games. Archived from the original on 2 December 2010. we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it. ^ ^ Caudill, Barry (20 September 2005). \"Modding Sid Meier's Civilization IV\". Sid Meier's Civilization IV Developer Blog. Firaxis Games. Archived from the original on 2 December 2010. we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it. \"Modding Sid Meier's Civilization IV\" Firaxis Games the original ^ \"Python Language Guide (v1.0)\". Google Documents List Data API v1.0. Archived from the original on 15 July 2010. ^ ^ \"Python Language Guide (v1.0)\". Google Documents List Data API v1.0. Archived from the original on 15 July 2010. \"Python Language Guide (v1.0)\" the original ^ \"Python Setup and Usage\". Python Software Foundation. Archived from the original on 17 June 2020. Retrieved 10 January 2020. ^ ^ \"Python Setup and Usage\". Python Software Foundation. Archived from the original on 17 June 2020. Retrieved 10 January 2020. \"Python Setup and Usage\" Archived . Retrieved 10 January 2020 10 January ^ \"Immunity: Knowing You're Secure\". Archived from the original on 16 February 2009. ^ ^ \"Immunity: Knowing You're Secure\". Archived from the original on 16 February 2009. \"Immunity: Knowing You're Secure\" the original ^ \"Core Security\". Core Security. Archived from the original on 9 June 2020. Retrieved 10 April 2020. ^ ^ \"Core Security\". Core Security. Archived from the original on 9 June 2020. Retrieved 10 April 2020. \"Core Security\" Archived . Retrieved 10 April 2020 10 April ^ \"What is Sugar?\". Sugar Labs. Archived from the original on 9 January 2009. Retrieved 11 February 2012. ^ ^ \"What is Sugar?\". Sugar Labs. Archived from the original on 9 January 2009. Retrieved 11 February 2012. \"What is Sugar?\" Archived . Retrieved 11 February 2012 11 February ^ \"4.0 New Features and Fixes\". LibreOffice.org. The Document Foundation. 2013. Archived from the original on 9 February 2014. Retrieved 25 February 2013. ^ ^ \"4.0 New Features and Fixes\". LibreOffice.org. The Document Foundation. 2013. Archived from the original on 9 February 2014. Retrieved 25 February 2013. \"4.0 New Features and Fixes\" The Document Foundation Archived . Retrieved 25 February 2013 25 February ^ \"Gotchas for Python Users\". boo.codehaus.org. Codehaus Foundation. Archived from the original on 11 December 2008. Retrieved 24 November 2008. ^ ^ \"Gotchas for Python Users\". boo.codehaus.org. Codehaus Foundation. Archived from the original on 11 December 2008. Retrieved 24 November 2008. \"Gotchas for Python Users\" the original . Retrieved 24 November 2008 24 November ^ Esterbrook, Charles. \"Acknowledgements\". cobra-language.com. Cobra Language. Archived from the original on 8 February 2008. Retrieved 7 April 2010. ^ ^ Esterbrook, Charles. \"Acknowledgements\". cobra-language.com. Cobra Language. Archived from the original on 8 February 2008. Retrieved 7 April 2010. \"Acknowledgements\" the original . Retrieved 7 April 2010 7 April ^ \"Proposals: iterators and generators [ES4 Wiki]\". wiki.ecmascript.org. Archived from the original on 20 October 2007. Retrieved 24 November 2008. ^ ^ \"Proposals: iterators and generators [ES4 Wiki]\". wiki.ecmascript.org. Archived from the original on 20 October 2007. Retrieved 24 November 2008. \"Proposals: iterators and generators [ES4 Wiki]\" the original . Retrieved 24 November 2008 24 November ^ \"Frequently asked questions\". Godot Engine documentation. Archived from the original on 28 April 2021. Retrieved 10 May 2021. ^ ^ \"Frequently asked questions\". Godot Engine documentation. Archived from the original on 28 April 2021. Retrieved 10 May 2021. \"Frequently asked questions\" Archived . Retrieved 10 May 2021 10 May ^ Kincaid, Jason (10 November 2009). \"Google's Go: A New Programming Language That's Python Meets C++\". TechCrunch. Archived from the original on 18 January 2010. Retrieved 29 January 2010. ^ ^ Kincaid, Jason (10 November 2009). \"Google's Go: A New Programming Language That's Python Meets C++\". TechCrunch. Archived from the original on 18 January 2010. Retrieved 29 January 2010. \"Google's Go: A New Programming Language That's Python Meets C++\" Archived . Retrieved 29 January 2010 29 January ^ Strachan, James (29 August 2003). \"Groovy \u2013 the birth of a new dynamic language for the Java platform\". Archived from the original on 5 April 2007. Retrieved 11 June 2007. ^ ^ Strachan, James (29 August 2003). \"Groovy \u2013 the birth of a new dynamic language for the Java platform\". Archived from the original on 5 April 2007. Retrieved 11 June 2007. \"Groovy \u2013 the birth of a new dynamic language for the Java platform\" the original . Retrieved 11 June 2007 11 June ^ \"Modular Docs \u2013 Why Mojo\". docs.modular.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for. ^ ^ \"Modular Docs \u2013 Why Mojo\". docs.modular.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for. \"Modular Docs \u2013 Why Mojo\" Archived . Retrieved 5 May 2023 5 May ^ Spencer, Michael (4 May 2023). \"What is Mojo Programming Language?\". datasciencelearningcenter.substack.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023. ^ ^ Spencer, Michael (4 May 2023). \"What is Mojo Programming Language?\". datasciencelearningcenter.substack.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023. \"What is Mojo Programming Language?\" Archived . Retrieved 5 May 2023 5 May ^ Yegulalp, Serdar (16 January 2017). \"Nim language draws from best of Python, Rust, Go, and Lisp\". InfoWorld. Archived from the original on 13 October 2018. Retrieved 7 June 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed). ^ ^ Yegulalp, Serdar (16 January 2017). \"Nim language draws from best of Python, Rust, Go, and Lisp\". InfoWorld. Archived from the original on 13 October 2018. Retrieved 7 June 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed). \"Nim language draws from best of Python, Rust, Go, and Lisp\" Archived . Retrieved 7 June 2020 7 June ^ \"An Interview with the Creator of Ruby\". Linuxdevcenter.com. Archived from the original on 28 April 2018. Retrieved 3 December 2012. ^ ^ \"An Interview with the Creator of Ruby\". Linuxdevcenter.com. Archived from the original on 28 April 2018. Retrieved 3 December 2012. \"An Interview with the Creator of Ruby\" Archived . Retrieved 3 December 2012 3 December ^ Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 22 December 2015. Retrieved 3 June 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ ^ Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 22 December 2015. Retrieved 3 June 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. Lattner, Chris \"Chris Lattner's Homepage\" Archived . Retrieved 3 June 2014 3 June ^ Jalan, Nishant Aanjaney (10 November 2022). \"Programming in Kotlin\". CodeX. Retrieved 29 April 2024. ^ ^ Jalan, Nishant Aanjaney (10 November 2022). \"Programming in Kotlin\". CodeX. Retrieved 29 April 2024. \"Programming in Kotlin\" . Retrieved 29 April 2024 29 April ^ Kupries, Andreas; Fellows, Donal K. (14 September 2000). \"TIP #3: TIP Format\". tcl.tk. Tcl Developer Xchange. Archived from the original on 13 July 2017. Retrieved 24 November 2008. ^ ^ Kupries, Andreas; Fellows, Donal K. (14 September 2000). \"TIP #3: TIP Format\". tcl.tk. Tcl Developer Xchange. Archived from the original on 13 July 2017. Retrieved 24 November 2008. \"TIP #3: TIP Format\" Archived . Retrieved 24 November 2008 24 November ^ Gustafsson, Per; Niskanen, Raimo (29 January 2007). \"EEP 1: EEP Purpose and Guidelines\". erlang.org. Archived from the original on 15 June 2020. Retrieved 19 April 2011. ^ ^ Gustafsson, Per; Niskanen, Raimo (29 January 2007). \"EEP 1: EEP Purpose and Guidelines\". erlang.org. Archived from the original on 15 June 2020. Retrieved 19 April 2011. \"EEP 1: EEP Purpose and Guidelines\" Archived . Retrieved 19 April 2011 19 April ^ \"Swift Evolution Process\". Swift Programming Language Evolution repository on GitHub. 18 February 2020. Archived from the original on 27 April 2020. Retrieved 27 April 2020. ^ ^ \"Swift Evolution Process\". Swift Programming Language Evolution repository on GitHub. 18 February 2020. Archived from the original on 27 April 2020. Retrieved 27 April 2020. \"Swift Evolution Process\" Archived . Retrieved 27 April 2020 27 April Sources [edit] [ edit edit ] \"Python for Artificial Intelligence\". Python Wiki. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012. \"Python for Artificial Intelligence\" the original . Retrieved 3 December 2012 3 December Paine, Jocelyn, ed. (August 2005). \"AI in Python\". AI Expert Newsletter. Amzi!. Archived from the original on 26 March 2012. Retrieved 11 February 2012. \"AI in Python\" the original . Retrieved 11 February 2012 11 February \"PyAIML 0.8.5 : Python Package Index\". Pypi.python.org. Retrieved 17 July 2013. \"PyAIML 0.8.5 : Python Package Index\" . Retrieved 17 July 2013 17 July Russell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4. Russell, Stuart J. Norvig, Peter ISBN 978-0-13-604259-4 Further reading [edit] [ edit edit ] Downey, Allen (July 2024). Think Python: How to Think Like a Computer Scientist (3rd ed.). O'Reilly Media. ISBN 978-1098155438. Think Python: How to Think Like a Computer Scientist ISBN 978-1098155438 Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN 978-0-596-15806-4. ISBN 978-0-596-15806-4 Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3. ISBN 978-0-321-68056-3 Ramalho, Luciano (May 2022). Fluent Python. O'Reilly Media. ISBN 978-1-4920-5632-4. Fluent Python ISBN 978-1-4920-5632-4 External links [edit] [ edit edit ] sister projects sister projects Media from Commons Media from Commons Media Quotations from Wikiquote Quotations from Wikiquote Quotations Textbooks from Wikibooks Textbooks from Wikibooks Textbooks Resources from Wikiversity Resources from Wikiversity Resources Data from Wikidata Data from Wikidata Data Official website Official website Official website Official website The Python Tutorial The Python Tutorial v v t t e e Python Python Implementations CircuitPython CircuitPython CLPython CLPython CPython CPython Cython Cython MicroPython MicroPython Numba Numba IronPython IronPython Jython Jython Psyco Psyco PyPy PyPy Python for S60 Python for S60 Shed Skin Shed Skin Stackless Python Stackless Python Unladen Swallow Unladen Swallow more... more IDEs eric eric IDLE IDLE Ninja-IDE Ninja-IDE PyCharm PyCharm PyDev PyDev Spyder Spyder more... more WSGI WSGI ASGI ASGI Designer Guido van Rossum Guido van Rossum Software (list) Software Python Software Foundation Python Software Foundation Python Conference (PyCon) Python Conference v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category v v t t e e Python web frameworks Bottle CherryPy CherryPy CubicWeb CubicWeb Django Django FastAPI FastAPI Flask Flask Grok Grok Nevow Nevow Pylons Pylons Pyramid Pyramid Quixote Quixote TACTIC TACTIC Tornado Tornado TurboGears TurboGears TwistedWeb TwistedWeb web2py web2py Zope 2 Zope 2 more... more Comparison Comparison v v t t e e General Differentiable programming Differentiable programming Information geometry Information geometry Statistical manifold Statistical manifold Automatic differentiation Automatic differentiation Neuromorphic computing Neuromorphic computing Pattern recognition Pattern recognition Ricci calculus Ricci calculus Computational learning theory Computational learning theory Inductive bias Inductive bias IPU IPU TPU TPU VPU VPU Memristor Memristor SpiNNaker SpiNNaker TensorFlow TensorFlow PyTorch PyTorch Keras Keras scikit-learn scikit-learn Theano Theano JAX JAX Flux.jl Flux.jl MindSpore MindSpore Portals Computer programming Technology Computer programming Computer programming Technology Technology v v t t e e Free and open-source software Alternative terms for free software Alternative terms for free software Comparison of open-source and closed-source software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Comparison of source-code-hosting facilities Free software Free software Free software project directories Free software project directories Gratis versus libre Gratis versus libre Long-term support Long-term support Open-source software Open-source software Open-source software development Open-source software development Outline Outline Timeline Timeline Softwarepackages Audio Audio Bioinformatics Bioinformatics Codecs Codecs Configuration management Configuration management Drivers Graphics Wireless Drivers Graphics Graphics Wireless Wireless Health Health Mathematics Mathematics Office suites Office suites Operating systems Operating systems Routing Routing Television Television Video games Video games Web applications E-commerce Web applications E-commerce E-commerce Android apps Android apps iOS apps iOS apps Commercial Commercial Formerly proprietary Formerly proprietary Formerly open-source Formerly open-source Community Free software movement Free software movement History History Open-source-software movement Open-source-software movement Events Events Advocacy Advocacy Organisations Free Software Movement of India Free Software Movement of India Free Software Foundation Free Software Foundation Licenses AFL AFL Apache Apache APSL APSL Artistic Artistic Beerware Beerware BSD BSD Creative Commons Creative Commons CDDL CDDL EPL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL Free Software Foundation GNU GPL GNU GPL GNU AGPL GNU AGPL GNU LGPL GNU LGPL ISC ISC MIT MIT MPL MPL Python Python Python Software Foundation License Python Software Foundation License Shared Source Initiative Shared Source Initiative Sleepycat Sleepycat Unlicense Unlicense WTFPL WTFPL zlib zlib Comparison of licenses Comparison of licenses Contributor License Agreement Contributor License Agreement Copyleft Copyleft Debian Free Software Guidelines Debian Free Software Guidelines Definition of Free Cultural Works Definition of Free Cultural Works Free license Free license The Free Software Definition The Free Software Definition The Open Source Definition The Open Source Definition Open-source license Open-source license Permissive software license Permissive software license Public domain Public domain Digital rights management Digital rights management License proliferation License proliferation Mozilla software rebranding Mozilla software rebranding Proprietary device drivers Proprietary device drivers Proprietary firmware Proprietary firmware Proprietary software Proprietary software SCO/Linux controversies SCO/Linux controversies Software patents Software patents Software security Software security Tivoization Tivoization Trusted Computing Trusted Computing Forking Forking GNU Manifesto GNU Manifesto Microsoft Open Specification Promise Microsoft Open Specification Promise Open-core model Open-core model Open-source hardware Open-source hardware Shared Source Initiative Shared Source Initiative Source-available software Source-available software The Cathedral and the Bazaar The Cathedral and the Bazaar Revolution OS Revolution OS Portal Portal Category Category v v t t e e Statistical software Public domain Dataplot Dataplot Epi Info Epi Info CSPro CSPro X-12-ARIMA X-12-ARIMA Open-source ADMB ADMB DAP DAP gretl gretl jamovi jamovi JASP JASP JAGS JAGS JMulTi JMulTi Julia Julia Jupyter (Julia, Python, R) Jupyter GNU Octave GNU Octave OpenBUGS OpenBUGS Orange Orange PSPP PSPP Python (statsmodels, PyMC3, IPython, IDLE) Python PyMC3 IPython IDLE R (RStudio) R RStudio SageMath SageMath SimFiT SimFiT SOFA Statistics SOFA Statistics Stan Stan XLispStat XLispStat Freeware BV4.1 BV4.1 CumFreq CumFreq SegReg SegReg XploRe XploRe WinBUGS WinBUGS Commercial Cross-platform Data Desk Data Desk GAUSS GAUSS GraphPad InStat GraphPad InStat GraphPad Prism GraphPad Prism IBM SPSS Statistics SPSS IBM SPSS Modeler SPSS Modeler JMP JMP Maple Maple Mathcad Mathcad Mathematica Mathematica MATLAB MATLAB OxMetrics OxMetrics RATS RATS Revolution Analytics Revolution Analytics SAS SAS SmartPLS SmartPLS Stata Stata StatView StatView SUDAAN SUDAAN S-PLUS S-PLUS TSP TSP World Programming System (WPS) World Programming System Windows BMDP BMDP EViews EViews GenStat GenStat LIMDEP LIMDEP LISREL LISREL MedCalc MedCalc Microfit Microfit Minitab Minitab MLwiN MLwiN NCSS NCSS SHAZAM SHAZAM SigmaStat SigmaStat Statistica Statistica StatsDirect StatsDirect StatXact StatXact SYSTAT SYSTAT The Unscrambler The Unscrambler UNISTAT UNISTAT Excel Analyse-it Analyse-it UNISTAT for Excel UNISTAT XLfit XLfit RExcel RExcel Category Category Comparison Comparison v v t t e e Numerical-analysis software Advanced Simulation Library Advanced Simulation Library ADMB ADMB Chapel Chapel Euler Mathematical Toolbox Euler Mathematical Toolbox FreeFem++ FreeFem++ FreeMat FreeMat Genius Genius Gmsh Gmsh GNU Octave GNU Octave gretl gretl Julia Julia Jupyter (Julia, Python, R; IPython) Jupyter IPython MFEM MFEM OpenFOAM OpenFOAM Python Python R R SageMath SageMath Salome Salome ScicosLab ScicosLab Scilab Scilab X10 X10 Weka Weka Fortress Fortress DADiSP DADiSP FEATool Multiphysics FEATool Multiphysics GAUSS GAUSS LabVIEW LabVIEW Maple Maple Mathcad Mathcad Mathematica Mathematica MATLAB MATLAB Speakeasy Speakeasy VisSim VisSim Comparison Comparison Authority control databases FAST FAST FAST Germany Germany Germany United States United States United States France France France BnF data BnF data BnF data Czech Republic Czech Republic Czech Republic Czech Republic Israel Israel Israel IdRef IdRef IdRef https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&oldid=1266145019 Categories Python (programming language) Python (programming language) Class-based programming languages Class-based programming languages Notebook interface Notebook interface Computer science in the Netherlands Computer science in the Netherlands Concurrent programming languages Concurrent programming languages Cross-platform free software Cross-platform free software Cross-platform software Cross-platform software Dutch inventions Dutch inventions Dynamically typed programming languages Dynamically typed programming languages Educational programming languages Educational programming languages High-level programming languages High-level programming languages Information technology in the Netherlands Information technology in the Netherlands Multi-paradigm programming languages Multi-paradigm programming languages Object-oriented programming languages Object-oriented programming languages Pattern matching programming languages Pattern matching programming languages Programming languages Programming languages Programming languages created in 1991 Programming languages created in 1991 Scripting languages Scripting languages Text-oriented programming languages Text-oriented programming languages Articles with short description Articles with short description Short description matches Wikidata Short description matches Wikidata Use dmy dates from November 2021 Use dmy dates from November 2021 Use American English from December 2024 Use American English from December 2024 All Wikipedia articles written in American English All Wikipedia articles written in American English Articles containing potentially dated statements from October 2024 Articles containing potentially dated statements from October 2024 All articles containing potentially dated statements All articles containing potentially dated statements Articles containing potentially dated statements from March 2024 Articles containing potentially dated statements from March 2024 Articles containing potentially dated statements from December 2022 Articles containing potentially dated statements from December 2022 Articles containing potentially dated statements from 2020 Articles containing potentially dated statements from 2020 Articles containing potentially dated statements from 2008 Articles containing potentially dated statements from 2008 Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with hidden wikidata Pages using Sister project links with hidden wikidata Articles with example Python (programming language) code Articles with example Python (programming language) code This page was last edited on 30 December 2024, at 08:10 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/JavaScript": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History Toggle History subsection 1.1 Creation at Netscape 1.2 Adoption by Microsoft 1.3 The rise of JScript 1.4 Growth and standardization 1.5 Reaching maturity 1 History 1 History Toggle History subsection 1.1 Creation at Netscape 1.1 Creation at Netscape 1.1 Creation at Netscape 1.2 Adoption by Microsoft 1.2 Adoption by Microsoft 1.2 Adoption by Microsoft 1.3 The rise of JScript 1.3 The rise of JScript 1.3 The rise of JScript 1.4 Growth and standardization 1.4 Growth and standardization 1.4 Growth and standardization 1.5 Reaching maturity 1.5 Reaching maturity 1.5 Reaching maturity 2 Trademark 2 Trademark 2 Trademark 3 Website client-side usage Toggle Website client-side usage subsection 3.1 Examples of scripted behavior 3.2 Libraries and frameworks 3 Website client-side usage 3 Website client-side usage Toggle Website client-side usage subsection 3.1 Examples of scripted behavior 3.1 Examples of scripted behavior 3.1 Examples of scripted behavior 3.2 Libraries and frameworks 3.2 Libraries and frameworks 3.2 Libraries and frameworks 4 Other usage 4 Other usage 4 Other usage 5 Execution Toggle Execution subsection 5.1 JavaScript engine 5.2 Runtime system 5 Execution 5 Execution Toggle Execution subsection 5.1 JavaScript engine 5.1 JavaScript engine 5.1 JavaScript engine 5.2 Runtime system 5.2 Runtime system 5.2 Runtime system 6 Features Toggle Features subsection 6.1 Imperative and structured 6.2 Weakly typed 6.3 Dynamic 6.3.1 Typing 6.3.2 Run-time evaluation 6.4 Object-orientation (prototype-based) 6.4.1 Prototypes 6.4.2 Functions as object constructors 6.4.3 Functions as methods 6.5 Functional 6.5.1 Lexical closure 6.5.2 Anonymous function 6.6 Delegative 6.6.1 Functions as roles (Traits and Mixins) 6.6.2 Object composition and inheritance 6.7 Miscellaneous 6.7.1 Zero-based numbering 6.7.2 Variadic functions 6.7.3 Array and object literals 6.7.4 Regular expressions 6.7.5 Promises and Async/await 6.7.5.1 Promises 6.7.5.2 Async/await 6.8 Vendor-specific extensions 6 Features 6 Features Toggle Features subsection 6.1 Imperative and structured 6.1 Imperative and structured 6.1 Imperative and structured 6.2 Weakly typed 6.2 Weakly typed 6.2 Weakly typed 6.3 Dynamic 6.3.1 Typing 6.3.2 Run-time evaluation 6.3 Dynamic 6.3 Dynamic 6.3.1 Typing 6.3.1 Typing 6.3.1 Typing 6.3.2 Run-time evaluation 6.3.2 Run-time evaluation 6.3.2 Run-time evaluation 6.4 Object-orientation (prototype-based) 6.4.1 Prototypes 6.4.2 Functions as object constructors 6.4.3 Functions as methods 6.4 Object-orientation (prototype-based) 6.4 Object-orientation (prototype-based) 6.4.1 Prototypes 6.4.1 Prototypes 6.4.1 Prototypes 6.4.2 Functions as object constructors 6.4.2 Functions as object constructors 6.4.2 Functions as object constructors 6.4.3 Functions as methods 6.4.3 Functions as methods 6.4.3 Functions as methods 6.5 Functional 6.5.1 Lexical closure 6.5.2 Anonymous function 6.5 Functional 6.5 Functional 6.5.1 Lexical closure 6.5.1 Lexical closure 6.5.1 Lexical closure 6.5.2 Anonymous function 6.5.2 Anonymous function 6.5.2 Anonymous function 6.6 Delegative 6.6.1 Functions as roles (Traits and Mixins) 6.6.2 Object composition and inheritance 6.6 Delegative 6.6 Delegative 6.6.1 Functions as roles (Traits and Mixins) 6.6.1 Functions as roles (Traits and Mixins) 6.6.1 Functions as roles (Traits and Mixins) 6.6.2 Object composition and inheritance 6.6.2 Object composition and inheritance 6.6.2 Object composition and inheritance 6.7 Miscellaneous 6.7.1 Zero-based numbering 6.7.2 Variadic functions 6.7.3 Array and object literals 6.7.4 Regular expressions 6.7.5 Promises and Async/await 6.7.5.1 Promises 6.7.5.2 Async/await 6.7 Miscellaneous 6.7 Miscellaneous 6.7.1 Zero-based numbering 6.7.1 Zero-based numbering 6.7.1 Zero-based numbering 6.7.2 Variadic functions 6.7.2 Variadic functions 6.7.2 Variadic functions 6.7.3 Array and object literals 6.7.3 Array and object literals 6.7.3 Array and object literals 6.7.4 Regular expressions 6.7.4 Regular expressions 6.7.4 Regular expressions 6.7.5 Promises and Async/await 6.7.5.1 Promises 6.7.5.2 Async/await 6.7.5 Promises and Async/await 6.7.5 Promises and Async/await 6.7.5.1 Promises 6.7.5.1 Promises 6.7.5.1 Promises 6.7.5.2 Async/await 6.7.5.2 Async/await 6.7.5.2 Async/await 6.8 Vendor-specific extensions 6.8 Vendor-specific extensions 6.8 Vendor-specific extensions 7 Syntax Toggle Syntax subsection 7.1 Simple examples 7.2 More advanced example 7 Syntax 7 Syntax Toggle Syntax subsection 7.1 Simple examples 7.1 Simple examples 7.1 Simple examples 7.2 More advanced example 7.2 More advanced example 7.2 More advanced example 8 Security Toggle Security subsection 8.1 Cross-site scripting 8.2 Cross-site request forgery 8.3 Misplaced trust in the client 8.4 Misplaced trust in developers 8.5 Browser and plugin coding errors 8.6 Sandbox implementation errors 8.7 Hardware vulnerabilities 8 Security 8 Security Toggle Security subsection 8.1 Cross-site scripting 8.1 Cross-site scripting 8.1 Cross-site scripting 8.2 Cross-site request forgery 8.2 Cross-site request forgery 8.2 Cross-site request forgery 8.3 Misplaced trust in the client 8.3 Misplaced trust in the client 8.3 Misplaced trust in the client 8.4 Misplaced trust in developers 8.4 Misplaced trust in developers 8.4 Misplaced trust in developers 8.5 Browser and plugin coding errors 8.5 Browser and plugin coding errors 8.5 Browser and plugin coding errors 8.6 Sandbox implementation errors 8.6 Sandbox implementation errors 8.6 Sandbox implementation errors 8.7 Hardware vulnerabilities 8.7 Hardware vulnerabilities 8.7 Hardware vulnerabilities 9 Development tools 9 Development tools 9 Development tools 10 Related technologies Toggle Related technologies subsection 10.1 Java 10.2 JSON 10.3 Transpilers 10.4 WebAssembly 10 Related technologies 10 Related technologies Toggle Related technologies subsection 10.1 Java 10.1 Java 10.1 Java 10.2 JSON 10.2 JSON 10.2 JSON 10.3 Transpilers 10.3 Transpilers 10.3 Transpilers 10.4 WebAssembly 10.4 WebAssembly 10.4 WebAssembly 11 References 11 References 11 References 12 Sources 12 Sources 12 Sources 13 Further reading 13 Further reading 13 Further reading 14 External links 14 External links 14 External links Toggle the table of contents JavaScript JavaScript 109 languages Afrikaans Afrikaans Afrikaans \u00c6nglisc \u00c6nglisc \u00c6nglisc \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s Aragon\u00e9s Aragon\u00e9s Asturianu Asturianu Asturianu Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Brezhoneg Brezhoneg Brezhoneg Catal\u00e0 Catal\u00e0 Catal\u00e0 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Dansk Dansk Dansk Deutsch Deutsch Deutsch Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais Galego Galego Galego \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 Hausa Hausa Hausa \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Hrvatski Hrvatski Ido Ido Ido Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia Interlingua Interlingua Interlingua \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea Jawa Jawa Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 Kiswahili Kiswahili Kiswahili Kurd\u00ee Kurd\u00ee Kurd\u00ee \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 Latina Latina Latina Latvie\u0161u Latvie\u0161u Latvie\u0161u Lietuvi\u0173 Lietuvi\u0173 Lietuvi\u0173 Lingua Franca Nova Lingua Franca Nova Lingua Franca Nova Lombard Lombard Lombard Magyar Magyar Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 \u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06cc \u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06cc \u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06cc Bahasa Melayu Bahasa Melayu Bahasa Melayu \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Nederlands Nederlands Nederlands \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Nordfriisk Nordfriisk Nordfriisk Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a Pinayuanan Pinayuanan Pinayuanan Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 Runa Simi Runa Simi Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 Scots Scots Scots Shqip Shqip Shqip \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd Simple English Simple English Simple English Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Soomaaliga Soomaaliga Soomaaliga \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Sunda Sunda Sunda Suomi Suomi Suomi Svenska Svenska Svenska Tagalog Tagalog Tagalog \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd Taqbaylit Taqbaylit Taqbaylit \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 Tetun Tetun Tetun \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrkmen\u00e7e T\u00fcrkmen\u00e7e T\u00fcrkmen\u00e7e Basa Ugi Basa Ugi Basa Ugi \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 V\u00e8neto V\u00e8neto V\u00e8neto Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t \u6587\u8a00 \u6587\u8a00 \u6587\u8a00 \u5434\u8bed \u5434\u8bed \u5434\u8bed \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read View source View source View source View history View history View history Tools Read Read Read View source View source View source View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons MediaWiki MediaWiki MediaWiki Wikibooks Wikibooks Wikibooks Wikifunctions Wikifunctions Wikifunctions Wikiversity Wikiversity Wikiversity Wikidata item Wikidata item Wikidata item Page version status This is an accepted version of this page latest accepted revision reviewed Java (programming language) Javanese script ECMAScript Paradigm Multi-paradigm event-driven functional imperative procedural object-oriented Designed by Brendan Eich Netscape ECMAScript ; 29 years ago (1995-12-04) 1995-12-04 [1] [ ] Stable release [2] [ ] ; 7 months ago (June 2024) June 2024 Preview release [3] [ ] ; 9 months ago (27 March 2024) 27 March 2024 Typing discipline Dynamic weak duck Memory management Garbage collection Filename extensions .js .cjs .mjs[4] [4] [ ] ecma-international.org/publications-and-standards/standards/ecma-262/ ecma-international.org/publications-and-standards/standards/ecma-262/ implementations V8 JavaScriptCore SpiderMonkey Chakra Java [5] [ ] [6] [ ] Scheme [6] [ ] Self [7] [ ] AWK [8] [ ] HyperTalk [9] [ ] ActionScript ArkTS AssemblyScript CoffeeScript Dart Haxe JS++ Opa TypeScript JavaScript at Wikibooks JavaScript JavaScript (/\u02c8d\u0292\u0251\u02d0v\u0259skr\u026apt/), often abbreviated as JS, is a programming language and core technology of the Web, alongside HTML and CSS. 99% of websites use JavaScript on the client side for webpage behavior.[10] /\u02c8d\u0292\u0251\u02d0v\u0259skr\u026apt/ /\u02c8d\u0292\u0251\u02d0v\u0259skr\u026apt/ /\u02c8d\u0292\u0251\u02d0v\u0259skr\u026apt/ \u02c8d\u0292\u0251\u02d0v\u0259skr\u026apt \u02c8 d\u0292 \u0251\u02d0 v \u0259 s k r \u026a p t programming language the Web HTML CSS websites client webpage [10] [ ] Web browsers have a dedicated JavaScript engine that executes the client code. These engines are also utilized in some servers and a variety of apps. The most popular runtime system for non-browser usage is Node.js. Web browsers JavaScript engine code servers apps runtime system Node.js JavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard.[11] It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM). high-level just-in-time compiled ECMAScript [11] [ ] dynamic typing prototype-based object-orientation first-class functions multi-paradigm event-driven functional imperative programming styles application programming interfaces regular expressions data structures Document Object Model The ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O. input/output networking storage graphics Although Java and JavaScript are similar in name and syntax, the two languages are distinct and differ greatly in design. Java syntax History Creation at Netscape The first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the early World Wide Web.[12] The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.[13] web browser graphical user interface Mosaic World Wide Web [12] [ ] Netscape Netscape Navigator [13] [ ] During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a programming language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java language, while also hiring Brendan Eich to embed the Scheme language.[6] web pages programming language Sun Microsystems Java Brendan Eich Scheme [6] [ ] The goal was a \"language for the masses\",[14] \"to help nonprogrammers create dynamic, interactive Web sites\".[15] Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages.[5][6] Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December.[6][1][16][17] [14] [ ] Web sites [15] [ ] scripting languages [5] [ ] [6] [ ] interpreter beta [6] [ ] [1] [ ] [16] [ ] [17] [ ] The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was a popular new language, so Eich considered the JavaScript name a marketing ploy by Netscape.[14] dot-com boom [14] [ ] Adoption by Microsoft Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft created its own interpreter called JScript.[18] Microsoft Internet Explorer browser war interpreter JScript [18] [ ] Microsoft first released JScript in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Netscape Navigator.[19][20] These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos for several years.[19][21] CSS HTML implementations Netscape Navigator [19] [ ] [20] [ ] [19] [ ] [21] [ ] The rise of JScript Brendan Eich later said of this period: \"It's still kind of a sidekick language. It's considered slow or annoying. People do pop-ups or those scrolling messages in the old status bar at the bottom of your old browser.\"[14] Brendan Eich sidekick pop-ups status bar browser [14] [ ] In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997. Netscape Ecma International ECMAScript The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.[18] [18] [ ] However, the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%.[22] This meant that JScript became the de facto standard for client-side scripting on the Web. Microsoft Internet Explorer [22] [ ] JScript client-side scripting Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed. Growth and standardization During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer.[23] Internet Explorer Mozilla Firefox [23] [ ] In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition. ECMAScript for XML Macromedia Adobe Systems Tamarin open source Microsoft Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools. Jesse James Garrett Ajax web applications jQuery Prototype Dojo Toolkit MooTools Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition.[24][25] The key innovation was just-in-time compilation (JIT),[26] so other browser vendors needed to overhaul their engines for JIT.[27] Google Chrome V8 [24] [ ] [25] [ ] just-in-time compilation [26] [ ] [27] [ ] In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009. Oslo Reaching maturity Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015.[28] ECMAScript 6 [28] [ ] The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system.[29][30] As of 2018, Node had been used by millions of developers,[31] and npm had the most modules of any package manager in the world.[32] Node.js Ryan Dahl V8 event loop I/O APIs [29] [ ] [30] [ ] [31] [ ] npm package manager [32] [ ] The ECMAScript draft specification is currently maintained openly on GitHub,[33] and editions are produced via regular annual snapshots.[33] Potential revisions to the language are vetted through a comprehensive proposal process.[34][35] Now, instead of edition numbers, developers check the status of upcoming features individually.[33] GitHub [33] [ ] [33] [ ] [34] [ ] [35] [ ] [33] [ ] The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers.[17] Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.[36] libraries frameworks [17] [ ] single-page applications transpilers [36] [ ] Trademark \"JavaScript\" is a trademark of Oracle Corporation in the United States.[37][38] The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009.[39] trademark Oracle Corporation [37] [ ] [38] [ ] Sun Microsystems [39] [ ] A letter was circulated in September 2024, spearheaded by Ryan Dahl, calling on Oracle to free the JavaScript trademark.[40] Brendan Eich the original creator of JavaScript, was among the over 14,000 signatories who supported the initiative. Ryan Dahl [40] [ ] Brendan Eich Website client-side usage JavaScript is the dominant client-side scripting language of the Web, with 99% of all websites using it for this purpose.[10] Scripts are embedded in or included from HTML documents and interact with the DOM. client-side scripting language websites [10] [ ] HTML DOM All major web browsers have a built-in JavaScript engine that executes the code on the user's device. web browsers JavaScript engine code Examples of scripted behavior Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page. web page Ajax WebSocket users social media Web page animations, such as fading objects in and out, resizing, and moving them. Playing browser games. browser games Controlling the playback of streaming media. playback streaming media Generating pop-up ads or alert boxes. pop-up ads Validating input values of a web form before the data is sent to a web server. Validating web form web server Logging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization. analytics ad tracking personalization Redirecting a user to another page. Storing and retrieving data on the user's device, via the storage or IndexedDB standards. storage IndexedDB Libraries and frameworks Over 80% of websites use a third-party JavaScript library or web framework as part of their client-side scripting.[41] library web framework [41] [ ] jQuery is by far the most-used.[41] Other notable ones include Angular, Bootstrap, Lodash, Modernizr, React, Underscore, and Vue.[41] Multiple options can be used in conjunction, such as jQuery and Bootstrap.[42] jQuery [41] [ ] Angular Bootstrap Lodash Modernizr React Underscore Vue [41] [ ] [42] [ ] However, the term \"Vanilla JS\" was coined for websites not using any libraries or frameworks at all, instead relying entirely on standard JavaScript functionality.[43] [43] [ ] Other usage The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications. web browser JavaScript engines server-side applications Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services,[44][45] but they were small niches.[46] Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches.[46] Netscape Enterprise Server Microsoft Internet Information Services [44] [ ] [45] [ ] [46] [ ] Node.js other approaches [46] [ ] Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents[47] and GNOME Shell extensions written in JavaScript.[48] Electron Cordova React Native application frameworks Adobe Acrobat PDF [47] [ ] GNOME Shell [48] [ ] JavaScript has been used in some embedded systems, usually by leveraging Node.js.[49][50][51] embedded systems [49] [ ] [50] [ ] [51] [ ] Execution JavaScript engine JavaScript engine [edit] [ edit ] A JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance.[52] JavaScript engine software component code engines interpreters just-in-time compilation [52] [ ] JavaScript engines are typically developed by web browser vendors, and every major browser has one. In a browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model and Web IDL bindings.[53] However, the use of JavaScript engines is not limited to browsers; for example, the V8 engine is a core component of the Node.js runtime system.[54] web browser rendering engine Document Object Model Web IDL [53] [ ] V8 engine Node.js runtime system [54] [ ] ECMAScript implementations WebAssembly sandbox [55] [ ] [54] [ ] Runtime system A JavaScript engine must be embedded within a runtime system (such as a web browser or a standalone system) to enable scripts to interact with the broader environment. The runtime system includes the necessary APIs for input/output operations, such as networking, storage, and graphics, and provides the ability to import scripts. runtime system web browser input/output networking storage graphics JavaScript is a single-threaded language. The runtime processes messages from a queue one at a time, and it calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program I/O is performed using events and callback functions. This means, for example, that JavaScript can process a mouse click while waiting for a database query to return information.[56] threaded messages queue function call stack arguments local variables event loop concurrency model non-blocking events callback functions [56] [ ] The notable standalone runtimes are Node.js, Deno, and Bun. Node.js Deno Bun Features The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise. Imperative and structured Structured programming JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.[57] structured programming C scoping function scoping block scoping const expressions statements automatic semicolon insertion [57] [ ] Weakly typed Weakly typed JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used.[58] weakly typed [58] [ ] The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator The binary - operator always casts both operands to a number Both unary operators (+, -) always cast the operand to a number. However, + always casts to Number (binary64) while - preserves BigInt (integer)[59] binary64 integer [59] [ ] Values are cast to strings like the following:[58] [58] [ ] Strings are left as-is Numbers are converted to their string representation Arrays have their elements cast to strings after which they are joined by commas (,) Other objects are converted to the string [object Object] where Object is the name of the constructor of the object Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively. prototype JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency.[60][58] For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction. [60] [ ] [58] [ ] NaN Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If the expression is wrapped in parentheses - ({} + []) \u2013 the curly brackets are interpreted as an empty object and the result of the expression is \"[object Object]\" as expected.[58] [58] [ ] Dynamic Dynamic Programming Typing Dynamic typing JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string.[61] JavaScript supports various ways to test the type of objects, including duck typing.[62] dynamically typed scripting languages type value variable string [61] [ ] duck typing [62] [ ] Run-time evaluation eval JavaScript includes an eval function that can execute statements provided as strings at run-time. eval Object-orientation (prototype-based) Prototypal inheritance in JavaScript is described by Douglas Crockford as: Douglas Crockford You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that?[63] [63] [ ] In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj['x'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop. object associative array property properties Prototypes Prototype-based programming JavaScript uses prototypes where many other object-oriented languages use classes for inheritance.[64] It is possible to simulate many class-based features with prototypes in JavaScript.[65] prototypes classes inheritance [64] [ ] [65] [ ] Functions as object constructors Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype).[66] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null).[67] The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.[68] [66] [ ] [67] [ ] [68] [ ] Functions as methods Method (computer science) Unlike in many object-oriented languages, in JavaScript there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling. When a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation. method Functional Functional programming JavaScript functions are first-class; a function is considered to be an object.[69] As such, a function may have properties and methods, such as .call() and .bind().[70] functions first-class [69] [ ] [70] [ ] Lexical closure Closure (computer programming) A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.[71] lexical closure lexical scope [71] [ ] Anonymous function Anonymous function JavaScript also supports anonymous functions. anonymous functions Delegative Delegation (object-oriented programming) JavaScript supports implicit and explicit delegation. delegation Functions as roles (Traits and Mixins) Role-oriented programming Traits (computer science) Mixin JavaScript natively supports various function-based implementations of Role[72] patterns like Traits[73][74] and Mixins.[75] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain. Role [72] [ ] Traits [73] [ ] [74] [ ] Mixins [75] [ ] Object composition and inheritance Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions. composition inheritance Miscellaneous Zero-based numbering JavaScript is a zero-index language. zero-index Variadic functions Variadic function An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method. formal parameters Variadic functions bind Array and object literals Associative arrays Object literal Like in many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format. associative arrays literals JSON Regular expressions Regular expression In a manner similar to Perl, JavaScript also supports regular expressions, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[76] Perl regular expressions [76] [ ] Promises and Async/await JavaScript supports promises and Async/await for handling asynchronous operations.[citation needed] promises Async/await citation needed citation needed Promises Futures and promises A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. Recently, the JavaScript specification introduced combinator methods, which allow developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any. Async/await Async/await Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similarly to traditional synchronous, blocking code. Vendor-specific extensions Historically, some JavaScript engines supported these non-standard features: JavaScript engines conditional catch clauses (like Java) array comprehensions and generator expressions (like Python) array comprehensions concise function expressions (function(args) expr; this experimental syntax predated arrow functions) ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[77]) ECMAScript for XML [77] [ ] Syntax JavaScript syntax Simple examples Variables in JavaScript can be defined using either the var,[78] let[79] or const[80] keywords. Variables defined without keywords will be defined at the global scope. Variables [78] [ ] [79] [ ] [80] [ ] // Declares a function-scoped variable named `x`, and implicitly assigns the // special value `undefined` to it. Variables without value are automatically // set to undefined. // var is generally considered bad practice and let and const are usually preferred. var x ; // Variables can be manually set to `undefined` like so let x2 = undefined ; // Declares a block-scoped variable named `y`, and implicitly sets it to // `undefined`. The `let` keyword was introduced in ECMAScript 2015. let y ; // Declares a block-scoped, un-reassignable variable named `z`, and sets it to // a string literal. The `const` keyword was also introduced in ECMAScript 2015, // and must be explicitly assigned to. // The keyword `const` means constant, hence the variable cannot be reassigned // as the value is `constant`. const z = \"this value cannot be reassigned!\" ; // Declares a global-scoped variable and assigns 3. This is generally considered // bad practice, and will not work if strict mode is on. t = 3 ; // Declares a variable named `myNumber`, and assigns a number literal (the value // `2`) to it. let myNumber = 2 ; // Reassigns `myNumber`, setting it to a string literal (the value `\"foo\"`). // JavaScript is a dynamically-typed language, so this is legal. myNumber = \"foo\" ; Note the comments in the examples above, all of which were preceded with two forward slashes. comments forward slashes There is no built-in Input/output functionality in JavaScript, instead it is provided by the run-time environment. The ECMAScript specification in edition 5.1 mentions that \"there are no provisions in this specification for input of external data or output of computed results\".[81] However, most runtime environments have a console object that can be used to print output.[82] Here is a minimalist \"Hello, World!\" program in JavaScript in a runtime environment with a console object: Input/output [81] [ ] [82] [ ] \"Hello, World!\" program console . log ( \"Hello, World!\" ); In HTML documents, a program like this is required for an output: // Text nodes can be made using the \"write\" method. // This is frowned upon, as it can overwrite the document if the document is fully loaded. document . write ( 'foo' ); // Elements can be made too. First, they have to be created in the DOM. const myElem = document . createElement ( 'span' ); // Attributes like classes and the id can be set as well myElem . classList . add ( 'foo' ); myElem . id = 'bar' ; // After setting this, the tag will look like this: `<span class=\"foo\" id=\"bar\" data-attr=\"baz\"></span>` myElem . setAttribute ( 'data-attr' , 'baz' ); // Which could also be written as `myElem.dataset.attr = 'baz'` // Finally append it as a child element to the <body> in the HTML document . body . appendChild ( myElem ); // Elements can be imperatively grabbed with querySelector for one element, or querySelectorAll for multiple elements that can be looped with forEach document . querySelector ( '.class' ); // Selects the first element with the \"class\" class document . querySelector ( '#id' ); // Selects the first element with an `id` of \"id\" document . querySelector ( '[data-other]' ); // Selects the first element with the \"data-other\" attribute document . querySelectorAll ( '.multiple' ); // Returns an Array-like NodeList of all elements with the \"multiple\" class A simple recursive function to calculate the factorial of a natural number: recursive factorial natural number function factorial ( n ) { // Checking the argument for legitimacy. Factorial is defined for positive integers. if ( isNaN ( n )) { console . error ( \"Non-numerical argument not allowed.\" ); return NaN ; // The special value: Not a Number } if ( n === 0 ) return 1 ; // 0! = 1 if ( n < 0 ) return undefined ; // Factorial of negative numbers is not defined. if ( n % 1 ) { console . warn ( ` ${ n } will be rounded to the closest integer. For non-integers consider using gamma function instead.` ); n = Math . round ( n ); } // The above checks need not be repeated in the recursion, hence defining the actual recursive part separately below. // The following line is a function expression to recursively compute the factorial. It uses the arrow syntax introduced in ES6. const recursivelyCompute = a => a > 1 ? a * recursivelyCompute ( a - 1 ) : 1 ; // Note the use of the ternary operator `?`. return recursivelyCompute ( n ); } factorial ( 3 ); // Returns 6 An anonymous function (or lambda): anonymous function const counter = function () { let count = 0 ; return function () { return ++ count ; } }; const x = counter (); x (); // Returns 1 x (); // Returns 2 x (); // Returns 3 This example shows that, in JavaScript, function closures capture their non-local variables by reference. function closures Arrow functions were first introduced in 6th Edition \u2013 ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately. 6th Edition \u2013 ECMAScript 2015 Example of arrow function: // Arrow functions let us omit the `function` keyword. // Here `long_example` points to an anonymous function value. const long_example = ( input1 , input2 ) => { console . log ( \"Hello, World!\" ); const output = input1 + input2 ; return output ; }; // If there are no braces, the arrow function simply returns the expression // So here it's (input1 + input2) const short_example = ( input1 , input2 ) => input1 + input2 ; long_example ( 2 , 3 ); // Prints \"Hello, World!\" and returns 5 short_example ( 2 , 5 ); // Returns 7 // If an arrow function has only one parameter, the parentheses can be removed. const no_parentheses = input => input + 2 ; no_parentheses ( 3 ); // Returns 5 // An arrow function, like other function definitions, can be executed in the same statement as they are created. // This is useful when writing libraries to avoid filling the global scope, and for closures. let three = (( a , b ) => a + b ) ( 1 , 2 ); const generate_multiplier_function = a => ( b => isNaN ( b ) || ! b ? a : a *= b ); const five_multiples = generate_multiplier_function ( 5 ); // The supplied argument \"seeds\" the expression and is retained by a. five_multiples ( 1 ); // Returns 5 five_multiples ( 3 ); // Returns 15 five_multiples ( 4 ); // Returns 60 In JavaScript, objects can be created as instances of a class. objects instances class Object class example: class Ball { constructor ( radius ) { this . radius = radius ; this . area = Math . PI * ( radius ** 2 ); } // Classes (and thus objects) can contain functions known as methods show () { console . log ( this . radius ); } }; const myBall = new Ball ( 5 ); // Creates a new instance of the ball object with radius 5 myBall . radius ++ ; // Object properties can usually be modified from the outside myBall . show (); // Using the inherited \"show\" function logs \"6\" In JavaScript, objects can be instantiated directly from a function. objects Object functional example: function Ball ( radius ) { const area = Math . PI * ( radius ** 2 ); const obj = { radius , area }; // Objects are mutable, and functions can be added as properties. obj . show = () => console . log ( obj . radius ); return obj ; }; const myBall = Ball ( 5 ); // Creates a new ball object with radius 5. No \"new\" keyword needed. myBall . radius ++ ; // The instance property can be modified. myBall . show (); // Using the \"show\" function logs \"6\" - the new instance value. Variadic function demonstration (arguments is a special variable):[83] Variadic function variable [83] [ ] function sum () { let x = 0 ; for ( let i = 0 ; i < arguments . length ; ++ i ) x += arguments [ i ]; return x ; } sum ( 1 , 2 ); // Returns 3 sum ( 1 , 2 , 3 ); // Returns 6 // As of ES6, using the rest operator. function sum (... args ) { return args . reduce (( a , b ) => a + b ); } sum ( 1 , 2 ); // Returns 3 sum ( 1 , 2 , 3 ); // Returns 6 Immediately-invoked function expressions are often used to create closures. Closures allow gathering properties and methods in a namespace and making some of them private: Immediately-invoked function expressions let counter = ( function () { let i = 0 ; // Private property return { // Public methods get : function () { alert ( i ); }, set : function ( value ) { i = value ; }, increment : function () { alert ( ++ i ); } }; })(); // Module counter . get (); // Returns 0 counter . set ( 6 ); counter . increment (); // Returns 7 counter . increment (); // Returns 8 Generator objects (in the form of generator functions) provide a function which can be called, exited, and re-entered while maintaining internal context (statefulness).[84] Generator [84] [ ] function * rawCounter () { yield 1 ; yield 2 ; } function * dynamicCounter () { let count = 0 ; while ( true ) { // It is not recommended to utilize while true loops in most cases. yield ++ count ; } } // Instances const counter1 = rawCounter (); const counter2 = dynamicCounter (); // Implementation counter1 . next (); // {value: 1, done: false} counter1 . next (); // {value: 2, done: false} counter1 . next (); // {value: undefined, done: true} counter2 . next (); // {value: 1, done: false} counter2 . next (); // {value: 2, done: false} counter2 . next (); // {value: 3, done: false} // ...infinitely JavaScript can export and import from modules:[85] [85] [ ] Export example: /* mymodule.js */ // This function remains private, as it is not exported let sum = ( a , b ) => { return a + b ; } // Export variables export let name = 'Alice' ; export let age = 23 ; // Export named functions export function add ( num1 , num2 ) { return num1 + num2 ; } // Export class export class Multiplication { constructor ( num1 , num2 ) { this . num1 = num1 ; this . num2 = num2 ; } add () { return sum ( this . num1 , this . num2 ); } } Import example: // Import one property import { add } from './mymodule.js' ; console . log ( add ( 1 , 2 )); //> 3 // Import multiple properties import { name , age } from './mymodule.js' ; console . log ( name , age ); //> \"Alice\", 23 // Import all properties from a module import * from './module.js' console . log ( name , age ); //> \"Alice\", 23 console . log ( add ( 1 , 2 )); //> 3 More advanced example This sample code displays various JavaScript features. /* Finds the lowest common multiple (LCM) of two numbers */ function LCMCalculator ( x , y ) { // constructor function if ( isNaN ( x * y )) throw new TypeError ( \"Non-numeric arguments not allowed.\" ); const checkInt = function ( x ) { // inner function if ( x % 1 !== 0 ) throw new TypeError ( x + \"is not an integer\" ); return x ; }; this . a = checkInt ( x ) // semicolons ^^^^ are optional, a newline is enough this . b = checkInt ( y ); } // The prototype of object instances created by a constructor is // that constructor's \"prototype\" property. LCMCalculator . prototype = { // object literal constructor : LCMCalculator , // when reassigning a prototype, set the constructor property appropriately gcd : function () { // method that calculates the greatest common divisor // Euclidean algorithm: let a = Math . abs ( this . a ), b = Math . abs ( this . b ), t ; if ( a < b ) { // swap variables // t = b; b = a; a = t; [ a , b ] = [ b , a ]; // swap using destructuring assignment (ES6) } while ( b !== 0 ) { t = b ; b = a % b ; a = t ; } // Only need to calculate GCD once, so \"redefine\" this method. // (Actually not redefinition\u2014it's defined on the instance itself, // so that this.gcd refers to this \"redefinition\" instead of LCMCalculator.prototype.gcd. // Note that this leads to a wrong result if the LCMCalculator object members \"a\" or \"b\" are altered afterwards.) // Also, 'gcd' === \"gcd\", this['gcd'] === this.gcd this [ 'gcd' ] = function () { return a ; }; return a ; }, // Object property names can be specified by strings delimited by double (\") or single (') quotes. \"lcm\" : function () { // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|. // not using |this.a*this.b| to avoid FP precision issues let lcm = this . a / this . gcd () * this . b ; // Only need to calculate lcm once, so \"redefine\" this method. this . lcm = function () { return lcm ; }; return lcm ; }, // Methods can also be declared using ES6 syntax toString () { // Using both ES6 template literals and the (+) operator to concatenate values return `LCMCalculator: a = ${ this . a } , b = ` + this . b ; } }; // Define generic output function; this implementation only works for Web browsers function output ( x ) { document . body . appendChild ( document . createTextNode ( x )); document . body . appendChild ( document . createElement ( 'br' )); } // Note: Array's map() and forEach() are defined in JavaScript 1.6. // They are used here to demonstrate JavaScript's inherent functional nature. [ [ 25 , 55 ], [ 21 , 56 ], [ 22 , 58 ], [ 28 , 56 ] ]. map ( function ( pair ) { // array literal + mapping function return new LCMCalculator ( pair [ 0 ], pair [ 1 ]); }). sort (( a , b ) => a . lcm () - b . lcm ()) // sort with this comparative function; => is a shorthand form of a function, called \"arrow function\" . forEach ( printResult ); function printResult ( obj ) { output ( obj + \", gcd = \" + obj . gcd () + \", lcm = \" + obj . lcm ()); } The following output should be displayed in the browser window. LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56 LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168 LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275 LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638 Security Browser security JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox. DOM sandbox same-origin policy There are subsets of general JavaScript\u2014ADsafe, Secure ECMAScript (SES)\u2014that provide greater levels of security, especially on code created by third parties (such as advertisements).[86][87] Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML.[88] [86] [ ] [87] [ ] [88] [ ] Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page. Content Security Policy Cross-site scripting Cross-site scripting A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. One important solution to XSS vulnerabilities is HTML sanitization. cross-site scripting same-origin policy HTML sanitization Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS. XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[89] [89] [ ] Cross-site request forgery Cross-site request forgery Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help. cross-site request forgery \"JavaScript hijacking\" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include: JSON requiring an authentication token in the POST and GET parameters for any response that returns private information. POST GET Misplaced trust in the client Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are: Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered. obfuscated JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client. Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.[90] [90] [ ] It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.[91] [91] [ ] Prototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object's prototype. Prototype pollution Misplaced trust in developers Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability.[92] \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\"[92] Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Ko\u00e7ulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.[93][94] npm [92] [ ] [92] [ ] [93] [ ] [94] [ ] Browser and plugin coding errors Buffer overflow JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges. buffer overflows API These flaws have affected major browsers including Firefox,[95] Internet Explorer,[96] and Safari.[97] [95] [ ] [96] [ ] [97] [ ] Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[98][99] Adobe Flash ActiveX [98] [ ] [99] [ ] In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[100] Google Chrome similarly confines its page renderers to their own \"sandbox\". [100] [ ] Google Chrome sandbox Sandbox implementation errors Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web. Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer[101] and Firefox.[102] In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.[103] [101] [ ] [102] [ ] [103] [ ] Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[104][failed verification] Microsoft Windows Windows Script Host VBScript Trojan horse [104] [ ] failed verification failed verification Hardware vulnerabilities In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers.[105][106][107][108] rowhammer [105] [ ] [106] [ ] [107] [ ] [108] [ ] In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It is called \"ASLR\u2295Cache\" or AnC.[109][110] ASLR [109] [ ] [110] [ ] In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.[111] Spectre [111] [ ] Development tools Important tools have evolved with the language. Every major web browser has built-in web development tools, including a JavaScript debugger. web development tools debugger Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines. Static program analysis ESLint JSLint Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.[112][113] profilers [112] [ ] [113] [ ] Many text editors have syntax highlighting support for JavaScript code. text editors Related technologies Java A common misconception is that JavaScript is directly related to Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed, and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0.[114] Java sandboxed Math Date [114] [ ] Both languages first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications. James Gosling Brendan Eich The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme. static typing dynamic compiled class-based prototype-based Scheme JSON JSON is a data format derived from JavaScript; hence the name JavaScript Object Notation. It is a widely used format supported by many other programming languages. JSON Transpilers Many websites are JavaScript-heavy, so transpilers have been created to convert code written in other languages, which can aid the development process.[36] transpilers [36] [ ] TypeScript and CoffeeScript are two notable languages that transpile to JavaScript. TypeScript CoffeeScript WebAssembly WebAssembly is a newer language with a bytecode format designed to complement JavaScript, especially the performance-critical portions of web page scripts. All of the major JavaScript engines support WebAssembly,[115] which runs in the same sandbox as regular JavaScript code. WebAssembly bytecode web page JavaScript engines [115] [ ] sandbox asm.js is a subset of JavaScript that served as the forerunner of WebAssembly.[116] asm.js [116] [ ] References ^ a b \"Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet\" (Press release). 4 December 1995. Archived from the original on 16 September 2007. ^ a b a b \"Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet\" (Press release). 4 December 1995. Archived from the original on 16 September 2007. \"Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet\" the original ^ \"ECMAScript\u00ae 2024 Language Specification\". June 2024. Retrieved 30 August 2024. ^ ^ \"ECMAScript\u00ae 2024 Language Specification\". June 2024. Retrieved 30 August 2024. \"ECMAScript\u00ae 2024 Language Specification\" . Retrieved 30 August 2024 30 August ^ \"ECMAScript\u00ae 2025 Language Specification\". 27 March 2024. Retrieved 17 April 2024. ^ ^ \"ECMAScript\u00ae 2025 Language Specification\". 27 March 2024. Retrieved 17 April 2024. \"ECMAScript\u00ae 2025 Language Specification\" . Retrieved 17 April 2024 17 April ^ \"nodejs/node-eps\". GitHub. Archived from the original on 29 August 2020. Retrieved 5 July 2018. ^ ^ \"nodejs/node-eps\". GitHub. Archived from the original on 29 August 2020. Retrieved 5 July 2018. \"nodejs/node-eps\" Archived . Retrieved 5 July 2018 5 July ^ a b Seibel, Peter (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. ISBN 978-1-4302-1948-4. Archived from the original on 24 December 2020. Retrieved 25 December 2018. Eich: The immediate concern at Netscape was it must look like Java. ^ a b a b Seibel, Peter (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. ISBN 978-1-4302-1948-4. Archived from the original on 24 December 2020. Retrieved 25 December 2018. Eich: The immediate concern at Netscape was it must look like Java. Coders at Work: Reflections on the Craft of Programming ISBN 978-1-4302-1948-4 Archived . Retrieved 25 December 2018 25 December ^ a b c d e \"Chapter 4. How JavaScript Was Created\". speakingjs.com. Archived from the original on 27 February 2020. Retrieved 21 November 2017. ^ a b c d e a b c d e \"Chapter 4. How JavaScript Was Created\". speakingjs.com. Archived from the original on 27 February 2020. Retrieved 21 November 2017. \"Chapter 4. How JavaScript Was Created\" Archived . Retrieved 21 November 2017 21 November ^ \"Popularity \u2013 Brendan Eich\". ^ ^ \"Popularity \u2013 Brendan Eich\". \"Popularity \u2013 Brendan Eich\" ^ \"Brendan Eich: An Introduction to JavaScript, JSConf 2010\". YouTube. 20 January 2013. p. 22m. Archived from the original on 29 August 2020. Retrieved 25 November 2019. Eich: \"function\", eight letters, I was influenced by AWK. ^ ^ \"Brendan Eich: An Introduction to JavaScript, JSConf 2010\". YouTube. 20 January 2013. p. 22m. Archived from the original on 29 August 2020. Retrieved 25 November 2019. Eich: \"function\", eight letters, I was influenced by AWK. \"Brendan Eich: An Introduction to JavaScript, JSConf 2010\" YouTube Archived . Retrieved 25 November 2019 25 November ^ Eich, Brendan (1998). \"Foreword\". In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M. ^ ^ Eich, Brendan (1998). \"Foreword\". In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M. Eich, Brendan Goodman, Danny JavaScript Bible JavaScript Bible John Wiley & Sons ISBN 0-7645-3188-3 LCCN 97078208 OCLC 38888873 OL 712205M ^ a b \"Usage Statistics of JavaScript as Client-side Programming Language on Websites\". W3Techs. Retrieved 27 February 2024. ^ a b a b \"Usage Statistics of JavaScript as Client-side Programming Language on Websites\". W3Techs. Retrieved 27 February 2024. \"Usage Statistics of JavaScript as Client-side Programming Language on Websites\" . Retrieved 27 February 2024 27 February ^ \"ECMAScript 2020 Language Specification\". Archived from the original on 8 May 2020. Retrieved 8 May 2020. ^ ^ \"ECMAScript 2020 Language Specification\". Archived from the original on 8 May 2020. Retrieved 8 May 2020. \"ECMAScript 2020 Language Specification\" Archived . Retrieved 8 May 2020 8 May ^ \"Bloomberg Game Changers: Marc Andreessen\". Bloomberg. Bloomberg. 17 March 2011. Archived from the original on 16 May 2012. Retrieved 7 December 2011. ^ ^ \"Bloomberg Game Changers: Marc Andreessen\". Bloomberg. Bloomberg. 17 March 2011. Archived from the original on 16 May 2012. Retrieved 7 December 2011. \"Bloomberg Game Changers: Marc Andreessen\" Bloomberg Archived . Retrieved 7 December 2011 7 December ^ Enzer, Larry (31 August 2018). \"The Evolution of the Web Browsers\". Monmouth Web Developers. Archived from the original on 31 August 2018. Retrieved 31 August 2018. ^ ^ Enzer, Larry (31 August 2018). \"The Evolution of the Web Browsers\". Monmouth Web Developers. Archived from the original on 31 August 2018. Retrieved 31 August 2018. \"The Evolution of the Web Browsers\" the original . Retrieved 31 August 2018 31 August ^ a b c Fin JS (17 June 2016), \"Brendan Eich \u2013 CEO of Brave\", YouTube, retrieved 7 February 2018 ^ a b c a b c Fin JS (17 June 2016), \"Brendan Eich \u2013 CEO of Brave\", YouTube, retrieved 7 February 2018 \"Brendan Eich \u2013 CEO of Brave\" , retrieved 7 February 2018 7 February ^ \"Netscape Communications Corp.\", Browser enhancements. Encyclop\u00e6dia Britannica 2006 Ultimate Reference Suite DVD ^ ^ \"Netscape Communications Corp.\", Browser enhancements. Encyclop\u00e6dia Britannica 2006 Ultimate Reference Suite DVD ^ \"TechVision: Innovators of the Net: Brendan Eich and JavaScript\". Archived from the original on 8 February 2008. ^ ^ \"TechVision: Innovators of the Net: Brendan Eich and JavaScript\". Archived from the original on 8 February 2008. \"TechVision: Innovators of the Net: Brendan Eich and JavaScript\" the original ^ a b Han, Sheon (4 March 2024). \"JavaScript Runs the World\u2014Maybe Even Literally\". Wired. Retrieved 21 August 2024. ^ a b a b Han, Sheon (4 March 2024). \"JavaScript Runs the World\u2014Maybe Even Literally\". Wired. Retrieved 21 August 2024. \"JavaScript Runs the World\u2014Maybe Even Literally\" . Retrieved 21 August 2024 21 August ^ a b \"Chapter 5. Standardization: ECMAScript\". speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021. ^ a b a b \"Chapter 5. Standardization: ECMAScript\". speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021. \"Chapter 5. Standardization: ECMAScript\" the original . Retrieved 1 November 2021 1 November ^ a b Champeon, Steve (6 April 2001). \"JavaScript, How Did We Get Here?\". oreilly.com. Archived from the original on 19 July 2016. Retrieved 16 July 2016. ^ a b a b Champeon, Steve (6 April 2001). \"JavaScript, How Did We Get Here?\". oreilly.com. Archived from the original on 19 July 2016. Retrieved 16 July 2016. \"JavaScript, How Did We Get Here?\" the original . Retrieved 16 July 2016 16 July ^ \"Microsoft Internet Explorer 3.0 Beta Now Available\". microsoft.com. Microsoft. 29 May 1996. Archived from the original on 24 November 2020. Retrieved 16 July 2016. ^ ^ \"Microsoft Internet Explorer 3.0 Beta Now Available\". microsoft.com. Microsoft. 29 May 1996. Archived from the original on 24 November 2020. Retrieved 16 July 2016. \"Microsoft Internet Explorer 3.0 Beta Now Available\" Archived . Retrieved 16 July 2016 16 July ^ McCracken, Harry (16 September 2010). \"The Unwelcome Return of \"Best Viewed with Internet Explorer\"\". technologizer.com. Archived from the original on 23 June 2018. Retrieved 16 July 2016. ^ ^ McCracken, Harry (16 September 2010). \"The Unwelcome Return of \"Best Viewed with Internet Explorer\"\". technologizer.com. Archived from the original on 23 June 2018. Retrieved 16 July 2016. \"The Unwelcome Return of \"Best Viewed with Internet Explorer\"\" Archived . Retrieved 16 July 2016 16 July ^ Baker, Loren (24 November 2004). \"Mozilla Firefox Internet Browser Market Share Gains to 7.4%\". Search Engine Journal. Archived from the original on 7 May 2021. Retrieved 8 May 2021. ^ ^ Baker, Loren (24 November 2004). \"Mozilla Firefox Internet Browser Market Share Gains to 7.4%\". Search Engine Journal. Archived from the original on 7 May 2021. Retrieved 8 May 2021. \"Mozilla Firefox Internet Browser Market Share Gains to 7.4%\" Archived . Retrieved 8 May 2021 8 May ^ Weber, Tim (9 May 2005). \"The assault on software giant Microsoft\". BBC News. Archived from the original on 25 September 2017. ^ ^ Weber, Tim (9 May 2005). \"The assault on software giant Microsoft\". BBC News. Archived from the original on 25 September 2017. \"The assault on software giant Microsoft\" BBC News the original ^ \"Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome\". PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on 2 May 2012. Retrieved 28 June 2010. ^ ^ \"Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome\". PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on 2 May 2012. Retrieved 28 June 2010. \"Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome\" Archived . Retrieved 28 June 2010 28 June ^ Purdy, Kevin (11 June 2009). \"Lifehacker Speed Tests: Safari 4, Chrome 2\". Lifehacker. Archived from the original on 14 April 2021. Retrieved 8 May 2021. ^ ^ Purdy, Kevin (11 June 2009). \"Lifehacker Speed Tests: Safari 4, Chrome 2\". Lifehacker. Archived from the original on 14 April 2021. Retrieved 8 May 2021. \"Lifehacker Speed Tests: Safari 4, Chrome 2\" Lifehacker Archived . Retrieved 8 May 2021 8 May ^ \"TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog\". Archived from the original on 4 December 2015. Retrieved 22 July 2020. ^ ^ \"TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog\". Archived from the original on 4 December 2015. Retrieved 22 July 2020. \"TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog\" Archived . Retrieved 22 July 2020 22 July ^ \"Mozilla asks, 'Are we fast yet?'\". Wired. Archived from the original on 22 June 2018. Retrieved 18 January 2019. ^ ^ \"Mozilla asks, 'Are we fast yet?'\". Wired. Archived from the original on 22 June 2018. Retrieved 18 January 2019. \"Mozilla asks, 'Are we fast yet?'\" Archived . Retrieved 18 January 2019 18 January ^ \"ECMAScript 6: New Features: Overview and Comparison\". es6-features.org. Archived from the original on 18 March 2018. Retrieved 19 March 2018. ^ ^ \"ECMAScript 6: New Features: Overview and Comparison\". es6-features.org. Archived from the original on 18 March 2018. Retrieved 19 March 2018. \"ECMAScript 6: New Features: Overview and Comparison\" . Retrieved 19 March 2018 19 March ^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012 ^ ^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012 Professional Node.js: Building JavaScript Based Scalable Software Archived Wayback Machine ^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012 ^ ^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012 Sams Teach Yourself Node.js in 24 Hours Archived Wayback Machine ^ Lawton, George (19 July 2018). \"The secret history behind the success of npm and Node\". TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ ^ Lawton, George (19 July 2018). \"The secret history behind the success of npm and Node\". TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021. \"The secret history behind the success of npm and Node\" Archived . Retrieved 2 August 2021 2 August ^ Brown, Paul (13 January 2017). \"State of the Union: npm\". Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ ^ Brown, Paul (13 January 2017). \"State of the Union: npm\". Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021. \"State of the Union: npm\" Archived . Retrieved 2 August 2021 2 August ^ a b c Branscombe, Mary (4 May 2016). \"JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16\". The New Stack. Archived from the original on 16 January 2021. Retrieved 15 January 2021. ^ a b c a b c Branscombe, Mary (4 May 2016). \"JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16\". The New Stack. Archived from the original on 16 January 2021. Retrieved 15 January 2021. \"JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16\" Archived . Retrieved 15 January 2021 15 January ^ \"The TC39 Process\". tc39.es. Ecma International. Archived from the original on 7 February 2021. Retrieved 15 January 2021. ^ ^ \"The TC39 Process\". tc39.es. Ecma International. Archived from the original on 7 February 2021. Retrieved 15 January 2021. \"The TC39 Process\" Archived . Retrieved 15 January 2021 15 January ^ \"ECMAScript proposals\". TC39. Archived from the original on 4 December 2020. Retrieved 15 January 2021. ^ ^ \"ECMAScript proposals\". TC39. Archived from the original on 4 December 2020. Retrieved 15 January 2021. \"ECMAScript proposals\" Archived . Retrieved 15 January 2021 15 January ^ a b Ashkenas, Jeremy. \"List of languages that compile to JS\". GitHub. Archived from the original on 31 January 2020. Retrieved 6 February 2020. ^ a b a b Ashkenas, Jeremy. \"List of languages that compile to JS\". GitHub. Archived from the original on 31 January 2020. Retrieved 6 February 2020. Ashkenas, Jeremy \"List of languages that compile to JS\" GitHub Archived . Retrieved 6 February 2020 6 February ^ \"U.S. Trademark Serial No. 75026640\". uspto.gov. United States Patent and Trademark Office. 6 May 1997. Archived from the original on 13 July 2021. Retrieved 8 May 2021. ^ ^ \"U.S. Trademark Serial No. 75026640\". uspto.gov. United States Patent and Trademark Office. 6 May 1997. Archived from the original on 13 July 2021. Retrieved 8 May 2021. \"U.S. Trademark Serial No. 75026640\" United States Patent and Trademark Office Archived . Retrieved 8 May 2021 8 May ^ \"Legal Notices\". oracle.com. Oracle Corporation. Archived from the original on 5 June 2021. Retrieved 8 May 2021. ^ ^ \"Legal Notices\". oracle.com. Oracle Corporation. Archived from the original on 5 June 2021. Retrieved 8 May 2021. \"Legal Notices\" Oracle Corporation Archived . Retrieved 8 May 2021 8 May ^ \"Oracle to buy Sun in $7.4-bn deal\". The Economic Times. 21 April 2009. ^ ^ \"Oracle to buy Sun in $7.4-bn deal\". The Economic Times. 21 April 2009. \"Oracle to buy Sun in $7.4-bn deal\" ^ \"JavaScript\u2122\ufe0f\". ^ ^ \"JavaScript\u2122\ufe0f\". \"JavaScript\u2122\ufe0f\" ^ a b c \"Usage statistics of JavaScript libraries for websites\". W3Techs. Retrieved 9 April 2021. ^ a b c a b c \"Usage statistics of JavaScript libraries for websites\". W3Techs. Retrieved 9 April 2021. \"Usage statistics of JavaScript libraries for websites\" . Retrieved 9 April 2021 9 April ^ \"Using jQuery with Bootstrap\". clouddevs.com. 10 June 2019. Retrieved 17 March 2024. ^ ^ \"Using jQuery with Bootstrap\". clouddevs.com. 10 June 2019. Retrieved 17 March 2024. \"Using jQuery with Bootstrap\" . Retrieved 17 March 2024 17 March ^ \"Vanilla JS\". vanilla-js.com. 16 June 2020. Archived from the original on 16 June 2020. Retrieved 17 June 2020. ^ ^ \"Vanilla JS\". vanilla-js.com. 16 June 2020. Archived from the original on 16 June 2020. Retrieved 17 June 2020. \"Vanilla JS\" Archived . Retrieved 17 June 2020 17 June ^ \"Server-Side JavaScript Guide\". oracle.com. Oracle Corporation. 11 December 1998. Archived from the original on 11 March 2021. Retrieved 8 May 2021. ^ ^ \"Server-Side JavaScript Guide\". oracle.com. Oracle Corporation. 11 December 1998. Archived from the original on 11 March 2021. Retrieved 8 May 2021. \"Server-Side JavaScript Guide\" Oracle Corporation Archived . Retrieved 8 May 2021 8 May ^ Clinick, Andrew (14 July 2000). \"Introducing JScript .NET\". Microsoft Developer Network. Microsoft. Archived from the original on 10 November 2017. Retrieved 10 April 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server\u2014particularly in Active Server Pages (ASP) ^ ^ Clinick, Andrew (14 July 2000). \"Introducing JScript .NET\". Microsoft Developer Network. Microsoft. Archived from the original on 10 November 2017. Retrieved 10 April 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server\u2014particularly in Active Server Pages (ASP) \"Introducing JScript .NET\" Archived . Retrieved 10 April 2018 10 April ^ a b Mahemoff, Michael (17 December 2009). \"Server-Side JavaScript, Back with a Vengeance\". readwrite.com. Archived from the original on 17 June 2016. Retrieved 16 July 2016. ^ a b a b Mahemoff, Michael (17 December 2009). \"Server-Side JavaScript, Back with a Vengeance\". readwrite.com. Archived from the original on 17 June 2016. Retrieved 16 July 2016. \"Server-Side JavaScript, Back with a Vengeance\" Archived . Retrieved 16 July 2016 16 July ^ \"JavaScript for Acrobat\". adobe.com. 7 August 2009. Archived from the original on 7 August 2009. Retrieved 18 August 2009. ^ ^ \"JavaScript for Acrobat\". adobe.com. 7 August 2009. Archived from the original on 7 August 2009. Retrieved 18 August 2009. \"JavaScript for Acrobat\" Archived . Retrieved 18 August 2009 18 August ^ treitter (2 February 2013). \"Answering the question: \"How do I develop an app for GNOME?\"\". livejournal.com. Archived from the original on 11 February 2013. Retrieved 7 February 2013. ^ ^ treitter (2 February 2013). \"Answering the question: \"How do I develop an app for GNOME?\"\". livejournal.com. Archived from the original on 11 February 2013. Retrieved 7 February 2013. \"Answering the question: \"How do I develop an app for GNOME?\"\" Archived . Retrieved 7 February 2013 7 February ^ \"Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel\". tessel.io. Archived from the original on 26 May 2021. Retrieved 8 May 2021. ^ ^ \"Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel\". tessel.io. Archived from the original on 26 May 2021. Retrieved 8 May 2021. \"Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel\" Archived . Retrieved 8 May 2021 8 May ^ \"Node.js Raspberry Pi GPIO Introduction\". w3schools.com. Archived from the original on 13 August 2021. Retrieved 3 May 2020. ^ ^ \"Node.js Raspberry Pi GPIO Introduction\". w3schools.com. Archived from the original on 13 August 2021. Retrieved 3 May 2020. \"Node.js Raspberry Pi GPIO Introduction\" Archived . Retrieved 3 May 2020 3 May ^ \"Espruino \u2013 JavaScript for Microcontrollers\". espruino.com. Archived from the original on 1 May 2020. Retrieved 3 May 2020. ^ ^ \"Espruino \u2013 JavaScript for Microcontrollers\". espruino.com. Archived from the original on 1 May 2020. Retrieved 3 May 2020. \"Espruino \u2013 JavaScript for Microcontrollers\" Archived . Retrieved 3 May 2020 3 May ^ Looper, Jen (21 September 2015). \"A Guide to JavaScript Engines for Idiots\". Telerik Developer Network. Archived from the original on 8 December 2018. Retrieved 8 December 2018. ^ ^ Looper, Jen (21 September 2015). \"A Guide to JavaScript Engines for Idiots\". Telerik Developer Network. Archived from the original on 8 December 2018. Retrieved 8 December 2018. \"A Guide to JavaScript Engines for Idiots\" Telerik the original . Retrieved 8 December 2018 8 December ^ \"How Blink Works\". Google. Retrieved 12 March 2024. ^ ^ \"How Blink Works\". Google. Retrieved 12 March 2024. \"How Blink Works\" . Retrieved 12 March 2024 12 March ^ a b \"Documentation \u00b7 V8\". Google. Retrieved 3 March 2024. ^ a b a b \"Documentation \u00b7 V8\". Google. Retrieved 3 March 2024. \"Documentation \u00b7 V8\" . Retrieved 3 March 2024 3 March ^ Nelaturu, Keerthi. \"WebAssembly: What's the big deal?\". medium.com. Retrieved 3 March 2024. ^ ^ Nelaturu, Keerthi. \"WebAssembly: What's the big deal?\". medium.com. Retrieved 3 March 2024. \"WebAssembly: What's the big deal?\" . Retrieved 3 March 2024 3 March ^ \"Concurrency model and Event Loop\". Mozilla Developer Network. Archived from the original on 5 September 2015. Retrieved 28 August 2015. ^ ^ \"Concurrency model and Event Loop\". Mozilla Developer Network. Archived from the original on 5 September 2015. Retrieved 28 August 2015. \"Concurrency model and Event Loop\" Archived . Retrieved 28 August 2015 28 August ^ Flanagan, David (17 August 2006). JavaScript: The Definitive Guide: The Definitive Guide. \"O'Reilly Media, Inc.\". p. 16. ISBN 978-0-596-55447-7. Archived from the original on 1 August 2020. Retrieved 29 March 2019. ^ ^ Flanagan, David (17 August 2006). JavaScript: The Definitive Guide: The Definitive Guide. \"O'Reilly Media, Inc.\". p. 16. ISBN 978-0-596-55447-7. Archived from the original on 1 August 2020. Retrieved 29 March 2019. JavaScript: The Definitive Guide: The Definitive Guide ISBN 978-0-596-55447-7 Archived . Retrieved 29 March 2019 29 March ^ a b c d Korolev, Mikhail (1 March 2019). \"JavaScript quirks in one image from the Internet\". The DEV Community. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ a b c d a b c d Korolev, Mikhail (1 March 2019). \"JavaScript quirks in one image from the Internet\". The DEV Community. Archived from the original on 28 October 2019. Retrieved 28 October 2019. \"JavaScript quirks in one image from the Internet\" Archived . Retrieved 28 October 2019 28 October ^ \"Proposal-bigint/ADVANCED.md at master \u00b7 tc39/Proposal-bigint\". GitHub. ^ ^ \"Proposal-bigint/ADVANCED.md at master \u00b7 tc39/Proposal-bigint\". GitHub. \"Proposal-bigint/ADVANCED.md at master \u00b7 tc39/Proposal-bigint\" GitHub ^ Bernhardt, Gary (2012). \"Wat\". Destroy All Software. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ ^ Bernhardt, Gary (2012). \"Wat\". Destroy All Software. Archived from the original on 28 October 2019. Retrieved 28 October 2019. \"Wat\" Archived . Retrieved 28 October 2019 28 October ^ \"JavaScript data types and data structures\". MDN. 16 February 2017. Archived from the original on 14 March 2017. Retrieved 24 February 2017. ^ ^ \"JavaScript data types and data structures\". MDN. 16 February 2017. Archived from the original on 14 March 2017. Retrieved 24 February 2017. \"JavaScript data types and data structures\" Archived . Retrieved 24 February 2017 24 February ^ Flanagan 2006, pp. 176\u2013178. ^ ^ Flanagan 2006, pp. 176\u2013178. Flanagan 2006 ^ Crockford, Douglas. \"Prototypal Inheritance in JavaScript\". Archived from the original on 13 August 2013. Retrieved 20 August 2013. ^ ^ Crockford, Douglas. \"Prototypal Inheritance in JavaScript\". Archived from the original on 13 August 2013. Retrieved 20 August 2013. \"Prototypal Inheritance in JavaScript\" Archived . Retrieved 20 August 2013 20 August ^ \"Inheritance and the prototype chain\". Mozilla Developer Network. Archived from the original on 25 April 2013. Retrieved 6 April 2013. ^ ^ \"Inheritance and the prototype chain\". Mozilla Developer Network. Archived from the original on 25 April 2013. Retrieved 6 April 2013. \"Inheritance and the prototype chain\" Mozilla Archived . Retrieved 6 April 2013 6 April ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6. ^ ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6. Effective JavaScript ISBN 978-0-321-81218-6 ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 95\u201397. ISBN 978-1-59327-282-1. ^ ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 95\u201397. ISBN 978-1-59327-282-1. Eloquent JavaScript 95\u2013 ISBN 978-1-59327-282-1 ^ Katz, Yehuda (12 August 2011). \"Understanding \"Prototypes\" in JavaScript\". Archived from the original on 5 April 2013. Retrieved 6 April 2013. ^ ^ Katz, Yehuda (12 August 2011). \"Understanding \"Prototypes\" in JavaScript\". Archived from the original on 5 April 2013. Retrieved 6 April 2013. \"Understanding \"Prototypes\" in JavaScript\" Archived . Retrieved 6 April 2013 6 April ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125\u2013127. ISBN 978-0-321-81218-6. ^ ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125\u2013127. ISBN 978-0-321-81218-6. Effective JavaScript 125\u2013 ISBN 978-0-321-81218-6 ^ \"Function \u2013 JavaScript\". MDN Web Docs. Retrieved 30 October 2021. ^ ^ \"Function \u2013 JavaScript\". MDN Web Docs. Retrieved 30 October 2021. \"Function \u2013 JavaScript\" MDN Web Docs . Retrieved 30 October 2021 30 October ^ \"Properties of the Function Object\". Es5.github.com. Archived from the original on 28 January 2013. Retrieved 26 May 2013. ^ ^ \"Properties of the Function Object\". Es5.github.com. Archived from the original on 28 January 2013. Retrieved 26 May 2013. \"Properties of the Function Object\" Archived . Retrieved 26 May 2013 26 May ^ Flanagan 2006, p. 141. ^ ^ Flanagan 2006, p. 141. Flanagan 2006 ^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogspot.de, April 11, 2014. ^ ^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogspot.de, April 11, 2014. The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived Wayback Machine ^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010. ^ ^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010. Traits for JavaScript Archived Wayback Machine ^ \"Home | CocktailJS\". Cocktailjs.github.io. Archived from the original on 4 February 2017. Retrieved 24 February 2017. ^ ^ \"Home | CocktailJS\". Cocktailjs.github.io. Archived from the original on 4 February 2017. Retrieved 24 February 2017. \"Home | CocktailJS\" Archived . Retrieved 24 February 2017 24 February ^ Croll, Angus (31 May 2011). \"A fresh look at JavaScript Mixins\". JavaScript, JavaScript\u2026. Archived from the original on 15 April 2020. ^ ^ Croll, Angus (31 May 2011). \"A fresh look at JavaScript Mixins\". JavaScript, JavaScript\u2026. Archived from the original on 15 April 2020. \"A fresh look at JavaScript Mixins\" Archived ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139\u2013149. ISBN 978-1-59327-282-1. ^ ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139\u2013149. ISBN 978-1-59327-282-1. Eloquent JavaScript 139\u2013 ISBN 978-1-59327-282-1 ^ \"E4X \u2013 Archive of obsolete content\". Mozilla Developer Network. Mozilla Foundation. 14 February 2014. Archived from the original on 24 July 2014. Retrieved 13 July 2014. ^ ^ \"E4X \u2013 Archive of obsolete content\". Mozilla Developer Network. Mozilla Foundation. 14 February 2014. Archived from the original on 24 July 2014. Retrieved 13 July 2014. \"E4X \u2013 Archive of obsolete content\" the original . Retrieved 13 July 2014 13 July ^ \"var \u2013 JavaScript\". The Mozilla Developer Network. Archived from the original on 23 December 2012. Retrieved 22 December 2012. ^ ^ \"var \u2013 JavaScript\". The Mozilla Developer Network. Archived from the original on 23 December 2012. Retrieved 22 December 2012. \"var \u2013 JavaScript\" Mozilla Developer Network Archived . Retrieved 22 December 2012 22 December ^ \"let\". MDN web docs. Mozilla. Archived from the original on 28 May 2019. Retrieved 27 June 2018. ^ ^ \"let\". MDN web docs. Mozilla. Archived from the original on 28 May 2019. Retrieved 27 June 2018. \"let\" Archived . Retrieved 27 June 2018 27 June ^ \"const\". MDN web docs. Mozilla. Archived from the original on 28 June 2018. Retrieved 27 June 2018. ^ ^ \"const\". MDN web docs. Mozilla. Archived from the original on 28 June 2018. Retrieved 27 June 2018. \"const\" Archived . Retrieved 27 June 2018 27 June ^ \"ECMAScript Language Specification \u2013 ECMA-262 Edition 5.1\". Ecma International. Archived from the original on 26 November 2012. Retrieved 22 December 2012. ^ ^ \"ECMAScript Language Specification \u2013 ECMA-262 Edition 5.1\". Ecma International. Archived from the original on 26 November 2012. Retrieved 22 December 2012. \"ECMAScript Language Specification \u2013 ECMA-262 Edition 5.1\" Ecma International Archived . Retrieved 22 December 2012 22 December ^ \"console\". Mozilla Developer Network. Mozilla. Archived from the original on 28 February 2013. Retrieved 6 April 2013. ^ ^ \"console\". Mozilla Developer Network. Mozilla. Archived from the original on 28 February 2013. Retrieved 6 April 2013. \"console\" Mozilla Archived . Retrieved 6 April 2013 6 April ^ \"arguments\". Mozilla Developer Network. Mozilla. Archived from the original on 13 April 2013. Retrieved 6 April 2013. ^ ^ \"arguments\". Mozilla Developer Network. Mozilla. Archived from the original on 13 April 2013. Retrieved 6 April 2013. \"arguments\" Mozilla Archived . Retrieved 6 April 2013 6 April ^ \"function* - JavaScript | MDN\". developer.mozilla.org. Retrieved 27 September 2022. ^ ^ \"function* - JavaScript | MDN\". developer.mozilla.org. Retrieved 27 September 2022. \"function* - JavaScript | MDN\" . Retrieved 27 September 2022 27 September ^ \"JavaScript modules\". MDN Web Docs. Mozilla. Archived from the original on 17 July 2022. Retrieved 28 July 2022. ^ ^ \"JavaScript modules\". MDN Web Docs. Mozilla. Archived from the original on 17 July 2022. Retrieved 28 July 2022. \"JavaScript modules\" Archived . Retrieved 28 July 2022 28 July ^ \"Making JavaScript Safe for Advertising\". ADsafe. Archived from the original on 6 July 2021. Retrieved 8 May 2021. ^ ^ \"Making JavaScript Safe for Advertising\". ADsafe. Archived from the original on 6 July 2021. Retrieved 8 May 2021. \"Making JavaScript Safe for Advertising\" Archived . Retrieved 8 May 2021 8 May ^ \"Secure ECMA Script (SES)\". Archived from the original on 15 May 2013. Retrieved 26 May 2013. ^ ^ \"Secure ECMA Script (SES)\". Archived from the original on 15 May 2013. Retrieved 26 May 2013. \"Secure ECMA Script (SES)\" Archived . Retrieved 26 May 2013 26 May ^ \"Google Caja Project\". Google. Archived from the original on 22 January 2021. Retrieved 9 July 2021. ^ ^ \"Google Caja Project\". Google. Archived from the original on 22 January 2021. Retrieved 9 July 2021. \"Google Caja Project\" Google Archived . Retrieved 9 July 2021 9 July ^ \"Mozilla Cross-Site Scripting Vulnerability Reported and Fixed \u2013 MozillaZine Talkback\". Mozillazine.org. Archived from the original on 21 July 2011. Retrieved 24 February 2017. ^ ^ \"Mozilla Cross-Site Scripting Vulnerability Reported and Fixed \u2013 MozillaZine Talkback\". Mozillazine.org. Archived from the original on 21 July 2011. Retrieved 24 February 2017. \"Mozilla Cross-Site Scripting Vulnerability Reported and Fixed \u2013 MozillaZine Talkback\" Archived . Retrieved 24 February 2017 24 February ^ Kottelin, Thor (17 June 2008). \"Right-click \"protection\"? Forget about it\". blog.anta.net. Archived from the original on 9 August 2011. Retrieved 28 July 2022. ^ ^ Kottelin, Thor (17 June 2008). \"Right-click \"protection\"? Forget about it\". blog.anta.net. Archived from the original on 9 August 2011. Retrieved 28 July 2022. \"Right-click \"protection\"? Forget about it\" the original . Retrieved 28 July 2022 28 July ^ Rehorik, Jan (29 November 2016). \"Why You Should Never Put Sensitive Data in Your JavaScript\". ServiceObjects Blog. ServiceObjects. Archived from the original on 3 June 2019. Retrieved 3 June 2019. ^ ^ Rehorik, Jan (29 November 2016). \"Why You Should Never Put Sensitive Data in Your JavaScript\". ServiceObjects Blog. ServiceObjects. Archived from the original on 3 June 2019. Retrieved 3 June 2019. \"Why You Should Never Put Sensitive Data in Your JavaScript\" Archived . Retrieved 3 June 2019 3 June ^ a b Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (21 December 2016), \"Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web\" (PDF), Northeastern University, arXiv:1811.00918, doi:10.14722/ndss.2017.23414, ISBN 978-1-891562-46-4, S2CID 17885720, archived from the original (PDF) on 29 March 2017, retrieved 28 July 2022 ^ a b a b Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (21 December 2016), \"Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web\" (PDF), Northeastern University, arXiv:1811.00918, doi:10.14722/ndss.2017.23414, ISBN 978-1-891562-46-4, S2CID 17885720, archived from the original (PDF) on 29 March 2017, retrieved 28 July 2022 \"Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web\" (PDF) arXiv 1811.00918 1811.00918 doi 10.14722/ndss.2017.23414 ISBN 978-1-891562-46-4 S2CID 17885720 the original (PDF) , retrieved 28 July 2022 28 July ^ Collins, Keith (27 March 2016). \"How one programmer broke the internet by deleting a tiny piece of code\". Quartz. Archived from the original on 22 February 2017. Retrieved 22 February 2017. ^ ^ Collins, Keith (27 March 2016). \"How one programmer broke the internet by deleting a tiny piece of code\". Quartz. Archived from the original on 22 February 2017. Retrieved 22 February 2017. \"How one programmer broke the internet by deleting a tiny piece of code\" Archived . Retrieved 22 February 2017 22 February ^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine ^ ^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine Developer's 11 lines of deleted code 'breaks the internet' Archived Wayback Machine ^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine ^ ^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine Buffer overflow in crypto.signText() Archived Wayback Machine ^ Festa, Paul (19 August 1998). \"Buffer-overflow bug in IE\". CNET. Archived from the original on 25 December 2002. ^ ^ Festa, Paul (19 August 1998). \"Buffer-overflow bug in IE\". CNET. Archived from the original on 25 December 2002. \"Buffer-overflow bug in IE\" CNET the original ^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine ^ ^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived Wayback Machine ^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine ^ ^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived Wayback Machine ^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine ^ ^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine Macromedia Flash ActiveX Buffer Overflow Archived Wayback Machine ^ \"Protected Mode in Vista IE7 \u2013 IEBlog\". Blogs.msdn.com. 9 February 2006. Archived from the original on 23 January 2010. Retrieved 24 February 2017. ^ ^ \"Protected Mode in Vista IE7 \u2013 IEBlog\". Blogs.msdn.com. 9 February 2006. Archived from the original on 23 January 2010. Retrieved 24 February 2017. \"Protected Mode in Vista IE7 \u2013 IEBlog\" Archived . Retrieved 24 February 2017 24 February ^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine ^ ^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived Wayback Machine ^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005\u201341: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine ^ ^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005\u201341: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine Mozilla Foundation Security Advisory 2005\u201341: Privilege escalation via DOM property overrides Archived Wayback Machine ^ Andersen, Starr (9 August 2004). \"Part 5: Enhanced Browsing Security\". TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 20 October 2021. ^ ^ Andersen, Starr (9 August 2004). \"Part 5: Enhanced Browsing Security\". TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 20 October 2021. \"Part 5: Enhanced Browsing Security\" TechNet Microsoft Docs . Retrieved 20 October 2021 20 October ^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine ^ ^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine JS.Seeker.K Archived Wayback Machine ^ Gruss, Daniel; Maurice, Cl\u00e9mentine; Mangard, Stefan (24 July 2015). \"Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript\". arXiv:1507.06955 [cs.CR]. ^ ^ Gruss, Daniel; Maurice, Cl\u00e9mentine; Mangard, Stefan (24 July 2015). \"Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript\". arXiv:1507.06955 [cs.CR]. arXiv 1507.06955 1507.06955 cs.CR ^ Jean-Pharuns, Alix (30 July 2015). \"Rowhammer.js Is the Most Ingenious Hack I've Ever Seen\". Motherboard. Vice. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ ^ Jean-Pharuns, Alix (30 July 2015). \"Rowhammer.js Is the Most Ingenious Hack I've Ever Seen\". Motherboard. Vice. Archived from the original on 27 January 2018. Retrieved 26 January 2018. \"Rowhammer.js Is the Most Ingenious Hack I've Ever Seen\" Vice Archived . Retrieved 26 January 2018 26 January ^ Goodin, Dan (4 August 2015). \"DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript\". Ars Technica. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ ^ Goodin, Dan (4 August 2015). \"DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript\". Ars Technica. Archived from the original on 27 January 2018. Retrieved 26 January 2018. \"DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript\" Ars Technica Archived . Retrieved 26 January 2018 26 January ^ Auerbach, David (28 July 2015). \"Rowhammer security exploit: Why a new security attack is truly terrifying\". slate.com. Archived from the original on 30 July 2015. Retrieved 29 July 2015. ^ ^ Auerbach, David (28 July 2015). \"Rowhammer security exploit: Why a new security attack is truly terrifying\". slate.com. Archived from the original on 30 July 2015. Retrieved 29 July 2015. Auerbach, David \"Rowhammer security exploit: Why a new security attack is truly terrifying\" Archived . Retrieved 29 July 2015 29 July ^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017 ^ ^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017 AnC Archived Wayback Machine ^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017 ^ ^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017 New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived Wayback Machine ^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack ^ ^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack Spectre Attack Archived Wayback Machine ^ \"Benchmark.js\". benchmarkjs.com. Archived from the original on 19 December 2016. Retrieved 6 November 2016. ^ ^ \"Benchmark.js\". benchmarkjs.com. Archived from the original on 19 December 2016. Retrieved 6 November 2016. \"Benchmark.js\" Archived . Retrieved 6 November 2016 6 November ^ JSBEN.CH. \"JSBEN.CH Performance Benchmarking Playground for JavaScript\". jsben.ch. Archived from the original on 27 February 2021. Retrieved 13 August 2021. ^ ^ JSBEN.CH. \"JSBEN.CH Performance Benchmarking Playground for JavaScript\". jsben.ch. Archived from the original on 27 February 2021. Retrieved 13 August 2021. \"JSBEN.CH Performance Benchmarking Playground for JavaScript\" Archived . Retrieved 13 August 2021 13 August ^ Eich, Brendan (3 April 2008). \"Popularity\". Archived from the original on 3 July 2011. Retrieved 19 January 2012. ^ ^ Eich, Brendan (3 April 2008). \"Popularity\". Archived from the original on 3 July 2011. Retrieved 19 January 2012. Eich, Brendan \"Popularity\" Archived . Retrieved 19 January 2012 19 January ^ \"Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine\". Visual Studio Magazine. Archived from the original on 10 February 2018. Retrieved 9 February 2018. ^ ^ \"Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine\". Visual Studio Magazine. Archived from the original on 10 February 2018. Retrieved 9 February 2018. \"Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine\" Archived . Retrieved 9 February 2018 9 February ^ \"frequently asked questions\". asm.js. Archived from the original on 4 June 2014. Retrieved 13 April 2014. ^ ^ \"frequently asked questions\". asm.js. Archived from the original on 4 June 2014. Retrieved 13 April 2014. \"frequently asked questions\" Archived . Retrieved 13 April 2014 13 April Sources Dere, Mohan (21 December 2017). \"How to integrate create-react-app with all the libraries you need to make a great app\". freeCodeCamp. Retrieved 14 June 2018. \"How to integrate create-react-app with all the libraries you need to make a great app\" . Retrieved 14 June 2018 14 June Panchal, Krunal (26 April 2022). \"Angular vs React Detailed Comparison\". Groovy Web. Retrieved 5 June 2023. \"Angular vs React Detailed Comparison\" . Retrieved 5 June 2023 5 June Further reading ECMAScript Specification Documents Flanagan, David. JavaScript: The Definitive Guide. 7th edition. Sebastopol, California: O'Reilly, 2020. ISBN 978-1-491-95202-3. ISBN 978-1-491-95202-3 Haverbeke, Marijn. Eloquent JavaScript. 3rd edition. No Starch Press, 2018. 472 pages. ISBN 978-1593279509.(download) ISBN 978-1593279509 (download) Zakas, Nicholas. Principles of Object-Oriented JavaScript, 1st edition. No Starch Press, 2014. 120 pages. ISBN 978-1593275402. ISBN 978-1593275402 External links sister projects sister projects Definitions from Wiktionary Definitions from Wiktionary Definitions Media from Commons Media from Commons Media Textbooks from Wikibooks Textbooks from Wikibooks Textbooks Resources from Wikiversity Resources from Wikiversity Resources Documentation from MediaWiki Documentation from MediaWiki Documentation Listen to this article 48 minutes 48 This audio file (2013-08-20) 2013-08-20 Audio help More spoken articles The Modern JavaScript Tutorial. A community maintained continuously updated collection of tutorials on the entirety of the language. The Modern JavaScript Tutorial \"JavaScript: The First 20 Years\". Retrieved 6 February 2022. \"JavaScript: The First 20 Years\" . Retrieved 6 February 2022 6 February v v t t e e JavaScript Code analysis ESLint ESLint JSHint JSHint JSLint JSLint Supersets JS++ JS++ TypeScript TypeScript ArkTS ArkTS Transpilers AtScript AtScript Babel Babel ClojureScript ClojureScript CoffeeScript CoffeeScript Dart Dart Elm Elm Emscripten Emscripten Google Closure Compiler Google Closure Compiler Google Web Toolkit Google Web Toolkit Haxe Haxe LiveScript LiveScript Morfik Morfik Nim Nim Opa Opa PureScript PureScript Reason Reason WebSharper WebSharper JavaScript library JavaScript library JavaScript syntax JavaScript syntax Debuggers Chrome DevTools Chrome DevTools Firefox Inspector Firefox Inspector Komodo IDE Komodo IDE Microsoft Edge DevTools Microsoft Edge DevTools Opera DevTools Opera DevTools Safari Web Inspector Safari Web Inspector Doc generators JSDoc JSDoc (comparison) comparison Ace Cloud9 IDE Ace Cloud9 IDE Cloud9 IDE Atom Atom CodeMirror Brackets Light Table CodeMirror Brackets Brackets Light Table Light Table PhpStorm PhpStorm Orion Orion Visual Studio Visual Studio Express Visual Studio Visual Studio Express Visual Studio Express Visual Studio Code Visual Studio Code Visual Studio Team Services Visual Studio Team Services Vim Vim Engines List of ECMAScript engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks Comparison of JavaScript frameworks List of JavaScript libraries List of JavaScript libraries technologies Ajax Ajax AssemblyScript AssemblyScript asm.js asm.js Cascading Style Sheets Cascading Style Sheets Document Object Model Document Object Model HTML HTML5 HTML HTML5 HTML5 JSON JSON WebAssembly WebAssembly WebAuthn WebAuthn Package managers npm npm pnpm pnpm yarn yarn Webpack Webpack Vite Vite esbuild esbuild Server-side Active Server Pages Active Server Pages Bun Bun CommonJS CommonJS Deno Deno JSGI JSGI Node.js Node.js Unit testing (list) list Jasmine Jasmine Mocha Mocha QUnit QUnit Douglas Crockford Douglas Crockford Ryan Dahl Ryan Dahl Brendan Eich Brendan Eich John Resig John Resig v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category v v t t e e ECMAScript ActionScript ActionScript Caja Caja JavaScript engines asm.js JavaScript engines engines asm.js asm.js JScript JScript JScript .NET JScript .NET QtScript QtScript TypeScript TypeScript WMLScript WMLScript Engines Carakan Carakan Futhark Futhark InScript InScript JavaScriptCore JavaScriptCore JScript JScript KJS KJS Linear B Linear B QtScript QtScript Rhino Rhino SpiderMonkey TraceMonkey J\u00e4gerMonkey SpiderMonkey TraceMonkey TraceMonkey J\u00e4gerMonkey J\u00e4gerMonkey Tamarin Tamarin V8 V8 ChakraCore Chakra ChakraCore Chakra Chakra JScript .NET JScript .NET Nashorn Nashorn Frameworks Client-side Dojo Dojo Echo Echo Ext JS Ext JS Google Web Toolkit Google Web Toolkit jQuery jQuery Lively Kernel Lively Kernel midori MochiKit MochiKit MooTools MooTools Prototype Prototype Pyjs Pyjs qooxdoo qooxdoo SproutCore SproutCore Spry Spry Wakanda Framework Server-side Node.js Node.js Deno Deno Bun Bun Jaxer Jaxer AppJet AppJet WakandaDB Cappuccino Libraries Backbone.js Backbone.js SWFObject SWFObject Underscore.js Underscore.js Brendan Eich Brendan Eich Douglas Crockford Douglas Crockford John Resig John Resig Scott Isaacs DHTML DHTML Ecma International Ecma International JSDoc JSDoc JSGI JSGI JSHint JSHint JSLint JSLint JSON JSON JSSS JSSS Sputnik Sputnik SunSpider SunSpider Asynchronous module definition Asynchronous module definition CommonJS CommonJS JavaScript libraries Ajax frameworks JavaScript frameworks server-side JavaScript v v t t e e Web browsers Features standards protocols Bookmarks Bookmarks Extensions Extensions Privacy mode Privacy mode Web standards HTML v5 HTML v5 v5 CSS CSS DOM DOM JavaScript WebAssembly Web storage IndexedDB WebGL WebGPU JavaScript WebAssembly WebAssembly Web storage Web storage IndexedDB IndexedDB WebGL WebGL WebGPU WebGPU HTTP Encryption Cookies third-party HTTP Encryption Encryption Cookies third-party Cookies third-party third-party OCSP OCSP WebRTC WebRTC WebSocket WebSocket Blink Proprietary Google Chrome Google Chrome Arc Arc Avast Avast Coc Coc Coc Coc Comodo Comodo Epic Epic Maxthon Maxthon Microsoft Edge Microsoft Edge Opera (Mobile) Opera Mobile Puffin Puffin QQ QQ Samsung Samsung Silk Silk Sleipnir Sleipnir SRWare SRWare UC UC Vivaldi Vivaldi Whale Whale Yandex Yandex FOSS Chromium Chromium Brave Brave Dooble Dooble Falkon Falkon Otter Otter Supermium Supermium ungoogled ungoogled Gecko Firefox Firefox Floorp Floorp GNU IceCat GNU IceCat LibreWolf LibreWolf Midori Midori SlimBrowser SlimBrowser Tor Tor Zen Zen Gecko forks Basilisk K-Meleon Pale Moon SeaMonkey Waterfox forks Basilisk Basilisk K-Meleon K-Meleon Pale Moon Pale Moon SeaMonkey SeaMonkey Waterfox Waterfox WebKit Safari Safari GNOME Web GNOME Web iCab iCab Orion Orion engine 360 360 DuckDuckGo DuckDuckGo Konqueror Konqueror Lunascape Lunascape NetFront NetFront qutebrowser qutebrowser eww eww Flow Flow Ladybird Ladybird Links Links Lynx Lynx NetSurf NetSurf Opera Mini Opera Mini w3m w3m Blink Beaker Beaker Citrio Citrio Flock Flock Redcore Redcore Rockmelt Rockmelt SalamWeb SalamWeb Sputnik Sputnik Torch Torch Gecko Beonex Beonex Camino Camino Classilla Classilla Conkeror Conkeror Firefox Lite Firefox Lite Galeon Galeon Ghostzilla Ghostzilla IceDragon IceDragon Kazehakase Kazehakase Kylo Kylo Lotus Lotus MicroB MicroB Minimo Minimo Mozilla suite Mozilla suite PirateBrowser PirateBrowser Pogo Pogo Strata Strata Swiftfox Swiftfox Swiftweasel Swiftweasel TenFourFox TenFourFox Timberwolf Timberwolf xB xB MSHTML Internet Explorer Internet Explorer AOL AOL Deepnet Deepnet GreenBrowser GreenBrowser MediaBrowser MediaBrowser NeoPlanet NeoPlanet NetCaptor NetCaptor SpaceTime SpaceTime ZAC ZAC WebKit Arora Arora BOLT BOLT Dolphin Dolphin Fluid Fluid Google TV Google TV Iris Iris Mercury Mercury Nokia Symbian Nokia Symbian OmniWeb OmniWeb Opera Coast Opera Coast Origyn Origyn QtWeb QtWeb Shiira Shiira Steel Steel surf surf Uzbl Uzbl WebPositive WebPositive xombrero xombrero abaco abaco Amaya Amaya Arachne Arachne Arena Arena Blazer Blazer Cake Cake Charon Charon CM CM Deepfish Deepfish Dillo Dillo Edge Legacy Edge Legacy ELinks ELinks Gazelle Gazelle HotJava HotJava IBM Home Page Reader IBM Home Page Reader IBM WebExplorer IBM WebExplorer IBrowse IBrowse Internet Explorer for Mac Internet Explorer for Mac KidZui KidZui Line Mode Line Mode Mosaic Mosaic MSN TV MSN TV NetPositive NetPositive Netscape Netscape Skweezer Skweezer Skyfire Skyfire ThunderHawk ThunderHawk Vision Vision WinWAP WinWAP WorldWideWeb WorldWideWeb Category Category Comparisons Comparisons List List v v t t e e Node.js Node.js Node.js npm npm V8 V8 CommonJS CommonJS MEAN MongoDB Express.js AngularJS/Angular MEAN MongoDB MongoDB Express.js Express.js AngularJS/Angular AngularJS Angular MEEN (substituted with Ember.js) Ember.js Backbone.js Backbone.js Fastify Fastify Meteor Meteor Sails.js (uses Express.js) Sails.js NestJS NestJS Next.js Next.js Nuxt.js Nuxt.js Lodash Lodash Underscore.js Underscore.js React.js React.js Vue.js Vue.js JavaScript JavaScript CoffeeScript CoffeeScript TypeScript TypeScript WebAssembly AssemblyScript C Rust WebAssembly AssemblyScript AssemblyScript C C Rust Rust Portal: Portal Computer programming Computer programming Authority control databases FAST FAST FAST Germany Germany Germany United States United States United States France France France BnF data BnF data BnF data Czech Republic Czech Republic Czech Republic Czech Republic Spain Spain Spain Israel Israel Israel IdRef IdRef IdRef ELMCIP ELMCIP ELMCIP https://en.wikipedia.org/w/index.php?title=JavaScript&oldid=1263283332 Categories JavaScript JavaScript American inventions American inventions Cross-platform software Cross-platform software Dynamically typed programming languages Dynamically typed programming languages Functional languages Functional languages Object-based programming languages Object-based programming languages High-level programming languages High-level programming languages Programming languages created in 1995 Programming languages created in 1995 Programming languages with an ISO standard Programming languages with an ISO standard Prototype-based programming languages Prototype-based programming languages Scripting languages Scripting languages Web programming Web programming Programming languages Programming languages CS1: unfit URL CS1: unfit URL Webarchive template wayback links Webarchive template wayback links Articles with short description Articles with short description Short description matches Wikidata Short description matches Wikidata Wikipedia indefinitely semi-protected pages Wikipedia indefinitely semi-protected pages Use dmy dates from March 2024 Use dmy dates from March 2024 Articles with excerpts Articles with excerpts All articles with unsourced statements All articles with unsourced statements Articles with unsourced statements from August 2023 Articles with unsourced statements from August 2023 All articles with failed verification All articles with failed verification Articles with failed verification from March 2017 Articles with failed verification from March 2017 Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with hidden wikidata Pages using Sister project links with hidden wikidata Pages using Sister project links with default search Pages using Sister project links with default search Articles with hAudio microformats Articles with hAudio microformats Spoken articles Spoken articles Articles with example JavaScript code Articles with example JavaScript code This page was last edited on 15 December 2024, at 19:41 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/Java_(programming_language)": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History Toggle History subsection 1.1 Principles 1.2 Versions 1 History 1 History Toggle History subsection 1.1 Principles 1.1 Principles 1.1 Principles 1.2 Versions 1.2 Versions 1.2 Versions 2 Editions 2 Editions 2 Editions 3 Execution system Toggle Execution system subsection 3.1 Java JVM and bytecode 3.1.1 Performance 3.2 Non-JVM 3.3 Automatic memory management 3 Execution system 3 Execution system Toggle Execution system subsection 3.1 Java JVM and bytecode 3.1.1 Performance 3.1 Java JVM and bytecode 3.1 Java JVM and bytecode 3.1.1 Performance 3.1.1 Performance 3.1.1 Performance 3.2 Non-JVM 3.2 Non-JVM 3.2 Non-JVM 3.3 Automatic memory management 3.3 Automatic memory management 3.3 Automatic memory management 4 Syntax Toggle Syntax subsection 4.1 Hello world 4 Syntax 4 Syntax Toggle Syntax subsection 4.1 Hello world 4.1 Hello world 4.1 Hello world 5 Special classes Toggle Special classes subsection 5.1 Applet 5.2 Servlet 5.3 JavaServer Pages 5.4 Swing application 5.5 JavaFX application 5.6 Generics 5 Special classes 5 Special classes Toggle Special classes subsection 5.1 Applet 5.1 Applet 5.1 Applet 5.2 Servlet 5.2 Servlet 5.2 Servlet 5.3 JavaServer Pages 5.3 JavaServer Pages 5.3 JavaServer Pages 5.4 Swing application 5.4 Swing application 5.4 Swing application 5.5 JavaFX application 5.5 JavaFX application 5.5 JavaFX application 5.6 Generics 5.6 Generics 5.6 Generics 6 Criticism 6 Criticism 6 Criticism 7 Class libraries 7 Class libraries 7 Class libraries 8 Documentation 8 Documentation 8 Documentation 9 Implementations 9 Implementations 9 Implementations 10 Use outside the Java platform Toggle Use outside the Java platform subsection 10.1 Android 10.1.1 Controversy 10 Use outside the Java platform 10 Use outside the Java platform Toggle Use outside the Java platform subsection 10.1 Android 10.1.1 Controversy 10.1 Android 10.1 Android 10.1.1 Controversy 10.1.1 Controversy 10.1.1 Controversy 11 See also 11 See also 11 See also 12 References 12 References 12 References 13 Bibliography 13 Bibliography 13 Bibliography 14 External links 14 External links 14 External links Toggle the table of contents Java (programming language) Java (programming language) 117 languages Ac\u00e8h Ac\u00e8h Ac\u00e8h Afrikaans Afrikaans Afrikaans \u12a0\u121b\u122d\u129b \u12a0\u121b\u122d\u129b \u12a0\u121b\u122d\u129b \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s Aragon\u00e9s Aragon\u00e9s \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be Asturianu Asturianu Asturianu Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Bosanski Bosanski Bosanski Catal\u00e0 Catal\u00e0 Catal\u00e0 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Corsu Corsu Corsu Cymraeg Cymraeg Cymraeg Dansk Dansk Dansk \u0627\u0644\u062f\u0627\u0631\u062c\u0629 \u0627\u0644\u062f\u0627\u0631\u062c\u0629 \u0627\u0644\u062f\u0627\u0631\u062c\u0629 Deutsch Deutsch Deutsch Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto Estreme\u00f1u Estreme\u00f1u Estreme\u00f1u Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais Gaeilge Gaeilge Gaeilge Galego Galego Galego \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 Hausa Hausa Hausa \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Hrvatski Hrvatski Ido Ido Ido Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia Interlingua Interlingua Interlingua \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 Kiswahili Kiswahili Kiswahili Krey\u00f2l ayisyen Krey\u00f2l ayisyen Krey\u00f2l ayisyen Kurd\u00ee Kurd\u00ee Kurd\u00ee \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 Latina Latina Latina Latvie\u0161u Latvie\u0161u Latvie\u0161u Lietuvi\u0173 Lietuvi\u0173 Lietuvi\u0173 Ligure Ligure Ligure Lombard Lombard Lombard Magyar Magyar Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 Bahasa Melayu Bahasa Melayu Bahasa Melayu Minangkabau Minangkabau Minangkabau \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Na Vosa Vakaviti Na Vosa Vakaviti Na Vosa Vakaviti Nederlands Nederlands Nederlands \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk nynorsk Norsk nynorsk Norsk nynorsk Occitan Occitan Occitan \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 Runa Simi Runa Simi Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0938\u0902\u0938\u094d\u0915\u0943\u0924\u092e\u094d \u0938\u0902\u0938\u094d\u0915\u0943\u0924\u092e\u094d \u0938\u0902\u0938\u094d\u0915\u0943\u0924\u092e\u094d Shqip Shqip Shqip \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd Simple English Simple English Simple English \u0633\u0646\u068c\u064a \u0633\u0646\u068c\u064a \u0633\u0646\u068c\u064a Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Soomaaliga Soomaaliga Soomaaliga \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Suomi Suomi Svenska Svenska Svenska Tagalog Tagalog Tagalog \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd Taqbaylit Taqbaylit Taqbaylit \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e Basa Ugi Basa Ugi Basa Ugi \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 V\u00e8neto V\u00e8neto V\u00e8neto Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t \u6587\u8a00 \u6587\u8a00 \u6587\u8a00 Winaray Winaray Winaray \u5434\u8bed \u5434\u8bed \u5434\u8bed \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read View source View source View source View history View history View history Tools Read Read Read View source View source View source View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons Wikibooks Wikibooks Wikibooks Wikiquote Wikiquote Wikiquote Wikiversity Wikiversity Wikiversity Wikidata item Wikidata item Wikidata item Java (software platform) JavaScript Java Javanese language Open frame Paradigm Multi-paradigm generic object-oriented class-based functional imperative reflective concurrent Designed by James Gosling Developer Oracle Corporation ; 29 years ago (1995-05-23) 1995-05-23 [1] [ ] Typing discipline Static, strong, safe nominative manifest Memory management Automatic garbage collection Filename extensions .class .jar .war oracle.com/java/ oracle.com/java/ oracle.com/java/ java.com java.com java.com dev.java dev.java dev.java CLU [2] [ ] Simula67 [2] [ ] Lisp [2] [ ] Smalltalk [2] [ ] Ada 83 C++ [3] [ ] C# [4] [ ] Eiffel [5] [ ] Mesa [6] [ ] Modula-3 [7] [ ] Oberon [8] [ ] Objective-C [9] [ ] UCSD Pascal [10] [ ] [11] [ ] Object Pascal [12] [ ] Ada 2005 BeanShell C# Chapel [13] [ ] Clojure ECMAScript Fantom Gambas [14] [ ] Groovy Hack [15] [ ] Haxe J# Kotlin PHP Python Scala Seed7 Vala JavaScript JS++ ArkTS Java Programming at Wikibooks Java Programming Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers write once, run anywhere (WORA),[16] meaning that compiled Java code can run on all platforms that support Java without the need to recompile.[17] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but has fewer low-level facilities than either of them. The Java runtime provides dynamic capabilities (such as reflection and runtime code modification) that are typically not available in traditional compiled languages. high-level class-based object-oriented programming language dependencies general-purpose programmers WORA [16] [ ] compiled [17] [ ] bytecode Java virtual machine computer architecture syntax C C++ low-level reflection Java gained popularity shortly after its release, and has been a popular programming language since then.[18] Java was the third most popular programming language in 2022[update] according to GitHub.[19] Although still widely popular, there has been a gradual decline in use of Java in recent years with other languages using JVM gaining popularity.[20] [18] [ ] [update] GitHub [19] [ ] other languages using JVM [20] [ ] Java was originally developed by James Gosling at Sun Microsystems. It was released in May 1995 as a core component of Sun's Java platform. The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the Java Community Process, Sun had relicensed most of its Java technologies under the GPL-2.0-only license. Oracle offers its own HotSpot Java Virtual Machine, however the official reference implementation is the OpenJDK JVM which is free open-source software and used by most developers and is the default JVM for almost all Linux distributions. James Gosling Sun Microsystems Java platform reference implementation compilers class libraries proprietary licenses Java Community Process relicensed GPL-2.0-only Oracle HotSpot reference implementation OpenJDK As of September 2024[update], Java 23 is the latest version (Java 22, and 20 are no longer maintained). Java 8, 11, 17, and 21 are previous LTS versions still officially supported. [update] Java 23 History Java (software platform) \u00a7 History James Gosling James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991.[21] Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time.[22] The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee, a type of coffee from Indonesia.[23] Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar.[24] James Gosling Patrick Naughton [21] [ ] [22] [ ] Oak oak Java coffee Indonesia [23] [ ] C C++ [24] [ ] Sun Microsystems released the first public implementation as Java 1.0 in 1996.[25] It promised write once, run anywhere (WORA) functionality, providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification.[26] With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 \u2013 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively. [25] [ ] write once, run anywhere platforms web browsers Java applets in Java Arthur van Hoff [26] [ ] J2EE Java EE Java ME Java SE In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process.[27][28][29] Java remains a de facto standard, controlled through the Java Community Process.[30] At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. ISO/IEC JTC 1 Ecma International [27] [ ] [28] [ ] [29] [ ] de facto standard Java Community Process [30] [ ] proprietary software On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software (FOSS), under the terms of the GPL-2.0-only license. On May 8, 2007, Sun finished the process, making all of its JVM's core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.[31] free and open-source software GPL-2.0-only free software [31] [ ] Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an evangelist.[32] Following Oracle Corporation's acquisition of Sun Microsystems in 2009\u201310, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency.[33] This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see the Android section). [32] [ ] Oracle Corporation [33] [ ] Android SDK Android On April 2, 2010, James Gosling resigned from Oracle.[34] Oracle [34] [ ] In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin.[35] [35] [ ] Java software runs on everything from laptops to data centers, game consoles to scientific supercomputers.[36] data centers game consoles supercomputers [36] [ ] Oracle (and others) highly recommend uninstalling outdated and unsupported versions of Java, due to unresolved security issues in older versions.[37] Oracle [37] [ ] Principles There were five primary goals in creating the Java language:[17] [17] [ ] It must be simple, object-oriented, and familiar. object-oriented It must be robust and secure. robust It must be architecture-neutral and portable. It must execute with high performance. It must be interpreted, threaded, and dynamic. interpreted threaded dynamic Versions Java version history As of November 2024[update], Java 8, 11, 17, and 21 are supported as long-term support (LTS) versions, with Java 25, releasing in September 2025, as the next scheduled LTS version.[38] [update] long-term support [38] [ ] Oracle released the last zero-cost public update for the legacy version Java 8 LTS in January 2019 for commercial use, although it will otherwise still support Java 8 with public updates for personal use indefinitely. Other vendors such as Adoptium continue to offer free builds of OpenJDK's long-term support (LTS) versions. These builds may include additional security patches and bug fixes.[39] legacy Java 8 Adoptium [39] [ ] Major release versions of Java, along with their release dates: Beta [40] [ ] [41] [ ] [42] [ ] [43] [ ] Editions Free Java implementations \u00a7 Class library Java platform Java Card Java Card Java ME (Micro Edition) Java ME Java SE (Standard Edition) Java SE Jakarta EE (Enterprise Edition) Jakarta EE JavaFX (bundled in Oracle's JDK from versions 8 to 10 but separately since 11) JavaFX PersonalJava (Discontinued) PersonalJava v v t t e e Sun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs so that they belong to one of the platforms. The platforms are: APIs Java Card for smart-cards.[44] Java Card [44] [ ] Java Platform, Micro Edition (Java ME) \u2013 targeting environments with limited resources.[45] Java Platform, Micro Edition [45] [ ] Java Platform, Standard Edition (Java SE) \u2013 targeting workstation environments.[46] Java Platform, Standard Edition [46] [ ] Java Platform, Enterprise Edition (Java EE) \u2013 targeting large distributed enterprise or Internet environments.[47] Java Platform, Enterprise Edition [47] [ ] The classes in the Java APIs are organized into separate groups called packages. Each package contains a set of related interfaces, classes, subpackages and exceptions. classes packages interfaces exceptions Sun also provided an edition called Personal Java that has been superseded by later, standards-based Java ME configuration-profile pairings. Personal Java Execution system Java JVM and bytecode Java (software platform) Java virtual machine One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to architecture-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a virtual machine (VM) written specifically for the host hardware. End-users commonly use a Java Runtime Environment (JRE) installed on their device for standalone Java applications or a web browser for Java applets. portability Java bytecode machine code virtual machine End-users Java Runtime Environment Java applets Standard libraries provide a generic way to access host-specific features such as graphics, threading, and networking. threading networking The use of universal bytecode makes porting simple. However, the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables. Just-in-time (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java's Hotspot compiler is actually two compilers in one; and with GraalVM (included in e.g. Java 11, but removed as of Java 16) allowing tiered compilation.[48] Java itself is platform-independent and is adapted to the particular platform it is to run on by a Java virtual machine (JVM), which translates the Java bytecode into the platform's machine language.[49] interpreting executables Just-in-time GraalVM tiered compilation [48] [ ] Java virtual machine Java bytecode [49] [ ] Performance Java performance Programs written in Java have a reputation for being slower and requiring more memory than those written in C++.[50][51] However, Java programs' execution speed improved significantly with the introduction of just-in-time compilation in 1997/1998 for Java 1.1,[52] the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as HotSpot becoming Sun's default JVM in 2000. With Java 1.5, the performance was improved with the addition of the java.util.concurrent package, including lock-free implementations of the ConcurrentMaps and other multi-core collections, and it was improved further with Java 1.6. C++ [50] [ ] [51] [ ] just-in-time compilation Java 1.1 [52] [ ] HotSpot lock-free ConcurrentMaps Non-JVM Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine,[53] and some ARM-based processors could have hardware support for executing Java bytecode through their Jazelle option, though support has mostly been dropped in current implementations of ARM. [53] [ ] ARM Jazelle Automatic memory management Java uses an automatic garbage collector to manage memory in the object lifecycle. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory becomes eligible to be freed automatically by the garbage collector. Something similar to a memory leak may still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use.[54] If methods for a non-existent object are called, a null pointer exception is thrown.[55][56] automatic garbage collector object lifecycle unreachable memory memory leak [54] [ ] null pointer [55] [ ] [56] [ ] One of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a memory leak occurs.[54] If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of smart pointers, but these add overhead and complexity. Garbage collection does not prevent logical memory leaks, i.e. those where the memory is still referenced but never used.[54] stack heap memory leak [54] [ ] smart pointers logical memory [54] [ ] Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java. Java does not support C/C++ style pointer arithmetic, where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security. pointer arithmetic As in C++ and some other object-oriented languages, variables of Java's primitive data types are either stored directly in fields (for objects) or on the stack (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see escape analysis). This was a conscious decision by Java's designers for performance reasons. primitive data types stack escape analysis Java contains multiple types of garbage collectors. Since Java 9, HotSpot uses the Garbage First Garbage Collector (G1GC) as the default.[57] However, there are also several other garbage collectors that can be used to manage the heap, such as the Z Garbage Collector (ZGC) introduced in Java 11, and Shenandoah GC, introduced in Java 12 but unavailable in Oracle-produced OpenJDK builds. Shenandoah is instead available in third-party builds of OpenJDK, such as Eclipse Temurin. For most applications in Java, G1GC is sufficient. In prior versions of Java, such as Java 8, the Parallel Garbage Collector was used as the default garbage collector. Garbage First Garbage Collector [57] [ ] Eclipse Temurin Parallel Garbage Collector Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kinds of resources, like network or database connections, file handles, etc., especially in the presence of exceptions. Syntax Java syntax Gephi The syntax of Java is largely influenced by C++ and C. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language.[17] All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, boolean values, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the printf method). C++ C [17] [ ] boolean values printf Unlike C++, Java does not support operator overloading[58] or multiple inheritance for classes, though multiple inheritance is supported for interfaces.[59] operator overloading [58] [ ] multiple inheritance interfaces [59] [ ] Java uses comments similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javadoc commenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some integrated development environments (IDEs) such as Eclipse to allow developers to access documentation within the IDE. comments Javadoc integrated development environments Eclipse Hello world The following is a simple example of a \"Hello, World!\" program that writes a message to the standard output: \"Hello, World!\" program standard output public class Example { public static void main ( String [] args ) { System . out . println ( \"Hello World!\" ); } } Special classes verification Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: \"Java\" programming language \u2013 news \u00b7 newspapers \u00b7 books \u00b7 scholar \u00b7 JSTOR improve this article adding citations to reliable sources Find sources: \"Java\" programming language \u2013 news \u00b7 newspapers \u00b7 books \u00b7 scholar \u00b7 JSTOR \"Java\" programming language news newspapers books scholar JSTOR (May 2019) May 2019 (Learn how and when to remove this message) Learn how and when to remove this message Applet Java applet Java applets are programs embedded in other applications, mainly in web pages displayed in web browsers. The Java applet API was deprecated with the release of Java 9 in 2017.[60][61] embedded [60] [ ] [61] [ ] Servlet Java servlet Java servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side Java EE components that generate responses to requests from clients. Most of the time, this means generating HTML pages in response to HTTP requests, although there are a number of other standard servlet classes available, for example for WebSocket communication. Java servlet server-side clients HTML HTTP WebSocket The Java servlet API has to some extent been superseded (but still used under the hood) by two standard Java technologies for web services: the Java API for RESTful Web Services (JAX-RS 2.0) useful for AJAX, JSON and REST services, and Java API for RESTful Web Services the Java API for XML Web Services (JAX-WS) useful for SOAP Web Services. Java API for XML Web Services SOAP Web Services Typical implementations of these APIs on Application Servers or Servlet Containers use a standard servlet for handling all interactions with the HTTP requests and responses that delegate to the web service methods for the actual business logic. HTTP JavaServer Pages JavaServer Pages JavaServer Pages (JSP) are server-side Java EE components that generate responses, typically HTML pages, to HTTP requests from clients. JSPs embed Java code in an HTML page by using the special delimiters <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response.[62] JSP server-side HTML HTTP clients delimiters [62] [ ] Swing application Swing (Java) Swing is a graphical user interface library for the Java SE platform. It is possible to specify a different look and feel through the pluggable look and feel system of Swing. Clones of Windows, GTK+, and Motif are supplied by Sun. Apple also provides an Aqua look and feel for macOS. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms.[63] Swing library pluggable look and feel Windows GTK+ Motif Apple Aqua macOS GUI widget [63] [ ] JavaFX application JavaFX JavaFX is a software platform for creating and delivering desktop applications, as well as rich web applications that can run across a wide variety of devices. JavaFX is intended to replace Swing as the standard graphical user interface (GUI) library for Java SE, but since JDK 11 JavaFX has not been in the core JDK and instead in a separate module.[64] JavaFX has support for desktop computers and web browsers on Microsoft Windows, Linux, and macOS. JavaFX does not have support for native OS look and feels.[65] JavaFX software platform desktop applications rich web applications Swing graphical user interface Java SE [64] [ ] desktop computers web browsers Microsoft Windows Linux macOS [65] [ ] Generics Generics in Java In 2004, generics were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (ClassCastExceptions) from occurring, it would be type safe. generics type safe In 2016, the type system of Java was proven unsound in that it is possible to use generics to construct classes and methods that allow assignment of an instance of one class to a variable of another unrelated class. Such code is accepted by the compiler, but fails at run time with a class cast exception.[66] unsound [66] [ ] Criticism Criticism of Java Criticisms directed at Java include the implementation of generics,[67] speed,[50] the handling of unsigned numbers,[68] the implementation of floating-point arithmetic,[69] and a history of security vulnerabilities in the primary Java VM implementation HotSpot.[70] Developers have criticized the complexity and verbosity of the Java Persistence API (JPA), a standard part of Java EE. This has led to increased adoption of higher-level abstractions like Spring Data JPA, which aims to simplify database operations and reduce boilerplate code. The growing popularity of such frameworks suggests limitations in the standard JPA implementation's ease-of-use for modern Java development.[71] [67] [ ] [50] [ ] [68] [ ] [69] [ ] HotSpot [70] [ ] [71] [ ] Class libraries Java Class Library The Java Class Library is the standard library, developed to support application development in Java. It is controlled by Oracle in cooperation with others through the Java Community Process program.[72] Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy during the 2010s.[73] The class library contains features such as: Java Class Library standard library Oracle Java Community Process [72] [ ] [73] [ ] The core libraries, which include: Input/output (I/O or IO)[74] and non-blocking I/O (NIO), or IO/NIO[75] Networking[76] (new user agent (HTTP client) since Java 11[77]) Reflective programming (reflection) Concurrent computing (concurrency)[74] Generics Scripting, Compiler Functional programming (Lambda, streaming) Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks[78] XML Processing (Parsing, Transforming, Validating) libraries Security[79] Internationalization and localization libraries[80] Input/output (I/O or IO)[74] and non-blocking I/O (NIO), or IO/NIO[75] Input/output [74] [ ] non-blocking I/O [75] [ ] Networking[76] (new user agent (HTTP client) since Java 11[77]) Networking [76] [ ] user agent [77] [ ] Reflective programming (reflection) Reflective programming Concurrent computing (concurrency)[74] Concurrent computing [74] [ ] Generics Generics Scripting, Compiler Functional programming (Lambda, streaming) Functional programming Lambda Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks[78] Collection libraries data structures lists dictionaries trees sets queues double-ended queue stacks [78] [ ] XML Processing (Parsing, Transforming, Validating) libraries XML Security[79] Security [79] [ ] Internationalization and localization libraries[80] Internationalization and localization [80] [ ] The integration libraries, which allow the application writer to communicate with external systems. These libraries include: The Java Database Connectivity (JDBC) API for database access Java Naming and Directory Interface (JNDI) for lookup and discovery Java remote method invocation (RMI) and Common Object Request Broker Architecture (CORBA) for distributed application development Java Management Extensions (JMX) for managing and monitoring applications The Java Database Connectivity (JDBC) API for database access Java Database Connectivity API Java Naming and Directory Interface (JNDI) for lookup and discovery Java Naming and Directory Interface Java remote method invocation (RMI) and Common Object Request Broker Architecture (CORBA) for distributed application development Java remote method invocation Common Object Request Broker Architecture Java Management Extensions (JMX) for managing and monitoring applications Java Management Extensions User interface libraries, which include: The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry APIs for audio capture, processing, and playback JavaFX User interface The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components native Abstract Window Toolkit GUI The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry Swing APIs for audio capture, processing, and playback JavaFX JavaFX A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third-party applications are executed Plugins, which enable applets to be run in web browsers applets Java Web Start, which allows Java applications to be efficiently distributed to end users across the Internet Java Web Start end users Licensing and documentation Documentation Javadoc Javadoc is a comprehensive documentation system, created by Sun Microsystems. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are /** and */, whereas the normal multi-line comments in Java are delimited by /* and */, and single-line comments start with //.[81] Sun Microsystems [81] [ ] Implementations Free Java implementations List of Java compilers verification Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: \"Java\" programming language \u2013 news \u00b7 newspapers \u00b7 books \u00b7 scholar \u00b7 JSTOR improve this article adding citations to reliable sources Find sources: \"Java\" programming language \u2013 news \u00b7 newspapers \u00b7 books \u00b7 scholar \u00b7 JSTOR \"Java\" programming language news newspapers books scholar JSTOR (September 2023) September 2023 (Learn how and when to remove this message) Learn how and when to remove this message Oracle Corporation owns the official implementation of the Java SE platform, due to its acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Windows, macOS, Linux, and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organizations, the Oracle implementation is the de facto standard. Oracle Corporation Sun Microsystems Windows macOS Linux Solaris Ecma International de facto standard The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger. Oracle has also released GraalVM, a high performance Java dynamic compiler and interpreter. Java Development Kit Java compiler Javadoc Jar debugger GraalVM OpenJDK is another Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation. OpenJDK The goal of Java is to make all implementations of Java compatible. Historically, Sun's trademark license for usage of the Java brand insists that all implementations be compatible. This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support Java remote method invocation (RMI) or Java Native Interface (JNI) and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun.[82] As a result, Microsoft no longer ships Java with Windows. Microsoft Java remote method invocation Java Native Interface [82] [ ] Windows Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications. Java EE Use outside the Java platform The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications with its own GUI system. Java platform Android SDK Android applications Android The Java language is a key pillar in Android, an open source mobile operating system. Although Android, built on the Linux kernel, is written largely in C, the Android SDK uses the Java language as the basis for Android applications but does not use any of its standard GUI, SE, ME or other established Java standards.[83] The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as smartphones and tablet computers. Depending on the Android version, the bytecode is either interpreted by the Dalvik virtual machine or compiled into native code by the Android Runtime. Android open source mobile operating system Linux kernel Android SDK [83] [ ] smartphones tablet computers Dalvik virtual machine Android Runtime Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java 6 and some Java 7 features, offering an implementation compatible with the standard library (Apache Harmony). Apache Harmony Controversy Oracle America, Inc. v. Google, Inc. The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle's copyrights by the use of Java in Android devices.[84] District Judge William Alsup ruled on May 31, 2012, that APIs cannot be copyrighted,[85] but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014.[86] On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use.[87] In March 2018, this ruling was overturned by the Appeals Court, which sent down the case of determining the damages to federal court in San Francisco.[88] Google filed a petition for writ of certiorari with the Supreme Court of the United States in January 2019 to challenge the two rulings that were made by the Appeals Court in Oracle's favor.[89] On April 5, 2021, the Court ruled 6\u20132 in Google's favor, that its use of Java APIs should be considered fair use. However, the court refused to rule on the copyrightability of APIs, choosing instead to determine their ruling by considering Java's API copyrightable \"purely for argument's sake.\"[90] [84] [ ] William Alsup [85] [ ] [86] [ ] [87] [ ] [88] [ ] writ of certiorari Supreme Court of the United States [89] [ ] fair use [90] [ ] See also Computer programming portal Computer programming portal Computer programming portal C# C# C++ C++ Dalvik, used in old Android versions, replaced by non-JIT Android Runtime Dalvik Android Runtime Java Heterogeneous Distributed Computing Java Heterogeneous Distributed Computing List of Java APIs List of Java APIs List of Java frameworks List of Java frameworks List of JVM languages List of JVM languages List of Java virtual machines List of Java virtual machines Comparison of C# and Java Comparison of C# and Java Comparison of Java and C++ Comparison of Java and C++ Comparison of programming languages Comparison of programming languages References ^ Binstock, Andrew (May 20, 2015). \"Java's 20 Years of Innovation\". Forbes. Archived from the original on March 14, 2016. Retrieved March 18, 2016. ^ ^ Binstock, Andrew (May 20, 2015). \"Java's 20 Years of Innovation\". Forbes. Archived from the original on March 14, 2016. Retrieved March 18, 2016. \"Java's 20 Years of Innovation\" Archived . Retrieved March 18, 2016 March 18, ^ a b c d Barbara Liskov with John Guttag (2000). Program Development in Java \u2013 Abstraction, Specification, and Object-Oriented Design. USA, Addison Wesley. ISBN 978-0-201-65768-5. ^ a b c d a b c d Barbara Liskov with John Guttag (2000). Program Development in Java \u2013 Abstraction, Specification, and Object-Oriented Design. USA, Addison Wesley. ISBN 978-0-201-65768-5. Barbara Liskov John Guttag ISBN 978-0-201-65768-5 ^ Chaudhary, Harry H. (July 28, 2014). \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\". Archived from the original on September 29, 2023. Retrieved May 29, 2016. ^ ^ Chaudhary, Harry H. (July 28, 2014). \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\". Archived from the original on September 29, 2023. Retrieved May 29, 2016. \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\" Archived . Retrieved May 29, 2016 May 29, ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. [1] Archived March 19, 2011, at the Wayback Machine [2] Archived January 7, 2006, at the Wayback Machine ^ ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. [1] Archived March 19, 2011, at the Wayback Machine [2] Archived January 7, 2006, at the Wayback Machine enhanced for loop autoboxing varargs annotations C# [1] Archived Wayback Machine [2] Archived Wayback Machine ^ Gosling, James; McGilton, Henry (May 1996). \"The Java Language Environment\". Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ ^ Gosling, James; McGilton, Henry (May 1996). \"The Java Language Environment\". Archived from the original on May 6, 2014. Retrieved May 6, 2014. \"The Java Language Environment\" Archived . Retrieved May 6, 2014 May 6, ^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. \"The Java Language Specification, 2nd Edition\". Archived from the original on August 5, 2011. Retrieved February 8, 2008. ^ ^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. \"The Java Language Specification, 2nd Edition\". Archived from the original on August 5, 2011. Retrieved February 8, 2008. \"The Java Language Specification, 2nd Edition\" Archived . Retrieved February 8, 2008 February 8, ^ \"The A-Z of Programming Languages: Modula-3\". Computerworld. Archived from the original on January 5, 2009. Retrieved June 9, 2010. ^ ^ \"The A-Z of Programming Languages: Modula-3\". Computerworld. Archived from the original on January 5, 2009. Retrieved June 9, 2010. \"The A-Z of Programming Languages: Modula-3\" the original . Retrieved June 9, 2010 June 9, ^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). \"Niklaus Wirth's lecture at the Polytechnic Museum in Moscow\". Archived from the original on December 1, 2020. Retrieved November 20, 2011.), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes \u2013 all these key overall design features are shared by Java and Oberon. ^ ^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). \"Niklaus Wirth's lecture at the Polytechnic Museum in Moscow\". Archived from the original on December 1, 2020. Retrieved November 20, 2011.), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes \u2013 all these key overall design features are shared by Java and Oberon. Niklaus Wirth \"Niklaus Wirth's lecture at the Polytechnic Museum in Moscow\" Archived . Retrieved November 20, 2011 November 20, ^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C's protocol) and primitive wrapper classes. [3] Archived July 13, 2011, at the Wayback Machine ^ ^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C's protocol) and primitive wrapper classes. [3] Archived July 13, 2011, at the Wayback Machine Patrick Naughton Objective-C protocol [3] Archived Wayback Machine ^ TechMetrix Research (1999). \"History of Java\" (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name green and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code. ^ ^ TechMetrix Research (1999). \"History of Java\" (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name green and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code. \"History of Java\" (PDF) the original (PDF) UCSD Pascal ^ \"A Conversation with James Gosling \u2013 ACM Queue\". Queue.acm.org. August 31, 2004. Archived from the original on July 16, 2015. Retrieved June 9, 2010. ^ ^ \"A Conversation with James Gosling \u2013 ACM Queue\". Queue.acm.org. August 31, 2004. Archived from the original on July 16, 2015. Retrieved June 9, 2010. \"A Conversation with James Gosling \u2013 ACM Queue\" Archived . Retrieved June 9, 2010 June 9, ^ The Java Language Team. About Microsoft's \"Delegates\" (White Paper). JavaSoft, Sun Microsystems, Inc. Archived from the original on June 27, 2012. In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs. ^ ^ The Java Language Team. About Microsoft's \"Delegates\" (White Paper). JavaSoft, Sun Microsystems, Inc. Archived from the original on June 27, 2012. In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs. About Microsoft's \"Delegates\" the original ^ \"Chapel spec (Acknowledgements)\" (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016. ^ ^ \"Chapel spec (Acknowledgements)\" (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016. \"Chapel spec (Acknowledgements)\" (PDF) Archived (PDF) . Retrieved January 14, 2016 January 14, ^ \"Gambas Documentation Introduction\". Gambas Website. Archived from the original on October 9, 2017. Retrieved October 9, 2017. ^ ^ \"Gambas Documentation Introduction\". Gambas Website. Archived from the original on October 9, 2017. Retrieved October 9, 2017. \"Gambas Documentation Introduction\" Archived . Retrieved October 9, 2017 October 9, ^ \"Facebook Q&A: Hack brings static typing to PHP world\". InfoWorld. March 26, 2014. Archived from the original on February 13, 2015. Retrieved January 11, 2015. ^ ^ \"Facebook Q&A: Hack brings static typing to PHP world\". InfoWorld. March 26, 2014. Archived from the original on February 13, 2015. Retrieved January 11, 2015. \"Facebook Q&A: Hack brings static typing to PHP world\" Archived . Retrieved January 11, 2015 January 11, ^ \"Write once, run anywhere?\". Computer Weekly. May 2, 2002. Archived from the original on August 13, 2021. Retrieved July 27, 2009. ^ ^ \"Write once, run anywhere?\". Computer Weekly. May 2, 2002. Archived from the original on August 13, 2021. Retrieved July 27, 2009. \"Write once, run anywhere?\" Computer Weekly Archived . Retrieved July 27, 2009 July 27, ^ a b c \"1.2 Design Goals of the Java Programming Language\". Oracle. January 1, 1999. Archived from the original on January 23, 2013. Retrieved January 14, 2013. ^ a b c a b c \"1.2 Design Goals of the Java Programming Language\". Oracle. January 1, 1999. Archived from the original on January 23, 2013. Retrieved January 14, 2013. \"1.2 Design Goals of the Java Programming Language\" Archived . Retrieved January 14, 2013 January 14, ^ Melanson, Mike (August 9, 2022). \"Don't call it a comeback: Why Java is still champ\". GitHub. Archived from the original on August 25, 2023. Retrieved October 15, 2023. ^ ^ Melanson, Mike (August 9, 2022). \"Don't call it a comeback: Why Java is still champ\". GitHub. Archived from the original on August 25, 2023. Retrieved October 15, 2023. \"Don't call it a comeback: Why Java is still champ\" GitHub Archived . Retrieved October 15, 2023 October 15, ^ \"The top programming languages\". The State of the Octoverse. GitHub. Archived from the original on August 2, 2023. Retrieved October 15, 2023. ^ ^ \"The top programming languages\". The State of the Octoverse. GitHub. Archived from the original on August 2, 2023. Retrieved October 15, 2023. \"The top programming languages\" GitHub Archived . Retrieved October 15, 2023 October 15, ^ McMillan, Robert (August 1, 2013). \"Is Java Losing Its Mojo?\". Wired. Archived from the original on February 15, 2017. Retrieved October 15, 2023. ^ ^ McMillan, Robert (August 1, 2013). \"Is Java Losing Its Mojo?\". Wired. Archived from the original on February 15, 2017. Retrieved October 15, 2023. \"Is Java Losing Its Mojo?\" \"Is Java Losing Its Mojo?\" Wired Archived . Retrieved October 15, 2023 October 15, ^ Byous, Jon (c. 1998). \"Java technology: The early years\". Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved April 22, 2005. ^ ^ Byous, Jon (c. 1998). \"Java technology: The early years\". Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved April 22, 2005. \"Java technology: The early years\" Sun Microsystems the original . Retrieved April 22, 2005 April 22, ^ Object-oriented programming \"The History of Java Technology\". Sun Developer Network. c. 1995. Archived from the original on February 10, 2010. Retrieved April 30, 2010. ^ ^ Object-oriented programming \"The History of Java Technology\". Sun Developer Network. c. 1995. Archived from the original on February 10, 2010. Retrieved April 30, 2010. \"The History of Java Technology\" the original . Retrieved April 30, 2010 April 30, ^ Murphy, Kieron (October 4, 1996). \"So why did they decide to call it Java?\". JavaWorld. Archived from the original on July 13, 2020. Retrieved July 13, 2020. ^ ^ Murphy, Kieron (October 4, 1996). \"So why did they decide to call it Java?\". JavaWorld. Archived from the original on July 13, 2020. Retrieved July 13, 2020. \"So why did they decide to call it Java?\" JavaWorld Archived . Retrieved July 13, 2020 July 13, ^ Kabutz, Heinz; Once Upon an Oak Archived April 13, 2007, at the Wayback Machine. Artima. Retrieved April 29, 2007. ^ ^ Kabutz, Heinz; Once Upon an Oak Archived April 13, 2007, at the Wayback Machine. Artima. Retrieved April 29, 2007. Once Upon an Oak Archived Wayback Machine ^ \"JAVASOFT SHIPS JAVA 1.0\". Archived from the original on March 10, 2007. Retrieved May 13, 2018. ^ ^ \"JAVASOFT SHIPS JAVA 1.0\". Archived from the original on March 10, 2007. Retrieved May 13, 2018. \"JAVASOFT SHIPS JAVA 1.0\" the original . Retrieved May 13, 2018 May 13, ^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. ^ ^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. Object-oriented Programming with Java: Essentials and Applications ^ \"JSG \u2013 Java Study Group\". open-std.org. Archived from the original on August 25, 2006. Retrieved August 2, 2006. ^ ^ \"JSG \u2013 Java Study Group\". open-std.org. Archived from the original on August 25, 2006. Retrieved August 2, 2006. \"JSG \u2013 Java Study Group\" Archived . Retrieved August 2, 2006 August 2, ^ \"Why Java Was \u2013 Not \u2013 Standardized Twice\" (PDF). Archived (PDF) from the original on January 13, 2014. Retrieved June 3, 2018. ^ ^ \"Why Java Was \u2013 Not \u2013 Standardized Twice\" (PDF). Archived (PDF) from the original on January 13, 2014. Retrieved June 3, 2018. \"Why Java Was \u2013 Not \u2013 Standardized Twice\" (PDF) Archived (PDF) . Retrieved June 3, 2018 June 3, ^ \"What is ECMA\u2014and why Microsoft cares\". ZDNet. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ ^ \"What is ECMA\u2014and why Microsoft cares\". ZDNet. Archived from the original on May 6, 2014. Retrieved May 6, 2014. \"What is ECMA\u2014and why Microsoft cares\" ZDNet Archived . Retrieved May 6, 2014 May 6, ^ \"Java Community Process website\". Jcp.org. May 24, 2010. Archived from the original on August 8, 2006. Retrieved June 9, 2010. ^ ^ \"Java Community Process website\". Jcp.org. May 24, 2010. Archived from the original on August 8, 2006. Retrieved June 9, 2010. \"Java Community Process website\" Archived . Retrieved June 9, 2010 June 9, ^ \"JAVAONE: Sun \u2013 The bulk of Java is open sourced\". GrnLight.net. Archived from the original on May 27, 2014. Retrieved May 26, 2014. ^ ^ \"JAVAONE: Sun \u2013 The bulk of Java is open sourced\". GrnLight.net. Archived from the original on May 27, 2014. Retrieved May 26, 2014. \"JAVAONE: Sun \u2013 The bulk of Java is open sourced\" Archived . Retrieved May 26, 2014 May 26, ^ \"Sun's Evolving Role as Java Evangelist\". O'Reilly Media. Archived from the original on September 15, 2010. Retrieved August 2, 2009. ^ ^ \"Sun's Evolving Role as Java Evangelist\". O'Reilly Media. Archived from the original on September 15, 2010. Retrieved August 2, 2009. \"Sun's Evolving Role as Java Evangelist\" O'Reilly Media Archived . Retrieved August 2, 2009 August 2, ^ \"Oracle and Java\". oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved August 23, 2010. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency. ^ ^ \"Oracle and Java\". oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved August 23, 2010. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency. \"Oracle and Java\" the original . Retrieved August 23, 2010 August 23, ^ Gosling, James (April 9, 2010). \"Time to move on...\" On a New Road. Archived from the original on November 5, 2010. Retrieved November 16, 2011. ^ ^ Gosling, James (April 9, 2010). \"Time to move on...\" On a New Road. Archived from the original on November 5, 2010. Retrieved November 16, 2011. Gosling, James \"Time to move on...\" the original . Retrieved November 16, 2011 November 16, ^ Topic, Dalibor. \"Moving to a Plugin-Free Web\". Archived from the original on March 16, 2016. Retrieved March 15, 2016. ^ ^ Topic, Dalibor. \"Moving to a Plugin-Free Web\". Archived from the original on March 16, 2016. Retrieved March 15, 2016. \"Moving to a Plugin-Free Web\" Archived . Retrieved March 15, 2016 March 15, ^ \"Learn About Java Technology\". Oracle. Archived from the original on November 24, 2011. Retrieved November 21, 2011. ^ ^ \"Learn About Java Technology\". Oracle. Archived from the original on November 24, 2011. Retrieved November 21, 2011. \"Learn About Java Technology\" Archived . Retrieved November 21, 2011 November 21, ^ \"Why should I uninstall older versions of Java from my system?\". Oracle. Archived from the original on February 12, 2018. Retrieved September 24, 2021. ^ ^ \"Why should I uninstall older versions of Java from my system?\". Oracle. Archived from the original on February 12, 2018. Retrieved September 24, 2021. \"Why should I uninstall older versions of Java from my system?\" Archived . Retrieved September 24, 2021 September 24, ^ \"Oracle Java SE Support Roadmap\". Oracle. September 13, 2021. Archived from the original on September 19, 2021. Retrieved September 18, 2021. ^ ^ \"Oracle Java SE Support Roadmap\". Oracle. September 13, 2021. Archived from the original on September 19, 2021. Retrieved September 18, 2021. \"Oracle Java SE Support Roadmap\" Archived . Retrieved September 18, 2021 September 18, ^ \"Temurin\u2122 Support; Adoptium\". adoptium.net. Archived from the original on March 29, 2024. Retrieved March 29, 2024. ^ ^ \"Temurin\u2122 Support; Adoptium\". adoptium.net. Archived from the original on March 29, 2024. Retrieved March 29, 2024. \"Temurin\u2122 Support; Adoptium\" Archived . Retrieved March 29, 2024 March 29, ^ \"JAVASOFT SHIPS JAVA 1.0\". sun.com. Archived from the original on March 10, 2007. Retrieved February 5, 2008. ^ ^ \"JAVASOFT SHIPS JAVA 1.0\". sun.com. Archived from the original on March 10, 2007. Retrieved February 5, 2008. \"JAVASOFT SHIPS JAVA 1.0\" the original . Retrieved February 5, 2008 February 5, ^ Chander, Sharat. \"Introducing Java SE 11\". oracle.com. Archived from the original on September 26, 2018. Retrieved September 26, 2018. ^ ^ Chander, Sharat. \"Introducing Java SE 11\". oracle.com. Archived from the original on September 26, 2018. Retrieved September 26, 2018. \"Introducing Java SE 11\" Archived . Retrieved September 26, 2018 September 26, ^ Chander, Sharat (September 15, 2020). \"The Arrival of Java 15!\". Oracle. Archived from the original on September 16, 2020. Retrieved September 15, 2020. ^ ^ Chander, Sharat (September 15, 2020). \"The Arrival of Java 15!\". Oracle. Archived from the original on September 16, 2020. Retrieved September 15, 2020. \"The Arrival of Java 15!\" Oracle Archived . Retrieved September 15, 2020 September 15, ^ \"JDK 21\". openjdk.org. Archived from the original on September 20, 2023. Retrieved September 20, 2023. ^ ^ \"JDK 21\". openjdk.org. Archived from the original on September 20, 2023. Retrieved September 20, 2023. \"JDK 21\" Archived . Retrieved September 20, 2023 September 20, ^ \"Java Card Overview\". Oracle Technology Network. Oracle. Archived from the original on January 7, 2015. Retrieved December 18, 2014. ^ ^ \"Java Card Overview\". Oracle Technology Network. Oracle. Archived from the original on January 7, 2015. Retrieved December 18, 2014. \"Java Card Overview\" Archived . Retrieved December 18, 2014 December 18, ^ \"Java Platform, Micro Edition (Java ME)\". Oracle Technology Network. Oracle. Archived from the original on January 4, 2015. Retrieved December 18, 2014. ^ ^ \"Java Platform, Micro Edition (Java ME)\". Oracle Technology Network. Oracle. Archived from the original on January 4, 2015. Retrieved December 18, 2014. \"Java Platform, Micro Edition (Java ME)\" Archived . Retrieved December 18, 2014 December 18, ^ \"Java SE\". Oracle Technology Network. Oracle. Archived from the original on December 24, 2014. Retrieved December 18, 2014. ^ ^ \"Java SE\". Oracle Technology Network. Oracle. Archived from the original on December 24, 2014. Retrieved December 18, 2014. \"Java SE\" Archived . Retrieved December 18, 2014 December 18, ^ \"Java Platform, Enterprise Edition (Java EE)\". Oracle Technology Network. Oracle. Archived from the original on December 17, 2014. Retrieved December 18, 2014. ^ ^ \"Java Platform, Enterprise Edition (Java EE)\". Oracle Technology Network. Oracle. Archived from the original on December 17, 2014. Retrieved December 18, 2014. \"Java Platform, Enterprise Edition (Java EE)\" Archived . Retrieved December 18, 2014 December 18, ^ \"Deep Dive Into the New Java JIT Compiler \u2013 Graal | Baeldung\". www.baeldung.com. August 6, 2021. Archived from the original on October 28, 2021. Retrieved October 13, 2021. ^ ^ \"Deep Dive Into the New Java JIT Compiler \u2013 Graal | Baeldung\". www.baeldung.com. August 6, 2021. Archived from the original on October 28, 2021. Retrieved October 13, 2021. \"Deep Dive Into the New Java JIT Compiler \u2013 Graal | Baeldung\" Archived . Retrieved October 13, 2021 October 13, ^ \"Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?\". Programmer Interview. Archived from the original on January 19, 2015. Retrieved January 19, 2015. ^ ^ \"Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?\". Programmer Interview. Archived from the original on January 19, 2015. Retrieved January 19, 2015. \"Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?\" Archived . Retrieved January 19, 2015 January 19, ^ a b Jelovic, Dejan. \"Why Java will always be slower than C++\". Archived from the original on February 11, 2008. Retrieved February 15, 2008. ^ a b a b Jelovic, Dejan. \"Why Java will always be slower than C++\". Archived from the original on February 11, 2008. Retrieved February 15, 2008. \"Why Java will always be slower than C++\" the original . Retrieved February 15, 2008 February 15, ^ Hundt, Robert. \"Loop Recognition in C++/Java/Go/Scala\" (PDF). Archived (PDF) from the original on November 16, 2011. Retrieved July 12, 2012. ^ ^ Hundt, Robert. \"Loop Recognition in C++/Java/Go/Scala\" (PDF). Archived (PDF) from the original on November 16, 2011. Retrieved July 12, 2012. \"Loop Recognition in C++/Java/Go/Scala\" (PDF) Archived (PDF) . Retrieved July 12, 2012 July 12, ^ \"Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1\". Archived from the original on June 28, 2010. Retrieved August 1, 2009. ^ ^ \"Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1\". Archived from the original on June 28, 2010. Retrieved August 1, 2009. \"Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1\" the original . Retrieved August 1, 2009 August 1, ^ Salcic, Zoran; Park, Heejong; Teich, J\u00fcrgen; Malik, Avinash; Nadeem, Muhammad (July 22, 2017). \"Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ\". ACM Transactions on Design Automation of Electronic Systems. 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. S2CID 11150290. ^ ^ Salcic, Zoran; Park, Heejong; Teich, J\u00fcrgen; Malik, Avinash; Nadeem, Muhammad (July 22, 2017). \"Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ\". ACM Transactions on Design Automation of Electronic Systems. 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. S2CID 11150290. doi 10.1145/3073416 ISSN 1084-4309 S2CID 11150290 ^ a b c Bloch 2018, p. 26-28, \u00a7Item 7: Eliminate obsolete object references. ^ a b c a b c Bloch 2018, p. 26-28, \u00a7Item 7: Eliminate obsolete object references. Bloch 2018 ^ \"NullPointerException\". Oracle. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ ^ \"NullPointerException\". Oracle. Archived from the original on May 6, 2014. Retrieved May 6, 2014. \"NullPointerException\" Archived . Retrieved May 6, 2014 May 6, ^ \"Exceptions in Java\". Artima.com. Archived from the original on January 21, 2009. Retrieved August 10, 2010. ^ ^ \"Exceptions in Java\". Artima.com. Archived from the original on January 21, 2009. Retrieved August 10, 2010. \"Exceptions in Java\" Archived . Retrieved August 10, 2010 August 10, ^ \"Java HotSpot\u2122 Virtual Machine Performance Enhancements\". Oracle.com. Archived from the original on May 29, 2017. Retrieved April 26, 2017. ^ ^ \"Java HotSpot\u2122 Virtual Machine Performance Enhancements\". Oracle.com. Archived from the original on May 29, 2017. Retrieved April 26, 2017. \"Java HotSpot\u2122 Virtual Machine Performance Enhancements\" Archived . Retrieved April 26, 2017 April 26, ^ \"Operator Overloading (C# vs Java)\". C# for Java Developers. Microsoft. Archived from the original on January 7, 2015. Retrieved December 10, 2014. ^ ^ \"Operator Overloading (C# vs Java)\". C# for Java Developers. Microsoft. Archived from the original on January 7, 2015. Retrieved December 10, 2014. \"Operator Overloading (C# vs Java)\" Archived . Retrieved December 10, 2014 December 10, ^ \"Multiple Inheritance of State, Implementation, and Type\". The Java Tutorials. Oracle. Archived from the original on November 9, 2014. Retrieved December 10, 2014. ^ ^ \"Multiple Inheritance of State, Implementation, and Type\". The Java Tutorials. Oracle. Archived from the original on November 9, 2014. Retrieved December 10, 2014. \"Multiple Inheritance of State, Implementation, and Type\" Archived . Retrieved December 10, 2014 December 10, ^ \"Deprecated APIs, Features, and Options\". Oracle. Archived from the original on June 19, 2019. Retrieved May 31, 2019. ^ ^ \"Deprecated APIs, Features, and Options\". Oracle. Archived from the original on June 19, 2019. Retrieved May 31, 2019. \"Deprecated APIs, Features, and Options\" Archived . Retrieved May 31, 2019 May 31, ^ \"Applet (Java Platform SE 7)\". Docs. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ ^ \"Applet (Java Platform SE 7)\". Docs. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. \"Applet (Java Platform SE 7)\" Archived . Retrieved May 1, 2020 May 1, ^ \"What Is a JSP Page? - The Java EE 5 Tutorial\". docs.oracle.com. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ ^ \"What Is a JSP Page? - The Java EE 5 Tutorial\". docs.oracle.com. Archived from the original on August 2, 2020. Retrieved May 1, 2020. \"What Is a JSP Page? - The Java EE 5 Tutorial\" Archived . Retrieved May 1, 2020 May 1, ^ \"Trail: Creating a GUI With JFC/Swing (The Java Tutorials)\". docs.oracle.com. Archived from the original on April 29, 2020. Retrieved May 1, 2020. ^ ^ \"Trail: Creating a GUI With JFC/Swing (The Java Tutorials)\". docs.oracle.com. Archived from the original on April 29, 2020. Retrieved May 1, 2020. \"Trail: Creating a GUI With JFC/Swing (The Java Tutorials)\" Archived . Retrieved May 1, 2020 May 1, ^ \"Removed from JDK 11, JavaFX 11 arrives as a standalone module\". InfoWorld. September 20, 2018. Archived from the original on October 14, 2020. Retrieved October 13, 2020. ^ ^ \"Removed from JDK 11, JavaFX 11 arrives as a standalone module\". InfoWorld. September 20, 2018. Archived from the original on October 14, 2020. Retrieved October 13, 2020. \"Removed from JDK 11, JavaFX 11 arrives as a standalone module\" Archived . Retrieved October 13, 2020 October 13, ^ \"Getting Started with JavaFX: Hello World, JavaFX Style\". JavaFX 2 Tutorials and Documentation. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ ^ \"Getting Started with JavaFX: Hello World, JavaFX Style\". JavaFX 2 Tutorials and Documentation. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. \"Getting Started with JavaFX: Hello World, JavaFX Style\" Archived . Retrieved May 1, 2020 May 1, ^ \"Java and Scala's Type Systems are Unsound\" (PDF). Archived (PDF) from the original on November 28, 2016. Retrieved February 20, 2017. ^ ^ \"Java and Scala's Type Systems are Unsound\" (PDF). Archived (PDF) from the original on November 28, 2016. Retrieved February 20, 2017. \"Java and Scala's Type Systems are Unsound\" (PDF) Archived (PDF) . Retrieved February 20, 2017 February 20, ^ Arnold, Ken (June 27, 2005). \"Generics Considered Harmful\". java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015. ^ ^ Arnold, Ken (June 27, 2005). \"Generics Considered Harmful\". java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015. \"Generics Considered Harmful\" the original . Retrieved September 10, 2015 September 10, ^ Owens, Sean R. \"Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)\". Archived from the original on February 20, 2009. Retrieved July 4, 2011. ^ ^ Owens, Sean R. \"Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)\". Archived from the original on February 20, 2009. Retrieved July 4, 2011. \"Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)\" the original . Retrieved July 4, 2011 July 4, ^ Kahan, William (March 1, 1998). \"How Java's Floating-Point Hurts Everyone Everywhere \u2013 ACM 1998 Workshop on Java (Stanford)\" (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Archived (PDF) from the original on September 5, 2012. Retrieved June 4, 2011. ^ ^ Kahan, William (March 1, 1998). \"How Java's Floating-Point Hurts Everyone Everywhere \u2013 ACM 1998 Workshop on Java (Stanford)\" (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Archived (PDF) from the original on September 5, 2012. Retrieved June 4, 2011. \"How Java's Floating-Point Hurts Everyone Everywhere \u2013 ACM 1998 Workshop on Java (Stanford)\" (PDF) Archived (PDF) . Retrieved June 4, 2011 June 4, ^ \"Have you checked the Java?\". Archived from the original on September 21, 2012. Retrieved December 23, 2011. ^ ^ \"Have you checked the Java?\". Archived from the original on September 21, 2012. Retrieved December 23, 2011. \"Have you checked the Java?\" the original . Retrieved December 23, 2011 December 23, ^ Chidester, Ashlan. Java Persistence API, Jenkins and AWS. ISBN 9798224253951. Retrieved September 16, 2024. ^ ^ Chidester, Ashlan. Java Persistence API, Jenkins and AWS. ISBN 9798224253951. Retrieved September 16, 2024. Java Persistence API, Jenkins and AWS ISBN 9798224253951 . Retrieved September 16, 2024 September 16, ^ Cadenhead, Rogers (November 20, 2017), Understanding How Java Programs Work, archived from the original on August 13, 2021, retrieved March 26, 2019 ^ ^ Cadenhead, Rogers (November 20, 2017), Understanding How Java Programs Work, archived from the original on August 13, 2021, retrieved March 26, 2019 Understanding How Java Programs Work archived , retrieved March 26, 2019 March 26, ^ Woolf, Nicky (May 26, 2016). \"Google wins six-year legal battle with Oracle over Android code copyright\". The Guardian. ISSN 0261-3077. Archived from the original on March 26, 2019. Retrieved March 26, 2019. ^ ^ Woolf, Nicky (May 26, 2016). \"Google wins six-year legal battle with Oracle over Android code copyright\". The Guardian. ISSN 0261-3077. Archived from the original on March 26, 2019. Retrieved March 26, 2019. \"Google wins six-year legal battle with Oracle over Android code copyright\" ISSN 0261-3077 Archived . Retrieved March 26, 2019 March 26, ^ a b Bloch 2018, pp. 1\u20134, \u00a7 1 Introduction. ^ a b a b Bloch 2018, pp. 1\u20134, \u00a7 1 Introduction. Bloch 2018 ^ \"java.nio (Java Platform SE 8)\". docs.oracle.com. ^ ^ \"java.nio (Java Platform SE 8)\". docs.oracle.com. \"java.nio (Java Platform SE 8)\" ^ \"Java Networking\". docs.oracle.com. ^ ^ \"Java Networking\". docs.oracle.com. \"Java Networking\" ^ \"HttpClient (Java SE 11 & JDK 11)\". docs.oracle.com. ^ ^ \"HttpClient (Java SE 11 & JDK 11)\". docs.oracle.com. \"HttpClient (Java SE 11 & JDK 11)\" ^ \"Collections Framework Overview\". Java Documentation. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ ^ \"Collections Framework Overview\". Java Documentation. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. \"Collections Framework Overview\" Archived . Retrieved December 18, 2014 December 18, ^ \"Java Security Overview\". Java Documentation. Oracle. Archived from the original on January 3, 2015. Retrieved December 18, 2014. ^ ^ \"Java Security Overview\". Java Documentation. Oracle. Archived from the original on January 3, 2015. Retrieved December 18, 2014. \"Java Security Overview\" Archived . Retrieved December 18, 2014 December 18, ^ \"Trail: Internationalization\". The Java Tutorials. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ ^ \"Trail: Internationalization\". The Java Tutorials. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. \"Trail: Internationalization\" Archived . Retrieved December 18, 2014 December 18, ^ \"How to Write Doc Comments for the Javadoc Tool\". Oracle Technology Network. Oracle. Archived from the original on December 18, 2014. Retrieved December 18, 2014. ^ ^ \"How to Write Doc Comments for the Javadoc Tool\". Oracle Technology Network. Oracle. Archived from the original on December 18, 2014. Retrieved December 18, 2014. \"How to Write Doc Comments for the Javadoc Tool\" Archived . Retrieved December 18, 2014 December 18, ^ Niccolai, James (January 24, 2001). \"Sun, Microsoft settle Java lawsuit\". JavaWorld. IDG News Service. Archived from the original on July 14, 2020. Retrieved July 13, 2020. ^ ^ Niccolai, James (January 24, 2001). \"Sun, Microsoft settle Java lawsuit\". JavaWorld. IDG News Service. Archived from the original on July 14, 2020. Retrieved July 13, 2020. \"Sun, Microsoft settle Java lawsuit\" JavaWorld IDG News Service Archived . Retrieved July 13, 2020 July 13, ^ van Gurp, Jilles (November 13, 2007). \"Google Android: Initial Impressions and Criticism\". Javalobby. Archived from the original on August 28, 2008. Retrieved March 7, 2009. Frankly, I don't understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of \"not invented here\" to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one ^ ^ van Gurp, Jilles (November 13, 2007). \"Google Android: Initial Impressions and Criticism\". Javalobby. Archived from the original on August 28, 2008. Retrieved March 7, 2009. Frankly, I don't understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of \"not invented here\" to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one \"Google Android: Initial Impressions and Criticism\" . Retrieved March 7, 2009 March 7, ^ Mullin, Joe (May 7, 2012). \"Google guilty of infringement in Oracle trial; future legal headaches loom\". Law & Disorder. Ars Technica. Archived from the original on May 8, 2012. Retrieved May 8, 2012. ^ ^ Mullin, Joe (May 7, 2012). \"Google guilty of infringement in Oracle trial; future legal headaches loom\". Law & Disorder. Ars Technica. Archived from the original on May 8, 2012. Retrieved May 8, 2012. \"Google guilty of infringement in Oracle trial; future legal headaches loom\" Archived . Retrieved May 8, 2012 May 8, ^ Mullin, Joe (May 31, 2012). \"Google wins crucial API ruling, Oracle's case decimated\". Ars Technica. Archived from the original on March 12, 2017. Retrieved June 1, 2012. ^ ^ Mullin, Joe (May 31, 2012). \"Google wins crucial API ruling, Oracle's case decimated\". Ars Technica. Archived from the original on March 12, 2017. Retrieved June 1, 2012. \"Google wins crucial API ruling, Oracle's case decimated\" Archived . Retrieved June 1, 2012 June 1, ^ Rosenblatt, Seth (May 9, 2014). \"Court sides with Oracle over Android in Java patent appeal\". CNET. Archived from the original on May 10, 2014. Retrieved May 10, 2014. ^ ^ Rosenblatt, Seth (May 9, 2014). \"Court sides with Oracle over Android in Java patent appeal\". CNET. Archived from the original on May 10, 2014. Retrieved May 10, 2014. \"Court sides with Oracle over Android in Java patent appeal\" Archived . Retrieved May 10, 2014 May 10, ^ Mullin, Joe (May 26, 2016). \"Google beats Oracle\u2014Android makes \"fair use\" of Java APIs\". Ars Technica. Archived from the original on January 20, 2017. Retrieved May 26, 2016. ^ ^ Mullin, Joe (May 26, 2016). \"Google beats Oracle\u2014Android makes \"fair use\" of Java APIs\". Ars Technica. Archived from the original on January 20, 2017. Retrieved May 26, 2016. \"Google beats Oracle\u2014Android makes \"fair use\" of Java APIs\" Archived . Retrieved May 26, 2016 May 26, ^ Farivar, Cyrus (March 27, 2018). \"\"Google's use of the Java API packages was not fair,\" appeals court rules\". Ars Technica. Archived from the original on September 24, 2019. Retrieved August 6, 2019. ^ ^ Farivar, Cyrus (March 27, 2018). \"\"Google's use of the Java API packages was not fair,\" appeals court rules\". Ars Technica. Archived from the original on September 24, 2019. Retrieved August 6, 2019. \"\"Google's use of the Java API packages was not fair,\" appeals court rules\" Archived . Retrieved August 6, 2019 August 6, ^ Lee, Timothy (April 23, 2019). \"Google asks Supreme Court to overrule disastrous ruling on API copyrights\". Ars Technica. Archived from the original on April 23, 2019. Retrieved April 23, 2019. ^ ^ Lee, Timothy (April 23, 2019). \"Google asks Supreme Court to overrule disastrous ruling on API copyrights\". Ars Technica. Archived from the original on April 23, 2019. Retrieved April 23, 2019. \"Google asks Supreme Court to overrule disastrous ruling on API copyrights\" Ars Technica Archived . Retrieved April 23, 2019 April 23, ^ \"Google LLC v. Oracle America, Inc 593 U. S. ____ (2021)\" (PDF). Archived (PDF) from the original on April 5, 2021. Retrieved April 6, 2021. ^ ^ \"Google LLC v. Oracle America, Inc 593 U. S. ____ (2021)\" (PDF). Archived (PDF) from the original on April 5, 2021. Retrieved April 6, 2021. \"Google LLC v. Oracle America, Inc 593 U. S. ____ (2021)\" (PDF) Archived (PDF) . Retrieved April 6, 2021 April 6, Bibliography Bloch, Joshua (2018). \"Effective Java: Programming Language Guide\" (third ed.). Addison-Wesley. ISBN 978-0-13-468599-1. ISBN 978-0-13-468599-1 Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad; Buckley, Alex (2014). The Java\u00ae Language Specification (PDF) (Java SE 8 ed.). Archived (PDF) from the original on October 21, 2014. Retrieved November 18, 2014. The Java\u00ae Language Specification (PDF) Archived (PDF) . Retrieved November 18, 2014 November 18, Gosling, James; Joy, Bill; Steele, Guy L. Jr.; Bracha, Gilad (2005). The Java Language Specification (3rd ed.). Addison-Wesley. ISBN 0-321-24678-0. Archived from the original on February 14, 2012. Retrieved February 8, 2019. Joy, Bill Steele, Guy L. Jr. Bracha, Gilad The Java Language Specification ISBN 0-321-24678-0 Archived . Retrieved February 8, 2019 February 8, Lindholm, Tim; Yellin, Frank (1999). The Java Virtual Machine Specification (2nd ed.). Addison-Wesley. ISBN 0-201-43294-3. Archived from the original on September 25, 2011. Retrieved February 8, 2019. The Java Virtual Machine Specification ISBN 0-201-43294-3 Archived . Retrieved February 8, 2019 February 8, External links sister projects sister projects Definitions from Wiktionary Definitions from Wiktionary Definitions Media from Commons Media from Commons Media Quotations from Wikiquote Quotations from Wikiquote Quotations Textbooks from Wikibooks Textbooks from Wikibooks Textbooks Resources from Wikiversity Resources from Wikiversity Resources Data from Wikidata Data from Wikidata Data Java Platform, Enterprise Edition/Java EE Tutorial Java Weekly Java Weekly v v t t e e Java (software platform) JVM JVM Java ME (Micro) Java ME Java SE (Standard) Java SE Jakarta EE (Enterprise) Jakarta EE Java Card Java Card Android SDK Android SDK GraalVM GraalVM Squawk Squawk Java Development Kit Java Development Kit OpenJDK OpenJDK Java virtual machine Java virtual machine JavaFX JavaFX Maxine VM Maxine VM Servlets Servlets MIDlets MIDlets JSP JSP JSF JSF Web Start (JNLP) Web Start Pack200 Pack200 Modules Modules applets applets Eclipse Eclipse GNU Classpath GNU Classpath Hibernate Hibernate Spring Spring GWT GWT IcedTea IcedTea Jazelle Jazelle Struts Struts TopLink TopLink WildFly WildFly blackdown blackdown harmony harmony Java version history Java version history Java Community Process Java Community Process Sun Microsystems Sun Microsystems Free Java implementations Free Java implementations JVM languages Java Java BeanShell BeanShell Clojure Clojure Groovy Groovy JRuby JRuby Jython Jython Kotlin Kotlin Processing Processing Rhino Rhino Scala Scala Oxygene Oxygene Conferences JavaOne JavaOne Devoxx Devoxx Apache Software Foundation Apache Software Foundation Eclipse Foundation Eclipse Foundation Java Community Process Java Community Process Oracle Corporation Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories Sun Microsystems Sun Microsystems Laboratories James Gosling James Gosling Arthur van Hoff Arthur van Hoff Urs H\u00f6lzle Urs H\u00f6lzle Patrick Naughton Patrick Naughton Category Computer programming portal v v t t e e Sun Microsystems Acquired by Oracle Sun-1 Sun-1 Sun-2 Sun-2 Sun-3 Sun-3 Sun386i Sun386i Sun-4 Sun-4 SPARCstation/server/center 1 2 4 5 10 20 IPC IPX LX ZX SPARCstation/server/center 1 1 2 2 4 4 5 5 10 10 20 20 IPC IPC IPX IPX LX LX ZX ZX SPARCclassic SPARCclassic Netra Netra Ultra 1 2 5 10 24 30 60 80 Ultra 1 1 2 2 5 5 10 10 24 24 30 30 60 60 80 80 Enterprise 10000 Enterprise 10000 10000 Blade server Blade server Blade workstation Blade workstation Fire 12K 15K E25K T2000 X4500 Fire 12K 12K 15K 15K E25K E25K T2000 T2000 X4500 X4500 SPARC Enterprise SPARC Enterprise JavaStation JavaStation Java Workstation Java Workstation Ray Ray Cobalt Qube Cobalt Qube Cobalt RaQ Cobalt RaQ SPARC SPARC MB86900 MB86900 microSPARC microSPARC SuperSPARC SuperSPARC UltraSPARC UltraSPARC UltraSPARC II UltraSPARC IIe UltraSPARC IIi Gemini UltraSPARC II UltraSPARC IIe UltraSPARC IIi Gemini UltraSPARC III UltraSPARC III Cu UltraSPARC IIIi UltraSPARC III UltraSPARC III Cu UltraSPARC IIIi UltraSPARC IV UltraSPARC IV UltraSPARC T1 UltraSPARC T1 UltraSPARC T2 UltraSPARC T2 SPARC T3 SPARC T3 SPARC T4 SPARC T4 SPARC T5 SPARC T5 Rock Rock MAJC MAJC Sun4d Sun4d SBus SBus Fireplane Fireplane LOM port LOM port MBus MBus Modular Datacenter Modular Datacenter Neptune Neptune System Service Processor System Service Processor SPARC T series SPARC T series SPOT SPOT Ultra Port Architecture Ultra Port Architecture Visual Instruction Set Visual Instruction Set SunOS SunOS Solaris Solaris NIS NIS+ NIS NIS+ NIS+ NFS NFS ZFS ZFS+ ZFS ZFS+ ZFS+ SunView SunView NeWS NeWS OpenWindows OpenWindows Java Desktop System Java Desktop System Studio Studio Java Java StarOffice StarOffice iPlanet iPlanet Java System Java System Sun Secure Global Desktop Sun Secure Global Desktop MySQL MySQL xVM xVM GlassFish GlassFish VirtualBox VirtualBox StorageTek 5800 System StorageTek 5800 System StorageTek SL8500 StorageTek SL8500 Open Storage Open Storage QFS QFS ZFS ZFS Cloud Cloud Constellation System Constellation System Visualization System Visualization System Grid Engine Grid Engine Lustre Lustre Sun Microsystems Laboratories Sun Microsystems Laboratories picoJava picoJava Fortress Fortress Project Looking Glass Project Looking Glass SCPs SCPs BlueJ BlueJ Common Development and Distribution License Common Development and Distribution License Java Community Process Java Community Process NetBeans NetBeans OpenOffice.org OpenOffice.org OpenSolaris OpenSolaris OpenSPARC OpenSPARC OpenJDK OpenJDK Open Source University Meetup Open Source University Meetup People Bill Joy Bill Joy Andy Bechtolsheim Andy Bechtolsheim Scott McNealy Scott McNealy Vinod Khosla Vinod Khosla Afara Websystems Afara Websystems Cobalt Networks Cobalt Networks Gridware Gridware Lighthouse Design Lighthouse Design Montalvo Systems Montalvo Systems MySQL AB MySQL AB Pixo Pixo Procom Technology Procom Technology SavaJe SavaJe StorageTek StorageTek Tarantella Tarantella The Network is the Computer The Network is the Computer Write once, run anywhere Write once, run anywhere Category v v t t e e Oracle Corporation Jeffrey Berg Jeffrey Berg H. Raymond Bingham H. Raymond Bingham Michael Boskin Michael Boskin Safra Catz Safra Catz Larry Ellison Larry Ellison H\u00e9ctor Garc\u00eda-Molina H\u00e9ctor Garc\u00eda-Molina Joseph Grundfest Joseph Grundfest Jeffrey O. Henley Jeffrey O. Henley Mark Hurd Mark Hurd Jack F. Kemp Jack F. Kemp Donald L. Lucas Donald L. Lucas Naomi O. Seligman list Sun Sun PeopleSoft PeopleSoft Hyperion Hyperion Siebel Siebel BEA BEA JD Edwards JD Edwards RightNow RightNow Virtual Iron Virtual Iron TimesTen TimesTen Sunopsis Sunopsis NetSuite NetSuite Cerner Cerner Oracle Database Oracle Database MySQL MySQL InnoDB InnoDB Berkeley DB Berkeley DB TimesTen TimesTen Rdb Rdb Essbase Essbase Java Java PL/SQL PL/SQL JDeveloper JDeveloper Forms Forms NetBeans NetBeans Apex Apex SQL Developer SQL Developer Developer Studio Developer Studio Fusion Middleware Fusion Middleware WebCenter WebCenter SOA Suite SOA Suite WebLogic Server WebLogic Server Coherence Coherence Tuxedo Tuxedo GlassFish GlassFish Oracle Linux Oracle Linux Oracle Solaris Oracle Solaris Sun Fire Sun Fire SPARC (T-Series, Enterprise) SPARC T-Series Enterprise StorageTek StorageTek Oracle Exadata Oracle Exadata Oracle Exalogic Oracle Exalogic Big Data Appliance Big Data Appliance Oracle Certification Program Oracle Certification Program Category Category v v t t e e Oracle free and open-source software (FOSS) OpenOffice.org OpenOffice.org VirtualBox VirtualBox Java Java Berkeley DB Berkeley DB InnoDB InnoDB MySQL MySQL Oracle NoSQL Database Oracle NoSQL Database DTrace DTrace GlassFish GlassFish HotSpot HotSpot Image Packaging System Image Packaging System Java (software platform) Java (software platform) Maxine Virtual Machine Maxine Virtual Machine Memory Memory Nashorn Nashorn NetBeans NetBeans OpenJDK OpenJDK VisualVM VisualVM OpenSolaris OpenSolaris Oracle Linux Oracle Linux Java Desktop System Java Desktop System OCFS2 OCFS2 Oracle Grid Engine Oracle Grid Engine Oracle VM Server for x86 Oracle VM Server for x86 Google LLC v. Oracle America, Inc. Google LLC v. Oracle America, Inc. v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category Authority control databases Germany Germany Germany United States United States United States France France France BnF data BnF data BnF data Czech Republic Czech Republic Czech Republic Czech Republic Spain Spain Spain Israel Israel Israel ELMCIP ELMCIP ELMCIP https://en.wikipedia.org/w/index.php?title=Java_(programming_language)&oldid=1266787868 Categories Java (programming language) Java (programming language) C programming language family C programming language family Class-based programming languages Class-based programming languages Concurrent programming languages Concurrent programming languages Java platform Java platform Java specification requests Java specification requests JVM programming languages JVM programming languages Multi-paradigm programming languages Multi-paradigm programming languages Object-oriented programming languages Object-oriented programming languages Programming languages created in 1995 Programming languages created in 1995 Programming languages Programming languages Statically typed programming languages Statically typed programming languages Sun Microsystems Sun Microsystems Compiled programming languages Compiled programming languages American inventions American inventions Webarchive template wayback links Webarchive template wayback links CS1: unfit URL CS1: unfit URL Wikipedia indefinitely semi-protected pages Wikipedia indefinitely semi-protected pages Articles with short description Articles with short description Short description matches Wikidata Short description matches Wikidata Use mdy dates from August 2017 Use mdy dates from August 2017 Articles containing potentially dated statements from 2022 Articles containing potentially dated statements from 2022 All articles containing potentially dated statements All articles containing potentially dated statements Articles containing potentially dated statements from September 2024 Articles containing potentially dated statements from September 2024 Articles containing potentially dated statements from November 2024 Articles containing potentially dated statements from November 2024 Articles with example Java code Articles with example Java code Articles needing additional references from May 2019 Articles needing additional references from May 2019 All articles needing additional references All articles needing additional references Articles needing additional references from September 2023 Articles needing additional references from September 2023 Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with hidden wikidata Pages using Sister project links with hidden wikidata This page was last edited on 2 January 2025, at 06:14 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/C_(programming_language)": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 Overview Toggle Overview subsection 1.1 Relations to other languages 1 Overview 1 Overview Toggle Overview subsection 1.1 Relations to other languages 1.1 Relations to other languages 1.1 Relations to other languages 2 History Toggle History subsection 2.1 Early developments 2.1.1 B 2.1.2 New B and first C release 2.1.3 Structures and Unix kernel re-write 2.2 K&R C 2.3 ANSI C and ISO C 2.4 C99 2.5 C11 2.6 C17 2.7 C23 2.8 C2Y 2.9 Embedded C 2 History 2 History Toggle History subsection 2.1 Early developments 2.1.1 B 2.1.2 New B and first C release 2.1.3 Structures and Unix kernel re-write 2.1 Early developments 2.1 Early developments 2.1.1 B 2.1.1 B 2.1.1 B 2.1.2 New B and first C release 2.1.2 New B and first C release 2.1.2 New B and first C release 2.1.3 Structures and Unix kernel re-write 2.1.3 Structures and Unix kernel re-write 2.1.3 Structures and Unix kernel re-write 2.2 K&R C 2.2 K&R C 2.2 K&R C 2.3 ANSI C and ISO C 2.3 ANSI C and ISO C 2.3 ANSI C and ISO C 2.4 C99 2.4 C99 2.4 C99 2.5 C11 2.5 C11 2.5 C11 2.6 C17 2.6 C17 2.6 C17 2.7 C23 2.7 C23 2.7 C23 2.8 C2Y 2.8 C2Y 2.8 C2Y 2.9 Embedded C 2.9 Embedded C 2.9 Embedded C 3 Syntax Toggle Syntax subsection 3.1 Character set 3.2 Reserved words 3.3 Operators 3 Syntax 3 Syntax Toggle Syntax subsection 3.1 Character set 3.1 Character set 3.1 Character set 3.2 Reserved words 3.2 Reserved words 3.2 Reserved words 3.3 Operators 3.3 Operators 3.3 Operators 4 \"Hello, world\" example 4 \"Hello, world\" example 4 \"Hello, world\" example 5 Data types Toggle Data types subsection 5.1 Pointers 5.2 Arrays 5.3 Array\u2013pointer interchangeability 5 Data types 5 Data types Toggle Data types subsection 5.1 Pointers 5.1 Pointers 5.1 Pointers 5.2 Arrays 5.2 Arrays 5.2 Arrays 5.3 Array\u2013pointer interchangeability 5.3 Array\u2013pointer interchangeability 5.3 Array\u2013pointer interchangeability 6 Memory management 6 Memory management 6 Memory management 7 Libraries Toggle Libraries subsection 7.1 File handling and streams 7 Libraries 7 Libraries Toggle Libraries subsection 7.1 File handling and streams 7.1 File handling and streams 7.1 File handling and streams 8 Language tools 8 Language tools 8 Language tools 9 Uses Toggle Uses subsection 9.1 Rationale for use in systems programming 9.2 Used for computationally-intensive libraries 9.3 C as an intermediate language 9.4 Other languages written in C 9.5 Once used for web development 9.6 Web servers 9.7 End-user applications 9 Uses 9 Uses Toggle Uses subsection 9.1 Rationale for use in systems programming 9.1 Rationale for use in systems programming 9.1 Rationale for use in systems programming 9.2 Used for computationally-intensive libraries 9.2 Used for computationally-intensive libraries 9.2 Used for computationally-intensive libraries 9.3 C as an intermediate language 9.3 C as an intermediate language 9.3 C as an intermediate language 9.4 Other languages written in C 9.4 Other languages written in C 9.4 Other languages written in C 9.5 Once used for web development 9.5 Once used for web development 9.5 Once used for web development 9.6 Web servers 9.6 Web servers 9.6 Web servers 9.7 End-user applications 9.7 End-user applications 9.7 End-user applications 10 Limitations 10 Limitations 10 Limitations 11 Related languages 11 Related languages 11 Related languages 12 See also 12 See also 12 See also 13 Notes 13 Notes 13 Notes 14 References 14 References 14 References 15 Sources 15 Sources 15 Sources 16 Further reading 16 Further reading 16 Further reading 17 External links 17 External links 17 External links Toggle the table of contents C (programming language) C (programming language) 123 languages Afrikaans Afrikaans Afrikaans Alemannisch Alemannisch Alemannisch \u12a0\u121b\u122d\u129b \u12a0\u121b\u122d\u129b \u12a0\u121b\u122d\u129b \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s Aragon\u00e9s Aragon\u00e9s \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be Asturianu Asturianu Asturianu Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u092d\u094b\u091c\u092a\u0941\u0930\u0940 \u092d\u094b\u091c\u092a\u0941\u0930\u0940 \u092d\u094b\u091c\u092a\u0941\u0930\u0940 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Bosanski Bosanski Bosanski Brezhoneg Brezhoneg Brezhoneg Catal\u00e0 Catal\u00e0 Catal\u00e0 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Corsu Corsu Corsu Cymraeg Cymraeg Cymraeg Dansk Dansk Dansk \u0627\u0644\u062f\u0627\u0631\u062c\u0629 \u0627\u0644\u062f\u0627\u0631\u062c\u0629 \u0627\u0644\u062f\u0627\u0631\u062c\u0629 Deutsch Deutsch Deutsch Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais Gaeilge Gaeilge Gaeilge Galego Galego Galego \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \u5ba2\u5bb6\u8a9e / Hak-k\u00e2-ng\u00ee \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 Hausa Hausa Hausa \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Hrvatski Hrvatski Ido Ido Ido Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia Interlingua Interlingua Interlingua IsiXhosa IsiXhosa IsiXhosa \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea Jawa Jawa Jawa \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 Kiswahili Kiswahili Kiswahili Kurd\u00ee Kurd\u00ee Kurd\u00ee \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u0ea5\u0eb2\u0ea7 \u0ea5\u0eb2\u0ea7 \u0ea5\u0eb2\u0ea7 Latina Latina Latina Latvie\u0161u Latvie\u0161u Latvie\u0161u Lietuvi\u0173 Lietuvi\u0173 Lietuvi\u0173 Lombard Lombard Lombard Magyar Magyar Magyar \u092e\u0948\u0925\u093f\u0932\u0940 \u092e\u0948\u0925\u093f\u0932\u0940 \u092e\u0948\u0925\u093f\u0932\u0940 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy Malagasy Malagasy \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 Bahasa Melayu Bahasa Melayu Bahasa Melayu \uabc3\uabe4\uabc7\uabe9 \uabc2\uabe3\uabdf \uabc3\uabe4\uabc7\uabe9 \uabc2\uabe3\uabdf \uabc3\uabe4\uabc7\uabe9 \uabc2\uabe3\uabdf \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Nederlands Nederlands Nederlands \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk nynorsk Norsk nynorsk Norsk nynorsk Occitan Occitan Occitan \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a Piemont\u00e8is Piemont\u00e8is Piemont\u00e8is Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 Runa Simi Runa Simi Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u1c65\u1c5f\u1c71\u1c5b\u1c5f\u1c72\u1c64 \u1c65\u1c5f\u1c71\u1c5b\u1c5f\u1c72\u1c64 \u1c65\u1c5f\u1c71\u1c5b\u1c5f\u1c72\u1c64 Scots Scots Scots Shqip Shqip Shqip \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd Simple English Simple English Simple English Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Suomi Suomi Svenska Svenska Svenska Tagalog Tagalog Tagalog \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd Taqbaylit Taqbaylit Taqbaylit \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e Basa Ugi Basa Ugi Basa Ugi \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 V\u00e8neto V\u00e8neto V\u00e8neto Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t \u6587\u8a00 \u6587\u8a00 \u6587\u8a00 Winaray Winaray Winaray \u5434\u8bed \u5434\u8bed \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 \u2d5c\u2d30\u2d4e\u2d30\u2d63\u2d49\u2d56\u2d5c \u2d5c\u2d30\u2d4f\u2d30\u2d61\u2d30\u2d62\u2d5c \u2d5c\u2d30\u2d4e\u2d30\u2d63\u2d49\u2d56\u2d5c \u2d5c\u2d30\u2d4f\u2d30\u2d61\u2d30\u2d62\u2d5c \u2d5c\u2d30\u2d4e\u2d30\u2d63\u2d49\u2d56\u2d5c \u2d5c\u2d30\u2d4f\u2d30\u2d61\u2d30\u2d62\u2d5c Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read Edit Edit Edit View history View history View history Tools Read Read Read Edit Edit Edit View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons Wikibooks Wikibooks Wikibooks Wikiquote Wikiquote Wikiquote Wikiversity Wikiversity Wikiversity Wikidata item Wikidata item Wikidata item Page version status This is an accepted version of this page latest accepted revision reviewed The C Programming Language C++ C# The C Programming Language [1] [ ] Paradigm Multi-paradigm imperative procedural structured Designed by Dennis Ritchie Developer ANSI C ISO/IEC JTC 1 (Joint Technical Committee 1) / SC 22 (Subcommittee 22) ; 53 years ago (1972) 1972 [2] [ ] Stable release C23 ; 2 months ago (2024-10-31) 2024-10-31 Preview release ; 10 months ago (2024-02-21) 2024-02-21 [3] [ ] Typing discipline Static weak manifest nominal OS Cross-platform Filename extensions www.iso.org/standard/82075.html www.iso.org/standard/82075.html www.open-std.org/jtc1/sc22/wg14/ www.open-std.org/jtc1/sc22/wg14/ implementations pcc GCC Clang Intel C Intel C C++Builder Microsoft Visual C++ Microsoft Visual C++ Watcom C Watcom C Dialects Cyclone Unified Parallel C Split-C Cilk C* B BCPL CPL ALGOL 68 [4] [ ] PL/I FORTRAN Numerous AMPL AWK csh C++ C-- C# Objective-C D Go Java JavaScript JS++ Julia Limbo LPC Perl PHP Pike Processing Python Rust Seed7 V (Vlang) Vala Verilog [5] [ ] Nim Zig C Programming at Wikibooks C Programming C (pronounced /\u02c8si\u02d0/ \u2013 like the letter c)[6] is a general-purpose programming language. It was created in the 1970s by Dennis Ritchie and remains very widely used and influential. By design, C's features cleanly reflect the capabilities of the targeted CPUs. It has found lasting use in operating systems code (especially in kernels[7]), device drivers, and protocol stacks, but its use in application software has been decreasing.[8] C is commonly used on computer architectures that range from the largest supercomputers to the smallest microcontrollers and embedded systems. /\u02c8si\u02d0/ /\u02c8si\u02d0/ /\u02c8si\u02d0/ \u02c8si\u02d0 \u02c8 s i\u02d0 c [6] [ ] general-purpose programming language Dennis Ritchie CPUs operating systems kernels [7] [ ] device drivers protocol stacks application software [8] [ ] supercomputers microcontrollers embedded systems A successor to the programming language B, C was originally developed at Bell Labs by Ritchie between 1972 and 1973 to construct utilities running on Unix. It was applied to re-implementing the kernel of the Unix operating system.[9] During the 1980s, C gradually gained popularity. It has become one of the most widely used programming languages,[10][11] with C compilers available for practically all modern computer architectures and operating systems. The book The C Programming Language, co-authored by the original language designer, served for many years as the de facto standard for the language.[12][1] C has been standardized since 1989 by the American National Standards Institute (ANSI) and, subsequently, jointly by the International Organization for Standardization (ISO) and the International Electrotechnical Commission (IEC). B Bell Labs Unix [9] [ ] programming languages [10] [ ] [11] [ ] compilers computer architectures operating systems The C Programming Language [12] [ ] [1] [ ] American National Standards Institute International Organization for Standardization International Electrotechnical Commission C is an imperative procedural language, supporting structured programming, lexical variable scope, and recursion, with a static type system. It was designed to be compiled to provide low-level access to memory and language constructs that map efficiently to machine instructions, all with minimal runtime support. Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant C program written with portability in mind can be compiled for a wide variety of computer platforms and operating systems with few changes to its source code. imperative procedural structured programming lexical variable scope recursion static type system compiled low-level memory machine instructions runtime support standards portability Since 2000, C has consistently ranked among the top four languages in the TIOBE index, a measure of the popularity of programming languages.[13] TIOBE index [13] [ ] Overview [edit] [ edit edit ] Dennis Ritchie Ken Thompson C is an imperative, procedural language in the ALGOL tradition. It has a static type system. In C, all executable code is contained within subroutines (also called \"functions\", though not in the sense of functional programming). Function parameters are passed by value, although arrays are passed as pointers, i.e. the address of the first item in the array. Pass-by-reference is simulated in C by explicitly passing pointers to the thing being referenced. imperative ALGOL type system executable code subroutines functional programming Function parameters arrays pointers C program source text is free-form code. Semicolons terminate statements, while curly braces are used to group statements into blocks. free-form Semicolons statements curly braces blocks The C language also exhibits the following characteristics: The language has a small, fixed number of keywords, including a full set of control flow primitives: if/else, for, do/while, while, and switch. User-defined names are not distinguished from keywords by any kind of sigil. control flow if/else for do/while while switch sigil It has a large number of arithmetic, bitwise, and logic operators: +,+=,++,&,||, etc. bitwise More than one assignment may be performed in a single statement. assignment Functions: Function return values can be ignored, when not needed. Function and data pointers permit ad hoc run-time polymorphism. Functions may not be defined within the lexical scope of other functions. Variables may be defined within a function, with scope. A function may call itself, so recursion is supported. Function return values can be ignored, when not needed. Function and data pointers permit ad hoc run-time polymorphism. run-time polymorphism Functions may not be defined within the lexical scope of other functions. Variables may be defined within a function, with scope. scope A function may call itself, so recursion is supported. recursion Data typing is static, but weakly enforced; all data has a type, but implicit conversions are possible. static weakly enforced implicit conversions User-defined (typedef) and compound types are possible. Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit. The contents of whole structs cannot be compared using a single built-in operator (the elements must be compared individually). Union is a structure with overlapping members; it allows multiple data types to share the same memory location. Array indexing is a secondary notation, defined in terms of pointer arithmetic. Whole arrays cannot be assigned or compared using a single built-in operator. There is no \"array\" keyword in use or definition; instead, square brackets indicate arrays syntactically, for example month[11]. Enumerated types are possible with the enum keyword. They are freely interconvertible with integers. Strings are not a distinct data type, but are conventionally implemented as null-terminated character arrays. typedef Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit. The contents of whole structs cannot be compared using a single built-in operator (the elements must be compared individually). struct Union is a structure with overlapping members; it allows multiple data types to share the same memory location. Union Array indexing is a secondary notation, defined in terms of pointer arithmetic. Whole arrays cannot be assigned or compared using a single built-in operator. There is no \"array\" keyword in use or definition; instead, square brackets indicate arrays syntactically, for example month[11]. Array Enumerated types are possible with the enum keyword. They are freely interconvertible with integers. Enumerated types Strings are not a distinct data type, but are conventionally implemented as null-terminated character arrays. Strings implemented null-terminated Low-level access to computer memory is possible by converting machine addresses to pointers. computer memory pointers Procedures (subroutines not returning values) are a special case of function, with an empty return type void. Procedures Memory can be allocated to a program with calls to library routines. allocated library routines A preprocessor performs macro definition, source code file inclusion, and conditional compilation. preprocessor macro source code conditional compilation There is a basic form of modularity: files can be compiled separately and linked together, with control over which functions and data objects are visible to other files via static and extern attributes. modularity linked static Complex functionality such as I/O, string manipulation, and mathematical functions are consistently delegated to library routines. I/O string library routines The generated code after compilation has relatively straightforward needs on the underlying platform, which makes it suitable for creating operating systems and for use in embedded systems. embedded systems While C does not include certain features found in other languages (such as object orientation and garbage collection), these can be implemented or emulated, often through the use of external libraries (e.g., the GLib Object System or the Boehm garbage collector). object orientation garbage collection GLib Object System Boehm garbage collector Relations to other languages [edit] [ edit edit ] List of C-family programming languages Many later languages have borrowed directly or indirectly from C, including C++, C#, Unix's C shell, D, Go, Java, JavaScript (including transpilers), Julia, Limbo, LPC, Objective-C, Perl, PHP, Python, Ruby, Rust, Swift, Verilog and SystemVerilog (hardware description languages).[5] These languages have drawn many of their control structures and other basic features from C. Most of them also express highly similar syntax to C, and they tend to combine the recognizable expression and statement syntax of C with underlying type systems, data models, and semantics that can be radically different. C++ C# C shell D Go Java JavaScript transpilers Julia Limbo LPC Objective-C Perl PHP Python Ruby Rust Swift Verilog SystemVerilog [5] [ ] control structures syntax syntax of C History [edit] [ edit edit ] Early developments [edit] [ edit edit ] K&R C ANSI C C99 C11 C17 C23 C2Y The origin of C is closely tied to the development of the Unix operating system, originally implemented in assembly language on a PDP-7 by Dennis Ritchie and Ken Thompson, incorporating several ideas from colleagues. Eventually, they decided to port the operating system to a PDP-11. The original PDP-11 version of Unix was also developed in assembly language.[9] Unix assembly language PDP-7 Dennis Ritchie Ken Thompson PDP-11 [9] [ ] B [edit] [ edit edit ] B (programming language) Thompson wanted a programming language for developing utilities for the new platform. He first tried writing a Fortran compiler, but he soon gave up the idea and instead created a cut-down version of the recently developed systems programming language called BCPL. The official description of BCPL was not available at the time,[14] and Thompson modified the syntax to be less 'wordy' and similar to a simplified ALGOL known as SMALGOL.[15] He called the result B,[9] describing it as \"BCPL semantics with a lot of SMALGOL syntax\".[15] Like BCPL, B had a bootstrapping compiler to facilitate porting to new machines.[15] Ultimately, few utilities were written in B because it was too slow and could not take advantage of PDP-11 features such as byte addressability. Fortran systems programming language BCPL [14] [ ] ALGOL [15] [ ] B [9] [ ] [15] [ ] bootstrapping [15] [ ] byte New B and first C release [edit] [ edit edit ] In 1971 Ritchie started to improve B, to use the features of the more-powerful PDP-11. A significant addition was a character data type. He called this New B (NB).[15] Thompson started to use NB to write the Unix kernel, and his requirements shaped the direction of the language development.[15][16] Through to 1972, richer types were added to the NB language: NB had arrays of int and char. Pointers, the ability to generate pointers to other types, arrays of all types, and types to be returned from functions were all also added. Arrays within expressions became pointers. A new compiler was written, and the language was renamed C.[9] [15] [ ] Unix [15] [ ] [16] [ ] [9] [ ] The C compiler and some utilities made with it were included in Version 2 Unix, which is also known as Research Unix.[17] Version 2 Unix Research Unix [17] [ ] Structures and Unix kernel re-write [edit] [ edit edit ] At Version 4 Unix, released in November 1973, the Unix kernel was extensively re-implemented in C.[9] By this time, the C language had acquired some powerful features such as struct types. Version 4 Unix Unix kernel [9] [ ] The preprocessor was introduced around 1973 at the urging of Alan Snyder and also in recognition of the usefulness of the file-inclusion mechanisms available in BCPL and PL/I. Its original version provided only included files and simple string replacements: #include and #define of parameterless macros. Soon after that, it was extended, mostly by Mike Lesk and then by John Reiser, to incorporate macros with arguments and conditional compilation.[9] preprocessor Alan Snyder PL/I Mike Lesk conditional compilation [9] [ ] Unix was one of the first operating system kernels implemented in a language other than assembly. Earlier instances include the Multics system (which was written in PL/I) and Master Control Program (MCP) for the Burroughs B5000 (which was written in ALGOL) in 1961. In around 1977, Ritchie and Stephen C. Johnson made further changes to the language to facilitate portability of the Unix operating system. Johnson's Portable C Compiler served as the basis for several implementations of C on new platforms.[16] assembly Multics PL/I Master Control Program Burroughs B5000 ALGOL Stephen C. Johnson portability Portable C Compiler [16] [ ] K&R C [edit] [ edit edit ] Brian Kernighan Dennis Ritchie In 1978 Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language.[18] Known as K&R from the initials of its authors, the book served for many years as an informal specification of the language. The version of C that it describes is commonly referred to as \"K&R C\". As this was released in 1978, it is now also referred to as C78.[19] The second edition of the book[20] covers the later ANSI C standard, described below. Brian Kernighan Dennis Ritchie The C Programming Language [18] [ ] specification [19] [ ] [20] [ ] ANSI C K&R introduced several language features: Standard I/O library Standard I/O library long int data type long int unsigned int data type Compound assignment operators of the form =op (such as =-) were changed to the form op= (that is, -=) to remove the semantic ambiguity created by constructs such as i=-10, which had been interpreted as i =- 10 (decrement i by 10) instead of the possibly intended i = -10 (let i be \u221210). Even after the publication of the 1989 ANSI standard, for many years K&R C was still considered the \"lowest common denominator\" to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still in use, and because carefully written K&R C code can be legal Standard C as well. lowest common denominator In early versions of C, only functions that return types other than int must be declared if used before the function definition; functions used without prior declaration were presumed to return type int. For example: long some_function (); /* This is a function declaration, so the compiler can know the name and return type of this function. */ /* int */ other_function (); /* Another function declaration. Because this is an early version of C, there is an implicit 'int' type here. A comment shows where the explicit 'int' type specifier would be required in later versions. */ /* int */ calling_function () /* This is a function definition, including the body of the code following in the { curly brackets }. Because no return type is specified, the function implicitly returns an 'int' in this early version of C. */ { long test1 ; register /* int */ test2 ; /* Again, note that 'int' is not required here. The 'int' type specifier */ /* in the comment would be required in later versions of C. */ /* The 'register' keyword indicates to the compiler that this variable should */ /* ideally be stored in a register as opposed to within the stack frame. */ test1 = some_function (); if ( test1 > 1 ) test2 = 0 ; else test2 = other_function (); return test2 ; } The int type specifiers which are commented out could be omitted in K&R C, but are required in later standards. Since K&R function declarations did not include any information about function arguments, function parameter type checks were not performed, although some compilers would issue a warning message if a local function was called with the wrong number of arguments, or if different calls to an external function used different numbers or types of arguments. Separate tools such as Unix's lint utility were developed that (among other things) could check for consistency of function use across multiple source files. type checks lint In the years following the publication of K&R C, several features were added to the language, supported by compilers from AT&T (in particular PCC[21]) and some other vendors. These included: PCC [21] [ ] void functions (i.e., functions with no return value) void functions returning struct or union types (previously only a single pointer, integer or float could be returned) struct union assignment for struct data types assignment enumerated types (previously, preprocessor definitions for integer fixed values were used, e.g. #define GREEN 3) enumerated types The large number of extensions and lack of agreement on a standard library, together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&R specification, led to the necessity of standardization.[22] standard library [22] [ ] ANSI C and ISO C [edit] [ edit edit ] ANSI C During the late 1970s and 1980s, versions of C were implemented for a wide variety of mainframe computers, minicomputers, and microcomputers, including the IBM PC, as its popularity began to increase significantly. mainframe computers minicomputers microcomputers IBM PC In 1983 the American National Standards Institute (ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed off to the IEEE working group 1003 to become the basis for the 1988 POSIX standard. In 1989, the C standard was ratified as ANSI X3.159-1989 \"Programming Language C\". This version of the language is often referred to as ANSI C, Standard C, or sometimes C89. American National Standards Institute IEEE working group POSIX ANSI C In 1990 the ANSI C standard (with formatting changes) was adopted by the International Organization for Standardization (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms \"C89\" and \"C90\" refer to the same programming language. International Organization for Standardization ANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group ISO/IEC JTC1/SC22/WG14. National adoption of an update to the international standard typically occurs within a year of ISO publication. ISO/IEC JTC1/SC22 One of the aims of the C standardization process was to produce a superset of K&R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as function prototypes (borrowed from C++), void pointers, support for international character sets and locales, and preprocessor enhancements. Although the syntax for parameter declarations was augmented to include the style used in C++, the K&R interface continued to be permitted, for compatibility with existing source code. superset function prototypes character sets locales syntax C89 is supported by current C compilers, and most modern C code is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any platform with a conforming C implementation, within its resource limits. Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as GUI libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte endianness. platform GUI endianness In cases where code must be compilable by either standard-conforming or K&R C-based compilers, the __STDC__ macro can be used to split the code into Standard and K&R sections to prevent the use on a K&R C-based compiler of features available only in Standard C. After the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995, Normative Amendment 1 to the 1990 C standard (ISO/IEC 9899/AMD1:1995, known informally as C95) was published, to correct some details and to add more extensive support for international character sets.[23] [23] [ ] C99 [edit] [ edit edit ] C99 The C standard was further revised in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which is commonly referred to as \"C99\". It has since been amended three times by Technical Corrigenda.[24] C99 [24] [ ] C99 introduced several new features, including inline functions, several new data types (including long long int and a complex type to represent complex numbers), variable-length arrays and flexible array members, improved support for IEEE 754 floating point, support for variadic macros (macros of variable arity), and support for one-line comments beginning with //, as in BCPL or C++. Many of these had already been implemented as extensions in several C compilers. inline functions data types complex numbers variable-length arrays flexible array members IEEE 754 variadic macros arity C99 is for the most part backward compatible with C90, but is stricter in some ways; in particular, a declaration that lacks a type specifier no longer has int implicitly assumed. A standard macro __STDC_VERSION__ is defined with value 199901L to indicate that C99 support is available. GCC, Solaris Studio, and other C compilers now[when?] support many or all of the new features of C99. The C compiler in Microsoft Visual C++, however, implements the C89 standard and those parts of C99 that are required for compatibility with C++11.[25][needs update] GCC Solaris Studio when? when? Microsoft Visual C++ C++11 [25] [ ] needs update needs update In addition, the C99 standard requires support for identifiers using Unicode in the form of escaped characters (e.g. \\u0040 or \\U0001f431) and suggests support for raw Unicode names. identifiers Unicode C11 [edit] [ edit edit ] C11 (C standard revision) Work began in 2007 on another revision of the C standard, informally called \"C1X\" until its official publication of ISO/IEC 9899:2011 on December 8, 2011. The C standards committee adopted guidelines to limit the adoption of new features that had not been tested by existing implementations. The C11 standard adds numerous new features to C and the library, including type generic macros, anonymous structures, improved Unicode support, atomic operations, multi-threading, and bounds-checked functions. It also makes some portions of the existing C99 library optional, and improves compatibility with C++. The standard macro __STDC_VERSION__ is defined as 201112L to indicate that C11 support is available. C17 [edit] [ edit edit ] C17 (C standard revision) C17 is an informal name for ISO/IEC 9899:2018, a standard for the C programming language published in June 2018. It introduces no new language features, only technical corrections, and clarifications to defects in C11. The standard macro __STDC_VERSION__ is defined as 201710L to indicate that C17 support is available. C23 [edit] [ edit edit ] C23 (C standard revision) C23 is an informal name for the current major C language standard revision. It was informally known as \"C2X\" through most of its development. C23 was published in October 2024 as ISO/IEC 9899:2024.[26] The standard macro __STDC_VERSION__ is defined as 202311L to indicate that C23 support is available. [26] [ ] C2Y [edit] [ edit edit ] C2Y is an informal name for the next major C language standard revision, after C23 (C2X), that is hoped to be released later in the 2020s decade, hence the '2' in \"C2Y\". An early working draft of C2Y was released in February 2024 as N3220 by the working group ISO/IEC JTC1/SC22/WG14.[27] ISO/IEC JTC1/SC22 [27] [ ] Embedded C [edit] [ edit edit ] Embedded C Historically, embedded C programming requires non-standard extensions to the C language to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations. fixed-point arithmetic memory banks In 2008, the C Standards Committee published a technical report extending the C language[28] to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C, such as fixed-point arithmetic, named address spaces, and basic I/O hardware addressing. technical report [28] [ ] Syntax [edit] [ edit edit ] C syntax C has a formal grammar specified by the C standard.[29] Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters /* and */, or (since C99) following // until the end of the line. Comments delimited by /* and */ do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside string or character literals.[30] formal grammar [29] [ ] string [30] [ ] C source files contain declarations and function definitions. Function definitions, in turn, contain declarations and statements. Declarations either define new types using keywords such as struct, union, and enum, or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as char and int specify built-in types. Sections of code are enclosed in braces ({ and }, sometimes called \"curly brackets\") to limit the scope of declarations and to act as a single statement for control structures. statements As an imperative language, C uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, followed by a semicolon; as a side effect of the evaluation, functions may be called and variables assigned new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords. Structured programming is supported by if ... [else] conditional execution and by do ... while, while, and for iterative execution (looping). The for statement has separate initialization, testing, and reinitialization expressions, any or all of which can be omitted. break and continue can be used within the loop. Break is used to leave the innermost enclosing loop statement and continue is used to skip to its reinitialisation. There is also a non-structured goto statement which branches directly to the designated label within the function. switch selects a case to be executed based on the value of an integer expression. Different from many other languages, control-flow will fall through to the next case unless terminated by a break. side effect functions may be called variables assigned Structured programming goto label switch fall through Expressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next \"sequence point\"; sequence points include the end of each expression statement, and the entry to and return from each function call. Sequence points also occur during evaluation of expressions containing certain operators (&&, ||, ?: and the comma operator). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages. sequence point ?: comma operator Kernighan and Ritchie say in the Introduction of The C Programming Language: \"C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better.\"[31] The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software. [31] [ ] Character set [edit] [ edit edit ] The basic C source character set includes the following characters: Lowercase and uppercase letters of the ISO basic Latin alphabet: a\u2013z, A\u2013Z ISO basic Latin alphabet Decimal digits: 0\u20139 Graphic characters: ! \" # % & ' ( ) * + , - . / : ; < = > ? [ \\ ] ^ _ { | } ~ Whitespace characters: space, horizontal tab, vertical tab, form feed, newline Whitespace characters space horizontal tab vertical tab form feed newline The newline character indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as such. Additional multi-byte encoded characters may be used in string literals, but they are not entirely portable. The latest C standard (C11) allows multi-national Unicode characters to be embedded portably within C source text by using \\uXXXX or \\UXXXXXXXX encoding (where X denotes a hexadecimal character), although this feature is not yet widely implemented.[needs update] string literals portable C11 needs update needs update The basic C execution character set contains the same characters, along with representations for alert, backspace, and carriage return. Run-time support for extended character sets has increased with each revision of the C standard. alert backspace carriage return Run-time Reserved words [edit] [ edit edit ] The following reserved words are case sensitive. case sensitive C89 has 32 reserved words, also known as 'keywords', which cannot be used for any purposes other than those for which they are predefined: auto break break case char const const continue continue default do double double else else enum enum extern extern float float for for goto goto if if int int long long register register return return short short signed signed sizeof sizeof static static struct struct switch switch typedef typedef union union unsigned unsigned void void volatile volatile while while C99 added five more reserved words: (\u2021 indicates an alternative spelling alias for a C23 keyword) inline inline restrict restrict _Bool \u2021 _Complex _Complex _Imaginary _Imaginary C11 added seven more reserved words:[32] (\u2021 indicates an alternative spelling alias for a C23 keyword) [32] [ ] _Alignas \u2021 _Alignof \u2021 _Atomic _Generic _Noreturn _Static_assert \u2021 _Thread_local \u2021 C23 reserved fifteen more words: alignas alignof bool constexpr false nullptr static_assert thread_local true typeof typeof_unqual _BitInt _Decimal32 _Decimal64 _Decimal128 Most of the recently reserved words begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations. Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language. Some standard headers do define more convenient synonyms for underscored identifiers. Some of those words were added as keywords with their conventional spelling in C23 and the corresponding macros were removed. Prior to C89, entry was reserved as a keyword. In the second edition of their book The C Programming Language, which describes what became known as C89, Kernighan and Ritchie wrote, \"The ... [keyword] entry, formerly reserved but never used, is no longer reserved.\" and \"The stillborn entry keyword is withdrawn.\"[33] The C Programming Language [33] [ ] Operators [edit] [ edit edit ] Operators in C and C++ C supports a rich set of operators, which are symbols used within an expression to specify the manipulations to be performed while evaluating that expression. C has operators for: operators expression arithmetic: +, -, *, /, % arithmetic + - * / % assignment: = assignment augmented assignment: +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= augmented assignment bitwise logic: ~, &, |, ^ bitwise logic bitwise shifts: <<, >> bitwise shifts Boolean logic: !, &&, || Boolean logic conditional evaluation: ? : conditional evaluation ? : equality testing: ==, != == != calling functions: ( ) calling functions increment and decrement: ++, -- increment and decrement member selection: ., -> member selection object size: sizeof sizeof type: typeof, typeof_unqual since C23 typeof order relations: <, <=, >, >= order relations reference and dereference: &, *, [ ] reference and dereference sequencing: , , subexpression grouping: ( ) subexpression grouping type conversion: (typename) type conversion C uses the operator = (used in mathematics to express equality) to indicate assignment, following the precedent of Fortran and PL/I, but unlike ALGOL and its derivatives. C uses the operator == to test for equality. The similarity between the operators for assignment and equality may result in the accidental use of one in place of the other, and in many cases the mistake does not produce an error message (although some compilers produce warnings). For example, the conditional expression if (a == b + 1) might mistakenly be written as if (a = b + 1), which will be evaluated as true unless the value of a is 0 after the assignment.[34] Fortran PL/I ALGOL [34] [ ] The C operator precedence is not always intuitive. For example, the operator == binds more tightly than (is executed prior to) the operators & (bitwise AND) and | (bitwise OR) in expressions such as x & 1 == 0, which must be written as (x & 1) == 0 if that is the coder's intent.[35] operator precedence [35] [ ] \"Hello, world\" example [edit] [ edit edit ] \"Hello, World!\" program Brian Kernighan The \"hello, world\" example that appeared in the first edition of K&R has become the model for an introductory program in most programming textbooks. The program prints \"hello, world\" to the standard output, which is usually a terminal or screen display. K&R standard output The original version was:[36] [36] [ ] main () { printf ( \"hello, world \\n \" ); } A standard-conforming \"hello, world\" program is:[a] [a] [ ] #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); } The first line of the program contains a preprocessing directive, indicated by #include. This causes the compiler to replace that line of code with the entire text of the stdio.h header file, which contains declarations for standard input and output functions such as printf and scanf. The angle brackets surrounding stdio.h indicate that the header file can be located using a search strategy that prefers headers provided with the compiler to other headers having the same name (as opposed to double quotes which typically include local or project-specific header files). preprocessing directive stdio.h The second line indicates that a function named main is being defined. The main function serves a special purpose in C programs; the run-time environment calls the main function to begin program execution. The type specifier int indicates that the value returned to the invoker (in this case the run-time environment) as a result of evaluating the main function, is an integer. The keyword void as a parameter list indicates that the main function takes no arguments.[b] main run-time environment [b] [ ] The opening curly brace indicates the beginning of the code that defines the main function. The next line of the program is a statement that calls (i.e. diverts execution to) a function named printf, which in this case is supplied from a system library. In this call, the printf function is passed (i.e. provided with) a single argument, which is the address of the first character in the string literal \"hello, world\\n\". The string literal is an unnamed array set up automatically by the compiler, with elements of type char and a final NULL character (ASCII value 0) marking the end of the array (to allow printf to determine the length of the string). The NULL character can also be written as the escape sequence \\0. The \\n is a standard escape sequence that C translates to a newline character, which, on output, signifies the end of the current line. The return value of the printf function is of type int, but it is silently discarded since it is not used. (A more careful program might test the return value to check that the printf function succeeded.) The semicolon ; terminates the statement. printf library address string literal array NULL character escape sequence newline The closing curly brace indicates the end of the code for the main function. According to the C99 specification and newer, the main function (unlike any other function) will implicitly return a value of 0 upon reaching the } that terminates the function.[c] The return value of 0 is interpreted by the run-time system as an exit code indicating successful execution of the function.[37] [c] [ ] [37] [ ] Data types [edit] [ edit edit ] C data types verification Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. improve this article adding citations to reliable sources (October 2012) October 2012 (Learn how and when to remove this message) Learn how and when to remove this message The type system in C is static and weakly typed, which makes it similar to the type system of ALGOL descendants such as Pascal.[38] There are built-in types for integers of various sizes, both signed and unsigned, floating-point numbers, and enumerated types (enum). Integer type char is often used for single-byte characters. C99 added a Boolean data type. There are also derived types including arrays, pointers, records (struct), and unions (union). type system static weakly typed ALGOL Pascal [38] [ ] floating-point numbers Boolean data type arrays pointers records struct unions C is often used in low-level systems programming where escapes from the type system may be necessary. The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using a type cast to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way. type cast Some find C's declaration syntax unintuitive, particularly for function pointers. (Ritchie's idea was to declare identifiers in contexts resembling their use: \"declaration reflects use\".)[39] function pointers declaration reflects use [39] [ ] C's usual arithmetic conversions allow for efficient code to be generated, but can sometimes produce unexpected results. For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned. This can generate unexpected results if the signed value is negative. Pointers [edit] [ edit edit ] C supports the use of pointers, a type of reference that records the address or location of an object or function in memory. Pointers can be dereferenced to access data stored at the address pointed to, or to invoke a pointed-to function. Pointers can be manipulated using assignment or pointer arithmetic. The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time. Pointer arithmetic is automatically scaled by the size of the pointed-to data type. pointers reference pointer arithmetic Pointers are used for many purposes in C. Text strings are commonly manipulated using pointers into arrays of characters. Dynamic memory allocation is performed using pointers; the result of a malloc is usually cast to the data type of the data to be stored. Many data types, such as trees, are commonly implemented as dynamically allocated struct objects linked together using pointers. Pointers to other pointers are often used in multi-dimensional arrays and arrays of struct objects. Pointers to functions (function pointers) are useful for passing functions as arguments to higher-order functions (such as qsort or bsearch), in dispatch tables, or as callbacks to event handlers.[37] Text strings Dynamic memory allocation cast trees function pointers higher-order functions qsort bsearch dispatch tables callbacks event handlers [37] [ ] A null pointer value explicitly points to no valid location. Dereferencing a null pointer value is undefined, often resulting in a segmentation fault. Null pointer values are useful for indicating special cases such as no \"next\" pointer in the final node of a linked list, or as an error indication from functions returning pointers. In appropriate contexts in source code, such as for assigning to a pointer variable, a null pointer constant can be written as 0, with or without explicit casting to a pointer type, as the NULL macro defined by several standard headers or, since C23 with the constant nullptr. In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true. null pointer segmentation fault linked list Void pointers (void *) point to objects of unspecified type, and can therefore be used as \"generic\" data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type.[37] [37] [ ] Careless use of pointers is potentially dangerous. Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects. Although properly used pointers point to safe places, they can be made to point to unsafe places by using invalid pointer arithmetic; the objects they point to may continue to be used after deallocation (dangling pointers); they may be used without having been initialized (wild pointers); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer. In general, C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive reference types. pointer arithmetic dangling pointers wild pointers reference Arrays [edit] [ edit edit ] C string handling Array types in C are traditionally of a fixed, static size specified at compile time. The more recent C99 standard also allows a form of variable-length arrays. However, it is also possible to allocate a block of memory (of arbitrary size) at run-time, using the standard library's malloc function, and treat it as an array. Array Since arrays are always accessed (in effect) via pointers, array accesses are typically not checked against the underlying array size, although some compilers may provide bounds checking as an option.[40][41] Array bounds violations are therefore possible and can lead to various repercussions, including illegal memory accesses, corruption of data, buffer overruns, and run-time exceptions. bounds checking [40] [ ] [41] [ ] buffer overruns C does not have a special provision for declaring multi-dimensional arrays, but rather relies on recursion within the type system to declare arrays of arrays, which effectively accomplishes the same thing. The index values of the resulting \"multi-dimensional array\" can be thought of as increasing in row-major order. Multi-dimensional arrays are commonly used in numerical algorithms (mainly from applied linear algebra) to store matrices. The structure of the C array is well suited to this particular task. However, in early versions of C the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this was to allocate the array with an additional \"row vector\" of pointers to the columns.) C99 introduced \"variable-length arrays\" which address this issue. multi-dimensional arrays recursion row-major order linear algebra The following example using modern C (C99 or later) shows allocation of a two-dimensional array on the heap and the use of multi-dimensional array indexing for accesses (which can use bounds-checking on many C compilers): int func ( int N , int M ) { float ( * p )[ N ] [ M ] = malloc ( sizeof * p ); if ( p == 0 ) return -1 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < M ; j ++ ) ( * p )[ i ] [ j ] = i + j ; print_array ( N , M , p ); free ( p ); return 1 ; } And here is a similar implementation using C99's Auto VLA feature:[d] VLA [d] [ ] int func ( int N , int M ) { // Caution: checks should be made to ensure N*M*sizeof(float) does NOT exceed limitations for auto VLAs and is within available size of stack. float p [ N ] [ M ]; // auto VLA is held on the stack, and sized when the function is invoked for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < M ; j ++ ) p [ i ] [ j ] = i + j ; print_array ( N , M , p ); // no need to free(p) since it will disappear when the function exits, along with the rest of the stack frame return 1 ; } Array\u2013pointer interchangeability [edit] [ edit edit ] The subscript notation x[i] (where x designates a pointer) is syntactic sugar for *(x+i).[42] Taking advantage of the compiler's knowledge of the pointer type, the address that x + i points to is not the base address (pointed to by x) incremented by i bytes, but rather is defined to be the base address incremented by i multiplied by the size of an element that x points to. Thus, x[i] designates the i+1th element of the array. syntactic sugar [42] [ ] Furthermore, in most expression contexts (a notable exception is as operand of sizeof), an expression of array type is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use pass-by-value semantics, arrays are in effect passed by reference. sizeof pass-by-value reference The total size of an array x can be determined by applying sizeof to an expression of array type. The size of an element can be determined by applying the operator sizeof to any dereferenced element of an array A, as in n = sizeof A[0]. Thus, the number of elements in a declared array A can be determined as sizeof A / sizeof A[0]. Note, that if only a pointer to the first element is available as it is often the case in C code because of the automatic conversion described above, the information about the full type of the array and its length are lost. Memory management [edit] [ edit edit ] One of the most important functions of a programming language is to provide facilities for managing memory and the objects that are stored in memory. C provides three principal ways to allocate memory for objects:[37] memory [37] [ ] Static memory allocation: space for the object is provided in the binary at compile-time; these objects have an extent (or lifetime) as long as the binary which contains them is loaded into memory. Static memory allocation extent Automatic memory allocation: temporary objects can be stored on the stack, and this space is automatically freed and reusable after the block in which they are declared is exited. Automatic memory allocation stack Dynamic memory allocation: blocks of memory of arbitrary size can be requested at run-time using library functions such as malloc from a region of memory called the heap; these blocks persist until subsequently freed for reuse by calling the library function realloc or free. Dynamic memory allocation heap These three approaches are appropriate in different situations and have various trade-offs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three. Where possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary.[37] Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on C dynamic memory allocation for an example of dynamically allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated. (Static allocation that is too large is usually detected by the linker or loader, before the program can even begin execution.) [37] [ ] C dynamic memory allocation linker loader Unless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have indeterminate values (typically, whatever bit pattern happens to be present in the storage, which might not even represent a valid value for that type). If the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both false positives and false negatives can occur. bit pattern storage false positives and false negatives Heap memory allocation has to be synchronized with its actual usage in any program to be reused as much as possible. For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before it is deallocated explicitly, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a memory leak. Conversely, it is possible for memory to be freed, but is referenced subsequently, leading to unpredictable results. Typically, the failure symptoms appear in a portion of the program unrelated to the code that causes the error, making it difficult to diagnose the failure. Such issues are ameliorated in languages with automatic garbage collection. memory leak automatic garbage collection Libraries [edit] [ edit edit ] The C programming language uses libraries as its primary method of extension. In C, a library is a set of functions contained within a single \"archive\" file. Each library typically has a header file, which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. For a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires compiler flags (e.g., -lm, shorthand for \"link the math library\").[37] libraries header file compiler flags [37] [ ] The most common C library is the C standard library, which is specified by the ISO and ANSI C standards and comes with every C implementation (implementations which target limited environments such as embedded systems may provide only a subset of the standard library). This library supports stream input and output, memory allocation, mathematics, character strings, and time values. Several separate standard headers (for example, stdio.h) specify the interfaces for these and other standard library facilities. C standard library ISO ANSI C embedded systems Another common set of C library functions are those used by applications specifically targeted for Unix and Unix-like systems, especially functions which provide an interface to the kernel. These functions are detailed in various standards such as POSIX and the Single UNIX Specification. Unix Unix-like kernel POSIX Single UNIX Specification Since many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient object code; programmers then create interfaces to the library so that the routines can be used from higher-level languages like Java, Perl, and Python.[37] object code Java Perl Python [37] [ ] File handling and streams [edit] [ edit edit ] File input and output (I/O) is not part of the C language itself but instead is handled by libraries (such as the C standard library) and their associated header files (e.g. stdio.h). File handling is generally implemented through high-level I/O which works through streams. A stream is from this perspective a data flow that is independent of devices, while a file is a concrete device. The high-level I/O is done through the association of a stream to a file. In the C standard library, a buffer (a memory area or queue) is temporarily used to store data before it is sent to the final destination. This reduces the time spent waiting for slower devices, for example a hard drive or solid-state drive. Low-level I/O functions are not part of the standard C library[clarification needed] but are generally part of \"bare metal\" programming (programming that is independent of any operating system such as most embedded programming). With few exceptions, implementations include low-level I/O. streams buffer hard drive solid-state drive clarification needed clarification needed operating system embedded programming Language tools [edit] [ edit edit ] verification Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. improve this article adding citations to reliable sources (July 2014) July 2014 (Learn how and when to remove this message) Learn how and when to remove this message A number of tools have been developed to help C programmers find and fix statements with undefined behavior or possibly erroneous expressions, with greater rigor than that provided by the compiler. The tool lint was the first such, leading to many others. lint Automated source code checking and auditing are beneficial in any language, and for C many such tools exist, such as Lint. A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors. MISRA C is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems.[43] Lint MISRA C [43] [ ] There are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as bounds checking for arrays, detection of buffer overflow, serialization, dynamic memory tracking, and automatic garbage collection. bounds checking buffer overflow serialization dynamic memory automatic garbage collection Tools such as Purify or Valgrind and linking with libraries containing special versions of the memory allocation functions can help uncover runtime errors in memory usage.[44][45] Purify Valgrind memory allocation functions [44] [ ] [45] [ ] Uses [edit] [ edit edit ] Rationale for use in systems programming [edit] [ edit edit ] C is widely used for systems programming in implementing operating systems and embedded system applications.[46] This is for several reasons: systems programming operating systems embedded system [46] [ ] The C language permits platform hardware and memory to be accessed with pointers and type punning, so system-specific features (e.g. Control/Status Registers, I/O registers) can be configured and used with code written in C \u2013 it allows fullest control of the platform it is running on. type punning Control/Status Registers I/O registers The code generated after compilation does not demand many system features, and can be invoked from some boot code in a straightforward manner \u2013 it is simple to execute. system features The C language statements and expressions typically map well on to sequences of instructions for the target processor, and consequently there is a low run-time demand on system resources \u2013 it is fast to execute. run-time With its rich set of operators, the C language can use many of the features of target CPUs. Where a particular CPU has more esoteric instructions, a language variant can be constructed with perhaps intrinsic functions to exploit those instructions \u2013 it can use practically all the target CPU's features. intrinsic functions The language makes it easy to overlay structures onto blocks of binary data, allowing the data to be comprehended, navigated and modified \u2013 it can write data structures, even file systems. The language supports a rich set of operators, including bit manipulation, for integer arithmetic and logic, and perhaps different sizes of floating point numbers \u2013 it can process appropriately-structured data effectively. C is a fairly small language, with only a handful of statements, and without too many features that generate extensive target code \u2013 it is comprehensible. C has direct control over memory allocation and deallocation, which gives reasonable efficiency and predictable timing to memory-handling operations, without any concerns for sporadic stop-the-world garbage collection events \u2013 it has predictable performance. stop-the-world C permits the use and implementation of different memory allocation schemes, including a typical malloc and free; a more sophisticated mechanism with arenas; or a version for an OS kernel that may suit DMA, use within interrupt handlers, or integrated with the virtual memory system. memory allocation malloc free arenas OS kernel DMA interrupt handlers virtual memory Depending on the linker and environment, C code can also call libraries written in assembly language, and may be called from assembly language \u2013 it interoperates well with other lower-level code. assembly language C and its calling conventions and linker structures are commonly used in conjunction with other high-level languages, with calls both to C and from C supported \u2013 it interoperates well with other high-level code. calling conventions C has a very mature and broad ecosystem, including libraries, frameworks, open source compilers, debuggers and utilities, and is the de facto standard. It is likely the drivers already exist in C, or that there is a similar CPU architecture as a back-end of a C compiler, so there is reduced incentive to choose another language. Used for computationally-intensive libraries [edit] [ edit edit ] C enables programmers to create efficient implementations of algorithms and data structures, because the layer of abstraction from hardware is thin, and its overhead is low, an important criterion for computationally intensive programs. For example, the GNU Multiple Precision Arithmetic Library, the GNU Scientific Library, Mathematica, and MATLAB are completely or partially written in C. Many languages support calling library functions in C, for example, the Python-based framework NumPy uses C for the high-performance and hardware-interacting aspects. GNU Multiple Precision Arithmetic Library GNU Scientific Library Mathematica MATLAB Python NumPy C as an intermediate language [edit] [ edit edit ] C is sometimes used as an intermediate language by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, additional machine-specific code generators are not necessary. C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, that support compilation of generated code. However, some of C's shortcomings have prompted the development of other C-based languages specifically designed for use as intermediate languages, such as C--. Also, contemporary major compilers GCC and LLVM both feature an intermediate representation that is not C, and those compilers support front ends for many languages including C. intermediate language C-based languages C-- GCC LLVM intermediate representation Other languages written in C [edit] [ edit edit ] A consequence of C's wide availability and efficiency is that compilers, libraries and interpreters of other programming languages are often implemented in C.[47] For example, the reference implementations of Python,[48] Perl,[49] Ruby,[50] and PHP[51] are written in C. compilers interpreters [47] [ ] reference implementations Python [48] [ ] Perl [49] [ ] Ruby [50] [ ] PHP [51] [ ] Once used for web development [edit] [ edit edit ] Historically, C was sometimes used for web development using the Common Gateway Interface (CGI) as a \"gateway\" for information between the web application, the server, and the browser.[52] C may have been chosen over interpreted languages because of its speed, stability, and near-universal availability.[53] It is no longer common practice for web development to be done in C,[54] and many other web development tools exist. web development Common Gateway Interface [52] [ ] interpreted languages [53] [ ] [54] [ ] web development tools Web servers [edit] [ edit edit ] The two most popular web servers, Apache HTTP Server and Nginx, are both written in C. These web servers interact with the operating system, listen on TCP ports for HTTP requests, and then serve up static web content, or cause the execution of other languages handling to 'render' content such as PHP, which is itself primarily written in C. C's close-to-the-metal approach allows for the construction of these high-performance software systems. web servers Apache HTTP Server Nginx PHP End-user applications [edit] [ edit edit ] C has also been widely used to implement end-user applications.[55] However, such applications can also be written in newer, higher-level languages. end-user [55] [ ] Limitations [edit] [ edit edit ] the power of assembly language and the convenience of ... assembly language [56] [ ] While C has been popular, influential and hugely successful, it has drawbacks, including: The standard dynamic memory handling with malloc and free is error prone. Improper use can lead to memory leaks and dangling pointers. dynamic memory memory leaks dangling pointers The use of pointers and the direct manipulation of memory means corruption of memory is possible, perhaps due to programmer error, or insufficient checking of bad data. There is some type checking, but it does not apply to areas like variadic functions, and the type checking can be trivially or inadvertently circumvented. It is weakly typed. type checking variadic functions weakly typed Since the code generated by the compiler contains few checks itself, there is a burden on the programmer to consider all possible outcomes, to protect against buffer overruns, array bounds checking, stack overflows, memory exhaustion, and consider race conditions, thread isolation, etc. stack overflows race conditions The use of pointers and the run-time manipulation of these means there may be two ways to access the same data (aliasing), which is not determinable at compile time. This means that some optimisations that may be available to other languages are not possible in C. FORTRAN is considered faster. Some of the standard library functions, e.g. scanf or strncat, can lead to buffer overruns. buffer overruns There is limited standardisation in support for low-level variants in generated code, for example: different function calling conventions and ABI; different structure packing conventions; different byte ordering within larger integers (including endianness). In many language implementations, some of these options may be handled with the preprocessor directive #pragma,[57][58] and some with additional keywords e.g. use __cdecl calling convention. The directive and options are not consistently supported.[59] calling conventions ABI structure packing #pragma [57] [ ] [58] [ ] __cdecl [59] [ ] String handling using the standard library is code-intensive, with explicit memory management required. String handling The language does not directly support object orientation, introspection, run-time expression evaluation, generics, etc. introspection There are few guards against inappropriate use of language features, which may lead to unmaintainable code. In particular, the C preprocessor can hide troubling effects such as double evaluation and worse.[60] This facility for tricky code has been celebrated with competitions such as the International Obfuscated C Code Contest and the Underhanded C Contest. unmaintainable C preprocessor [60] [ ] International Obfuscated C Code Contest Underhanded C Contest C lacks standard support for exception handling and only offers return codes for error checking. The setjmp and longjmp standard library functions have been used[61] to implement a try-catch mechanism via macros. exception handling return codes setjmp and longjmp [61] [ ] For some purposes, restricted styles of C have been adopted, e.g. MISRA C or CERT C, in an attempt to reduce the opportunity for bugs. Databases such as CWE attempt to count the ways C etc. has vulnerabilities, along with recommendations for mitigation. MISRA C CERT C CWE There are tools that can mitigate against some of the drawbacks. Contemporary C compilers include checks which may generate warnings to help identify many potential bugs. tools Related languages [edit] [ edit edit ] TIOBE index [62] [ ] List of C-family programming languages C has both directly and indirectly influenced many later languages such as C++ and Java.[63] The most pervasive influence has been syntactical; all of the languages mentioned combine the statement and (more or less recognizably) expression syntax of C with type systems, data models or large-scale program structures that differ from those of C, sometimes radically. C++ Java [63] [ ] syntax of C Several C or near-C interpreters exist, including Ch and CINT, which can also be used for scripting. Ch CINT When object-oriented programming languages became popular, C++ and Objective-C were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as source-to-source compilers; source code was translated into C, and then compiled with a C compiler.[64] object-oriented programming C++ Objective-C source-to-source compilers [64] [ ] The C++ programming language (originally named \"C with Classes\") was devised by Bjarne Stroustrup as an approach to providing object-oriented functionality with a C-like syntax.[65] C++ adds greater typing strength, scoping, and other tools useful in object-oriented programming, and permits generic programming via templates. Nearly a superset of C, C++ now[when?] supports most of C, with a few exceptions. C++ Classes Bjarne Stroustrup object-oriented [65] [ ] generic programming when? when? a few exceptions Objective-C was originally a very \"thin\" layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic/static typing paradigm. Objective-C derives its syntax from both C and Smalltalk: syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk. Objective-C superset Smalltalk In addition to C++ and Objective-C, Ch, Cilk, and Unified Parallel C are nearly supersets of C. C++ Objective-C Ch Cilk Unified Parallel C See also [edit] [ edit edit ] Computer programming portal Computer programming portal Computer programming portal Free and open-source software portal Free and open-source software portal Free and open-source software portal Compatibility of C and C++ Compatibility of C and C++ Comparison of Pascal and C Comparison of Pascal and C Comparison of programming languages Comparison of programming languages International Obfuscated C Code Contest International Obfuscated C Code Contest List of C-family programming languages List of C-family programming languages List of C compilers List of C compilers Notes [edit] [ edit edit ] ^ The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced. ^ ^ The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced. ^ The main function actually has two arguments, int argc and char *argv[], respectively, which can be used to handle command-line arguments. The ISO C standard (section 5.1.2.2.1) requires both forms of main to be supported, which is special treatment not afforded to any other function. ^ ^ The main function actually has two arguments, int argc and char *argv[], respectively, which can be used to handle command-line arguments. The ISO C standard (section 5.1.2.2.1) requires both forms of main to be supported, which is special treatment not afforded to any other function. command-line arguments ^ Prior to C99, an explicit return 0; statement was required at the end of the main function. ^ ^ Prior to C99, an explicit return 0; statement was required at the end of the main function. ^ Code of print_array (not shown) slightly differs,[why?] too. ^ ^ Code of print_array (not shown) slightly differs,[why?] too. why? why? References [edit] [ edit edit ] ^ a b Prinz, Peter; Crawford, Tony (December 16, 2005). C in a Nutshell. O'Reilly Media, Inc. p. 3. ISBN 9780596550714. ^ a b a b Prinz, Peter; Crawford, Tony (December 16, 2005). C in a Nutshell. O'Reilly Media, Inc. p. 3. ISBN 9780596550714. C in a Nutshell ISBN 9780596550714 ^ Ritchie (1993): \"Thompson had made a brief attempt to produce a system coded in an early version of C\u2014before structures\u2014in 1972, but gave up the effort.\" ^ ^ Ritchie (1993): \"Thompson had made a brief attempt to produce a system coded in an early version of C\u2014before structures\u2014in 1972, but gave up the effort.\" Ritchie (1993) ^ \"N3221 \u2013 Editor's Report, Post January 2024 Strasbourg France Meeting\". ISO/IEC JTC1/SC22/WG14. Open Standards. February 21, 2024. Retrieved May 24, 2024. ^ ^ \"N3221 \u2013 Editor's Report, Post January 2024 Strasbourg France Meeting\". ISO/IEC JTC1/SC22/WG14. Open Standards. February 21, 2024. Retrieved May 24, 2024. \"N3221 \u2013 Editor's Report, Post January 2024 Strasbourg France Meeting\" . Retrieved May 24, 2024 May 24, ^ Ritchie (1993): \"The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of.\" ^ ^ Ritchie (1993): \"The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of.\" Ritchie (1993) ^ a b \"Verilog HDL (and C)\" (PDF). The Research School of Computer Science at the Australian National University. June 3, 2010. Archived from the original (PDF) on November 6, 2013. Retrieved August 19, 2013. 1980s: Verilog first introduced; Verilog inspired by the C programming language ^ a b a b \"Verilog HDL (and C)\" (PDF). The Research School of Computer Science at the Australian National University. June 3, 2010. Archived from the original (PDF) on November 6, 2013. Retrieved August 19, 2013. 1980s: Verilog first introduced; Verilog inspired by the C programming language \"Verilog HDL (and C)\" (PDF) the original (PDF) . Retrieved August 19, 2013 August 19, ^ \"The name is based on, and pronounced like the letter C in the English alphabet\". the c programming language sound. English Chinese Dictionary. Archived from the original on November 17, 2022. Retrieved November 17, 2022. ^ ^ \"The name is based on, and pronounced like the letter C in the English alphabet\". the c programming language sound. English Chinese Dictionary. Archived from the original on November 17, 2022. Retrieved November 17, 2022. \"The name is based on, and pronounced like the letter C in the English alphabet\" Archived . Retrieved November 17, 2022 November 17, ^ Munoz, Daniel. \"After All These Years, the World is Still Powered by C Programming | Toptal\". Toptal Engineering Blog. Retrieved June 15, 2024. ^ ^ Munoz, Daniel. \"After All These Years, the World is Still Powered by C Programming | Toptal\". Toptal Engineering Blog. Retrieved June 15, 2024. \"After All These Years, the World is Still Powered by C Programming | Toptal\" . Retrieved June 15, 2024 June 15, ^ \"C Language Drops to Lowest Popularity Rating\". Developer.com. August 9, 2016. Archived from the original on August 22, 2022. Retrieved August 1, 2022. ^ ^ \"C Language Drops to Lowest Popularity Rating\". Developer.com. August 9, 2016. Archived from the original on August 22, 2022. Retrieved August 1, 2022. \"C Language Drops to Lowest Popularity Rating\" the original . Retrieved August 1, 2022 August 1, ^ a b c d e f Ritchie (1993) ^ a b c d e f a b c d e f Ritchie (1993) Ritchie (1993) ^ \"Programming Language Popularity\". 2009. Archived from the original on January 16, 2009. Retrieved January 16, 2009. ^ ^ \"Programming Language Popularity\". 2009. Archived from the original on January 16, 2009. Retrieved January 16, 2009. \"Programming Language Popularity\" the original . Retrieved January 16, 2009 January 16, ^ \"TIOBE Programming Community Index\". 2009. Archived from the original on May 4, 2009. Retrieved May 6, 2009. ^ ^ \"TIOBE Programming Community Index\". 2009. Archived from the original on May 4, 2009. Retrieved May 6, 2009. \"TIOBE Programming Community Index\" the original . Retrieved May 6, 2009 May 6, ^ Ward, Terry A. (August 1983). \"Annotated C / A Bibliography of the C Language\". Byte. p. 268. Retrieved January 31, 2015. ^ ^ Ward, Terry A. (August 1983). \"Annotated C / A Bibliography of the C Language\". Byte. p. 268. Retrieved January 31, 2015. \"Annotated C / A Bibliography of the C Language\" . Retrieved January 31, 2015 January 31, ^ \"TIOBE Index for September 2024\". Archived from the original on September 18, 2024. Retrieved September 20, 2024. ^ ^ \"TIOBE Index for September 2024\". Archived from the original on September 18, 2024. Retrieved September 20, 2024. \"TIOBE Index for September 2024\" Archived . Retrieved September 20, 2024 September 20, ^ Ritchie, Dennis. \"BCPL to B to C\". lysator.liu.se. Archived from the original on December 12, 2019. Retrieved September 10, 2019. ^ ^ Ritchie, Dennis. \"BCPL to B to C\". lysator.liu.se. Archived from the original on December 12, 2019. Retrieved September 10, 2019. \"BCPL to B to C\" Archived . Retrieved September 10, 2019 September 10, ^ a b c d e Jensen, Richard (December 9, 2020). \"\"A damn stupid thing to do\"\u2014the origins of C\". Ars Technica. Archived from the original on March 28, 2022. Retrieved March 28, 2022. ^ a b c d e a b c d e Jensen, Richard (December 9, 2020). \"\"A damn stupid thing to do\"\u2014the origins of C\". Ars Technica. Archived from the original on March 28, 2022. Retrieved March 28, 2022. \"\"A damn stupid thing to do\"\u2014the origins of C\" Archived . Retrieved March 28, 2022 March 28, ^ a b Johnson, S. C.; Ritchie, D. M. (1978). \"Portability of C Programs and the UNIX System\". Bell System Tech. J. 57 (6): 2021\u20132048. CiteSeerX 10.1.1.138.35. doi:10.1002/j.1538-7305.1978.tb02141.x. ISSN 0005-8580. S2CID 17510065. (Note: The PDF is an OCR scan of the original, and contains a rendering of \"IBM 370\" as \"IBM 310\".) ^ a b a b Johnson, S. C.; Ritchie, D. M. (1978). \"Portability of C Programs and the UNIX System\". Bell System Tech. J. 57 (6): 2021\u20132048. CiteSeerX 10.1.1.138.35. doi:10.1002/j.1538-7305.1978.tb02141.x. ISSN 0005-8580. S2CID 17510065. (Note: The PDF is an OCR scan of the original, and contains a rendering of \"IBM 370\" as \"IBM 310\".) Johnson, S. C. Ritchie, D. M. 2021\u2013 CiteSeerX 10.1.1.138.35 10.1.1.138.35 doi 10.1002/j.1538-7305.1978.tb02141.x ISSN 0005-8580 S2CID 17510065 ^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971\u20131986 (PDF) (Technical report). CSTR. Bell Labs. p. 10. 139. Archived (PDF) from the original on November 11, 2017. Retrieved February 1, 2015. ^ ^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971\u20131986 (PDF) (Technical report). CSTR. Bell Labs. p. 10. 139. Archived (PDF) from the original on November 11, 2017. Retrieved February 1, 2015. McIlroy, M. D. A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971\u20131986 (PDF) Archived (PDF) . Retrieved February 1, 2015 February 1, ^ Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The C Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110163-0. ^ ^ Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The C Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110163-0. Kernighan, Brian W. Ritchie, Dennis M. The C Programming Language Englewood Cliffs, NJ Prentice Hall ISBN 978-0-13-110163-0 ^ \"C manual pages\". FreeBSD Miscellaneous Information Manual (FreeBSD 13.0 ed.). May 30, 2011. Archived from the original on January 21, 2021. Retrieved January 15, 2021. [1] Archived January 21, 2021, at the Wayback Machine ^ ^ \"C manual pages\". FreeBSD Miscellaneous Information Manual (FreeBSD 13.0 ed.). May 30, 2011. Archived from the original on January 21, 2021. Retrieved January 15, 2021. [1] Archived January 21, 2021, at the Wayback Machine FreeBSD Miscellaneous Information Manual Archived . Retrieved January 15, 2021 January 15, [1] Archived Wayback Machine ^ Kernighan, Brian W.; Ritchie, Dennis M. (March 1988). The C Programming Language (2nd ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110362-7. ^ ^ Kernighan, Brian W.; Ritchie, Dennis M. (March 1988). The C Programming Language (2nd ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110362-7. Kernighan, Brian W. Ritchie, Dennis M. The C Programming Language Englewood Cliffs, NJ Prentice Hall ISBN 978-0-13-110362-7 ^ Stroustrup, Bjarne (2002). Sibling rivalry: C and C++ (PDF) (Report). AT&T Labs. Archived (PDF) from the original on August 24, 2014. Retrieved April 14, 2014. ^ ^ Stroustrup, Bjarne (2002). Sibling rivalry: C and C++ (PDF) (Report). AT&T Labs. Archived (PDF) from the original on August 24, 2014. Retrieved April 14, 2014. Stroustrup, Bjarne Sibling rivalry: C and C++ (PDF) Archived (PDF) . Retrieved April 14, 2014 April 14, ^ \"Rationale for American National Standard for Information Systems \u2013 Programming Language \u2013 C\". Archived from the original on July 17, 2024. Retrieved July 17, 2024. ^ ^ \"Rationale for American National Standard for Information Systems \u2013 Programming Language \u2013 C\". Archived from the original on July 17, 2024. Retrieved July 17, 2024. \"Rationale for American National Standard for Information Systems \u2013 Programming Language \u2013 C\" the original . Retrieved July 17, 2024 July 17, ^ C Integrity. International Organization for Standardization. March 30, 1995. Archived from the original on July 25, 2018. Retrieved July 24, 2018. ^ ^ C Integrity. International Organization for Standardization. March 30, 1995. Archived from the original on July 25, 2018. Retrieved July 24, 2018. C Integrity Archived . Retrieved July 24, 2018 July 24, ^ \"JTC1/SC22/WG14 \u2013 C\". Home page. ISO/IEC. Archived from the original on February 12, 2018. Retrieved June 2, 2011. ^ ^ \"JTC1/SC22/WG14 \u2013 C\". Home page. ISO/IEC. Archived from the original on February 12, 2018. Retrieved June 2, 2011. \"JTC1/SC22/WG14 \u2013 C\" Archived . Retrieved June 2, 2011 June 2, ^ Andrew Binstock (October 12, 2011). \"Interview with Herb Sutter\". Dr. Dobbs. Archived from the original on August 2, 2013. Retrieved September 7, 2013. ^ ^ Andrew Binstock (October 12, 2011). \"Interview with Herb Sutter\". Dr. Dobbs. Archived from the original on August 2, 2013. Retrieved September 7, 2013. \"Interview with Herb Sutter\" Dr. Dobbs Archived . Retrieved September 7, 2013 September 7, ^ \"WG14-N3132 : Revised C23 Schedule\" (PDF). open-std.org. June 4, 2023. Archived (PDF) from the original on June 9, 2023. ^ ^ \"WG14-N3132 : Revised C23 Schedule\" (PDF). open-std.org. June 4, 2023. Archived (PDF) from the original on June 9, 2023. \"WG14-N3132 : Revised C23 Schedule\" (PDF) Archived (PDF) ^ \"WG14-N3220 : Working Draft, C2y\" (PDF). open-std.org. February 21, 2024. Archived (PDF) from the original on February 26, 2024. ^ ^ \"WG14-N3220 : Working Draft, C2y\" (PDF). open-std.org. February 21, 2024. Archived (PDF) from the original on February 26, 2024. \"WG14-N3220 : Working Draft, C2y\" (PDF) Archived (PDF) ^ \"TR 18037: Embedded C\" (PDF). open-std.org. April 4, 2006. ISO/IEC JTC1 SC22 WG14 N1169. Archived (PDF) from the original on February 25, 2021. Retrieved July 26, 2011. ^ ^ \"TR 18037: Embedded C\" (PDF). open-std.org. April 4, 2006. ISO/IEC JTC1 SC22 WG14 N1169. Archived (PDF) from the original on February 25, 2021. Retrieved July 26, 2011. \"TR 18037: Embedded C\" (PDF) Archived (PDF) . Retrieved July 26, 2011 July 26, ^ Harbison, Samuel P.; Steele, Guy L. (2002). C: A Reference Manual (5th ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-089592-9. Contains a BNF grammar for C. ^ ^ Harbison, Samuel P.; Steele, Guy L. (2002). C: A Reference Manual (5th ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-089592-9. Contains a BNF grammar for C. Steele, Guy L. Englewood Cliffs, NJ Prentice Hall ISBN 978-0-13-089592-9 BNF ^ Kernighan & Ritchie (1988), p. 192. ^ ^ Kernighan & Ritchie (1988), p. 192. Kernighan & Ritchie (1988) ^ Kernighan & Ritchie (1978), p. 3. ^ ^ Kernighan & Ritchie (1978), p. 3. Kernighan & Ritchie (1978) ^ \"ISO/IEC 9899:201x (ISO C11) Committee Draft\" (PDF). open-std.org. December 2, 2010. Archived (PDF) from the original on December 22, 2017. Retrieved September 16, 2011. ^ ^ \"ISO/IEC 9899:201x (ISO C11) Committee Draft\" (PDF). open-std.org. December 2, 2010. Archived (PDF) from the original on December 22, 2017. Retrieved September 16, 2011. \"ISO/IEC 9899:201x (ISO C11) Committee Draft\" (PDF) Archived (PDF) . Retrieved September 16, 2011 September 16, ^ Kernighan & Ritchie (1988), pp. 192, 259. ^ ^ Kernighan & Ritchie (1988), pp. 192, 259. Kernighan & Ritchie (1988) ^ \"10 Common Programming Mistakes in C++\". Cs.ucr.edu. Archived from the original on October 21, 2008. Retrieved June 26, 2009. ^ ^ \"10 Common Programming Mistakes in C++\". Cs.ucr.edu. Archived from the original on October 21, 2008. Retrieved June 26, 2009. \"10 Common Programming Mistakes in C++\" Archived . Retrieved June 26, 2009 June 26, ^ Schultz, Thomas (2004). C and the 8051 (3rd ed.). Otsego, MI: PageFree Publishing Inc. p. 20. ISBN 978-1-58961-237-2. Retrieved February 10, 2012. ^ ^ Schultz, Thomas (2004). C and the 8051 (3rd ed.). Otsego, MI: PageFree Publishing Inc. p. 20. ISBN 978-1-58961-237-2. Retrieved February 10, 2012. C and the 8051 ISBN 978-1-58961-237-2 . Retrieved February 10, 2012 February 10, ^ Kernighan & Ritchie (1978), p. 6. ^ ^ Kernighan & Ritchie (1978), p. 6. Kernighan & Ritchie (1978) ^ a b c d e f g Klemens, Ben (2013). 21st Century C. O'Reilly Media. ISBN 978-1-4493-2714-9. ^ a b c d e f g a b c d e f g Klemens, Ben (2013). 21st Century C. O'Reilly Media. ISBN 978-1-4493-2714-9. Klemens, Ben O'Reilly Media ISBN 978-1-4493-2714-9 ^ Feuer, Alan R.; Gehani, Narain H. (March 1982). \"Comparison of the Programming Languages C and Pascal\". ACM Computing Surveys. 14 (1): 73\u201392. doi:10.1145/356869.356872. S2CID 3136859. ^ ^ Feuer, Alan R.; Gehani, Narain H. (March 1982). \"Comparison of the Programming Languages C and Pascal\". ACM Computing Surveys. 14 (1): 73\u201392. doi:10.1145/356869.356872. S2CID 3136859. 73\u2013 doi 10.1145/356869.356872 S2CID 3136859 ^ Kernighan & Ritchie (1988), p. 122. ^ ^ Kernighan & Ritchie (1988), p. 122. Kernighan & Ritchie (1988) ^ For example, gcc provides _FORTIFY_SOURCE. \"Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE)\". fedoraproject.org. Archived from the original on January 7, 2007. Retrieved August 5, 2012. ^ ^ For example, gcc provides _FORTIFY_SOURCE. \"Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE)\". fedoraproject.org. Archived from the original on January 7, 2007. Retrieved August 5, 2012. \"Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE)\" Archived . Retrieved August 5, 2012 August 5, ^ \u0e40\u0e2d\u0e35\u0e48\u0e22\u0e21\u0e2a\u0e34\u0e23\u0e34\u0e27\u0e07\u0e28\u0e4c, \u0e42\u0e2d\u0e20\u0e32\u0e28 (2016). Programming with C. Bangkok, Thailand: SE-EDUCATION PUBLIC COMPANY LIMITED. pp. 225\u2013230. ISBN 978-616-08-2740-4. ^ ^ \u0e40\u0e2d\u0e35\u0e48\u0e22\u0e21\u0e2a\u0e34\u0e23\u0e34\u0e27\u0e07\u0e28\u0e4c, \u0e42\u0e2d\u0e20\u0e32\u0e28 (2016). Programming with C. Bangkok, Thailand: SE-EDUCATION PUBLIC COMPANY LIMITED. pp. 225\u2013230. ISBN 978-616-08-2740-4. 225\u2013 ISBN 978-616-08-2740-4 ^ Raymond, Eric S. (October 11, 1996). The New Hacker's Dictionary (3rd ed.). MIT Press. p. 432. ISBN 978-0-262-68092-9. Retrieved August 5, 2012. ^ ^ Raymond, Eric S. (October 11, 1996). The New Hacker's Dictionary (3rd ed.). MIT Press. p. 432. ISBN 978-0-262-68092-9. Retrieved August 5, 2012. Raymond, Eric S. The New Hacker's Dictionary ISBN 978-0-262-68092-9 . Retrieved August 5, 2012 August 5, ^ \"Man Page for lint (freebsd Section 1)\". unix.com. May 24, 2001. Retrieved July 15, 2014. ^ ^ \"Man Page for lint (freebsd Section 1)\". unix.com. May 24, 2001. Retrieved July 15, 2014. \"Man Page for lint (freebsd Section 1)\" . Retrieved July 15, 2014 July 15, ^ \"CS107 Valgrind Memcheck\". web.stanford.edu. Retrieved June 23, 2023. ^ ^ \"CS107 Valgrind Memcheck\". web.stanford.edu. Retrieved June 23, 2023. \"CS107 Valgrind Memcheck\" . Retrieved June 23, 2023 June 23, ^ Hastings, Reed; Joyce, Bob. \"Purify: Fast Detection of Memory Leaks and Access Errors\" (PDF). Pure Software Inc.: 9. ^ ^ Hastings, Reed; Joyce, Bob. \"Purify: Fast Detection of Memory Leaks and Access Errors\" (PDF). Pure Software Inc.: 9. \"Purify: Fast Detection of Memory Leaks and Access Errors\" (PDF) ^ Dale, Nell B.; Weems, Chip (2014). Programming and problem solving with C++ (6th ed.). Burlington, Massachusetts: Jones & Bartlett Learning. ISBN 978-1449694289. OCLC 894992484. ^ ^ Dale, Nell B.; Weems, Chip (2014). Programming and problem solving with C++ (6th ed.). Burlington, Massachusetts: Jones & Bartlett Learning. ISBN 978-1449694289. OCLC 894992484. ISBN 978-1449694289 OCLC 894992484 ^ \"C \u2013 the mother of all languages\". ICT Academy at IITK. November 13, 2018. Archived from the original on May 31, 2021. Retrieved October 11, 2022. ^ ^ \"C \u2013 the mother of all languages\". ICT Academy at IITK. November 13, 2018. Archived from the original on May 31, 2021. Retrieved October 11, 2022. \"C \u2013 the mother of all languages\" the original . Retrieved October 11, 2022 October 11, ^ \"1. Extending Python with C or C++\". Python 3.10.7 documentation. Archived from the original on November 5, 2012. Retrieved October 11, 2022. ^ ^ \"1. Extending Python with C or C++\". Python 3.10.7 documentation. Archived from the original on November 5, 2012. Retrieved October 11, 2022. \"1. Extending Python with C or C++\" Archived . Retrieved October 11, 2022 October 11, ^ Conrad, Michael (January 22, 2018). \"An overview of the Perl 5 engine\". Opensource.com. Archived from the original on May 26, 2022. Retrieved October 11, 2022. ^ ^ Conrad, Michael (January 22, 2018). \"An overview of the Perl 5 engine\". Opensource.com. Archived from the original on May 26, 2022. Retrieved October 11, 2022. \"An overview of the Perl 5 engine\" Archived . Retrieved October 11, 2022 October 11, ^ \"To Ruby From C and C++\". Ruby Programming Language. Archived from the original on August 12, 2013. Retrieved October 11, 2022. ^ ^ \"To Ruby From C and C++\". Ruby Programming Language. Archived from the original on August 12, 2013. Retrieved October 11, 2022. \"To Ruby From C and C++\" Archived . Retrieved October 11, 2022 October 11, ^ Para, Michael (August 3, 2022). \"What is PHP? How to Write Your First PHP Program\". freeCodeCamp. Archived from the original on August 4, 2022. Retrieved October 11, 2022. ^ ^ Para, Michael (August 3, 2022). \"What is PHP? How to Write Your First PHP Program\". freeCodeCamp. Archived from the original on August 4, 2022. Retrieved October 11, 2022. \"What is PHP? How to Write Your First PHP Program\" Archived . Retrieved October 11, 2022 October 11, ^ Dr. Dobb's Sourcebook. U.S.: Miller Freeman, Inc. November\u2013December 1995. ^ ^ Dr. Dobb's Sourcebook. U.S.: Miller Freeman, Inc. November\u2013December 1995. ^ \"Using C for CGI Programming\". linuxjournal.com. March 1, 2005. Archived from the original on February 13, 2010. Retrieved January 4, 2010. ^ ^ \"Using C for CGI Programming\". linuxjournal.com. March 1, 2005. Archived from the original on February 13, 2010. Retrieved January 4, 2010. \"Using C for CGI Programming\" Archived . Retrieved January 4, 2010 January 4, ^ Perkins, Luc (September 17, 2013). \"Web development in C: crazy? Or crazy like a fox?\". Medium. Archived from the original on October 4, 2014. Retrieved April 8, 2022. ^ ^ Perkins, Luc (September 17, 2013). \"Web development in C: crazy? Or crazy like a fox?\". Medium. Archived from the original on October 4, 2014. Retrieved April 8, 2022. \"Web development in C: crazy? Or crazy like a fox?\" Archived . Retrieved April 8, 2022 April 8, ^ Munoz, Daniel. \"After All These Years, the World is Still Powered by C Programming\". Toptal Engineering Blog. Retrieved November 17, 2023. ^ ^ Munoz, Daniel. \"After All These Years, the World is Still Powered by C Programming\". Toptal Engineering Blog. Retrieved November 17, 2023. \"After All These Years, the World is Still Powered by C Programming\" . Retrieved November 17, 2023 November 17, ^ Metz, Cade. \"Dennis Ritchie: The Shoulders Steve Jobs Stood On\". Wired. Archived from the original on April 12, 2022. Retrieved April 19, 2022. ^ ^ Metz, Cade. \"Dennis Ritchie: The Shoulders Steve Jobs Stood On\". Wired. Archived from the original on April 12, 2022. Retrieved April 19, 2022. \"Dennis Ritchie: The Shoulders Steve Jobs Stood On\" Archived . Retrieved April 19, 2022 April 19, ^ corob-msft (March 31, 2022). \"Pragma directives and the __pragma and _Pragma keywords\". Microsoft Learn. Archived from the original on September 24, 2022. Retrieved September 24, 2022. ^ ^ corob-msft (March 31, 2022). \"Pragma directives and the __pragma and _Pragma keywords\". Microsoft Learn. Archived from the original on September 24, 2022. Retrieved September 24, 2022. \"Pragma directives and the __pragma and _Pragma keywords\" Archived . Retrieved September 24, 2022 September 24, ^ \"Pragmas (The C Preprocessor)\". GCC, the GNU Compiler Collection. Archived from the original on June 17, 2002. Retrieved September 24, 2022. ^ ^ \"Pragmas (The C Preprocessor)\". GCC, the GNU Compiler Collection. Archived from the original on June 17, 2002. Retrieved September 24, 2022. \"Pragmas (The C Preprocessor)\" Archived . Retrieved September 24, 2022 September 24, ^ \"Pragmas\". Intel C++ Compiler Classic Developer Guide and Reference. Intel. Archived from the original on April 10, 2022. Retrieved April 10, 2022. ^ ^ \"Pragmas\". Intel C++ Compiler Classic Developer Guide and Reference. Intel. Archived from the original on April 10, 2022. Retrieved April 10, 2022. \"Pragmas\" Archived . Retrieved April 10, 2022 April 10, ^ \"In praise of the C preprocessor\". apenwarr. August 13, 2007. Retrieved July 9, 2023. ^ ^ \"In praise of the C preprocessor\". apenwarr. August 13, 2007. Retrieved July 9, 2023. \"In praise of the C preprocessor\" . Retrieved July 9, 2023 July 9, ^ Roberts, Eric S. (March 21, 1989). \"Implementing Exceptions in C\" (PDF). DEC Systems Research Center. SRC-RR-40. Archived (PDF) from the original on January 15, 2017. Retrieved January 4, 2022. ^ ^ Roberts, Eric S. (March 21, 1989). \"Implementing Exceptions in C\" (PDF). DEC Systems Research Center. SRC-RR-40. Archived (PDF) from the original on January 15, 2017. Retrieved January 4, 2022. \"Implementing Exceptions in C\" (PDF) DEC Systems Research Center Archived (PDF) . Retrieved January 4, 2022 January 4, ^ McMillan, Robert (August 1, 2013). \"Is Java Losing Its Mojo?\". Wired. Archived from the original on February 15, 2017. Retrieved March 5, 2017. ^ ^ McMillan, Robert (August 1, 2013). \"Is Java Losing Its Mojo?\". Wired. Archived from the original on February 15, 2017. Retrieved March 5, 2017. \"Is Java Losing Its Mojo?\" Wired Archived . Retrieved March 5, 2017 March 5, ^ O'Regan, Gerard (September 24, 2015). Pillars of computing : a compendium of select, pivotal technology firms. Springer. ISBN 978-3319214641. OCLC 922324121. ^ ^ O'Regan, Gerard (September 24, 2015). Pillars of computing : a compendium of select, pivotal technology firms. Springer. ISBN 978-3319214641. OCLC 922324121. ISBN 978-3319214641 OCLC 922324121 ^ Rauchwerger, Lawrence (2004). Languages and compilers for parallel computing : 16th international workshop, LCPC 2003, College Station, TX, USA, October 2\u20134, 2003 : revised papers. Springer. ISBN 978-3540246442. OCLC 57965544. ^ ^ Rauchwerger, Lawrence (2004). Languages and compilers for parallel computing : 16th international workshop, LCPC 2003, College Station, TX, USA, October 2\u20134, 2003 : revised papers. Springer. ISBN 978-3540246442. OCLC 57965544. ISBN 978-3540246442 OCLC 57965544 ^ Stroustrup, Bjarne (1993). \"A History of C++: 1979\u20131991\" (PDF). Archived (PDF) from the original on February 2, 2019. Retrieved June 9, 2011. ^ ^ Stroustrup, Bjarne (1993). \"A History of C++: 1979\u20131991\" (PDF). Archived (PDF) from the original on February 2, 2019. Retrieved June 9, 2011. Stroustrup, Bjarne \"A History of C++: 1979\u20131991\" (PDF) Archived (PDF) . Retrieved June 9, 2011 June 9, Sources [edit] [ edit edit ] Ritchie, Dennis M. (March 1993). \"The Development of the C Language\". ACM SIGPLAN Notices. 28 (3). ACM: 201\u2013208. doi:10.1145/155360.155580. By courtesy of the author, also at Ritchie, Dennis M. \"Chistory\". www.bell-labs.com. Retrieved March 29, 2022. Ritchie, Dennis M. \"The Development of the C Language\" 201\u2013 doi 10.1145/155360.155580 10.1145/155360.155580 By courtesy of the author, also at Ritchie, Dennis M. \"Chistory\". www.bell-labs.com. Retrieved March 29, 2022. \"Chistory\" . Retrieved March 29, 2022 March 29, Ritchie, Dennis M. (1993). \"The Development of the C Language\". The Second ACM SIGPLAN Conference on History of Programming Languages (HOPL-II). ACM. pp. 201\u2013208. doi:10.1145/154766.155580. ISBN 0-89791-570-4. Archived from the original on April 11, 2019. Retrieved November 4, 2014. \"The Development of the C Language\" ACM 201\u2013 doi 10.1145/154766.155580 ISBN 0-89791-570-4 the original . Retrieved November 4, 2014 November 4, Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). Prentice Hall. ISBN 0-13-110362-8. Kernighan, Brian W. Ritchie, Dennis M. Prentice Hall ISBN 0-13-110362-8 Further reading [edit] [ edit edit ] Plauger, P.J. (1992). The Standard C Library (1 ed.). Prentice Hall. ISBN 978-0131315099. (source) Plauger, P.J. ISBN 978-0131315099 (source) Banahan, M.; Brady, D.; Doran, M. (1991). The C Book: Featuring the ANSI C Standard (2 ed.). Addison-Wesley. ISBN 978-0201544336. (free) ISBN 978-0201544336 (free) Feuer, Alan R. (1985). The C Puzzle Book (1 ed.). Prentice Hall. ISBN 0131099345. ISBN 0131099345 Harbison, Samuel; Steele, Guy Jr. (2002). C: A Reference Manual (5 ed.). Pearson. ISBN 978-0130895929. (archive) ISBN 978-0130895929 (archive) King, K.N. (2008). C Programming: A Modern Approach (2 ed.). W. W. Norton. ISBN 978-0393979503. (archive) ISBN 978-0393979503 (archive) Griffiths, David; Griffiths, Dawn (2012). Head First C (1 ed.). O'Reilly. ISBN 978-1449399917. ISBN 978-1449399917 Perry, Greg; Miller, Dean (2013). C Programming: Absolute Beginner's Guide (3 ed.). Que. ISBN 978-0789751980. ISBN 978-0789751980 Deitel, Paul; Deitel, Harvey (2015). C: How to Program (8 ed.). Pearson. ISBN 978-0133976892. ISBN 978-0133976892 Gustedt, Jens (2019). Modern C (2 ed.). Manning. ISBN 978-1617295812. (free) ISBN 978-1617295812 (free) External links [edit] [ edit edit ] sister projects sister projects Media from Commons Media from Commons Media News from Wikinews News from Wikinews News Quotations from Wikiquote Quotations from Wikiquote Quotations Textbooks from Wikibooks Textbooks from Wikibooks Textbooks Resources from Wikiversity Resources from Wikiversity Resources ISO C Working Group official website ISO/IEC 9899, publicly available official C documents, including the C99 Rationale \"C99 with Technical corrigenda TC1, TC2, and TC3 included\" (PDF). Archived (PDF) from the original on October 25, 2007. (3.61 MB) ISO C Working Group official website ISO/IEC 9899, publicly available official C documents, including the C99 Rationale ISO/IEC 9899 \"C99 with Technical corrigenda TC1, TC2, and TC3 included\" (PDF). Archived (PDF) from the original on October 25, 2007. (3.61 MB) \"C99 with Technical corrigenda TC1, TC2, and TC3 included\" (PDF) Archived (PDF) (3.61 MB) comp.lang.c Frequently Asked Questions comp.lang.c Frequently Asked Questions A History of C, by Dennis Ritchie A History of C C Library Reference and Examples C Library Reference and Examples v v t t e e C programming language ANSI C ANSI C C99 C99 C11 C11 C17 C17 C23 C23 Embedded C Embedded C MISRA C MISRA C Functions Functions Header files Header files Operators Operators String String Syntax Syntax Preprocessor Preprocessor Data types Data types Standard library Char Char File I/O File I/O Math Math Dynamic memory Dynamic memory String String Time Time Variadic Variadic POSIX POSIX Bionic libhybris Bionic libhybris libhybris dietlibc dietlibc glibc EGLIBC glibc EGLIBC EGLIBC klibc klibc Windows CRT Windows CRT musl musl Newlib Newlib uClibc uClibc Compilers ACK ACK Borland Turbo C Borland Turbo C Clang Clang GCC GCC ICC ICC LCC LCC Norcroft C Norcroft C PCC PCC SDCC SDCC TCC TCC Visual Studio, Express, C++ Visual Studio Express C++ Watcom C/C++ Watcom C/C++ IDEs Anjuta Anjuta CLion CLion Code::Blocks Code::Blocks CodeLite CodeLite Eclipse Eclipse Geany Geany GNOME Builder GNOME Builder KDevelop KDevelop Visual Studio Visual Studio NetBeans NetBeans Compatibility of C and C++ Compatibility of C and C++ Comparison with Pascal Comparison with Pascal C++ C++ C# C# D D Objective-C Objective-C Alef Alef Limbo Limbo Go Go Vala Vala Dennis Ritchie Dennis Ritchie Category Category v v t t e e Integrated development environments C C++ Open source Arduino IDE Arduino IDE Code::Blocks Code::Blocks CodeLite CodeLite Dev-C++ Dev-C++ Eclipse Eclipse Emacs Emacs Geany Geany GNOME Builder GNOME Builder Kakoune Kakoune KDevelop KDevelop NetBeans NetBeans QDevelop QDevelop Qt Creator Qt Creator TheIDE TheIDE Vi\u2013Vim Vi Vim OpenWatcom OpenWatcom Freeware DevEco Studio DevEco Studio Oracle Developer Studio Oracle Developer Studio Visual Studio Code Visual Studio Code Visual Studio Community Visual Studio Community Xcode Xcode Retail C++Builder C++Builder Eclipse-based CodeWarrior MyEclipse Eclipse CodeWarrior CodeWarrior MyEclipse MyEclipse Visual Studio Visual Studio By JetBrains IntelliJ IDEA AppCode CLion JetBrains IntelliJ IDEA IntelliJ IDEA AppCode AppCode CLion CLion LabWindows/CVI LabWindows/CVI IBM Rational Software Architect Rational Software Architect Understand Understand SlickEdit SlickEdit Anjuta Anjuta VisualAge VisualAge Visual C++ Express Visual C++ Express MonoDevelop MonoDevelop SharpDevelop SharpDevelop Borland Turbo C, C++ Borland Turbo C C++ QuickC QuickC Java Open source Anjuta Anjuta BlueJ BlueJ DrJava DrJava Eclipse Eclipse Geany Geany Greenfoot Greenfoot IntelliJ IDEA Community Edition Android Studio IntelliJ IDEA Android Studio Android Studio NetBeans NetBeans DevEco Studio DevEco Studio Freeware jGRASP jGRASP JDeveloper JDeveloper Retail JCreator MyEclipse MyEclipse JetBrains IntelliJ IDEA JetBrains IntelliJ IDEA SlickEdit SlickEdit Understand Understand Metrowerks CodeWarrior Pro for Java CodeWarrior JBuilder JBuilder Sun Java Studio Creator (superseded by NetBeans) Sun Java Studio Creator NetBeans VisualAge (superseded by Eclipse) VisualAge Eclipse Visual Caf\u00e9 (aka Espresso, superseded by JBuilder) Visual Caf\u00e9 JBuilder Visual J++ Visual J++ Xelfi (became NetBeans) Xelfi NetBeans JavaScript Open source Vim Vim Visual Studio Code Visual Studio Code Atom Atom Chromium Chromium DevEco Studio DevEco Studio CLI .NET Open source Visual Studio Code Visual Studio Code PascalABC.NET PascalABC.NET Freeware Visual Studio Community Visual Studio Community Retail Visual Studio Visual Studio Rider Rider Understand Understand Xamarin Studio Xamarin Studio MonoDevelop MonoDevelop SharpDevelop SharpDevelop Visual Basic Express Visual Basic Express Visual Web Developer Express Visual Web Developer Express Visual J# Express Visual J# Express Visual Studio Express for Windows Phone Visual Studio Express for Windows Phone Visual C++ Express Visual C++ Express Visual C# Express Visual C# Express Express for Desktop Express for Desktop Express for Web Express for Web Express for Windows Express for Windows Flash Adobe Flash Builder Adobe Flash Builder FlashDevelop Powerflasher FDT Powerflasher FDT PHP Open source Aptana Aptana NetBeans NetBeans Komodo Edit Komodo Edit Komodo IDE Komodo IDE KDevelop KDevelop Proprietary Codelobster Codelobster PhpStorm PhpStorm PHPEdit PHPEdit SlickEdit SlickEdit Zend Studio Zend Studio R RStudio RStudio R Tools for Visual Studio R Tools for Visual Studio Python Open source Anjuta Anjuta IDLE IDLE Eric Eric Light Table Light Table Ninja-IDE Ninja-IDE PyDev PyDev PyScripter PIDA Spyder Spyder Komodo Edit Komodo Edit Komodo IDE Komodo IDE KDevelop KDevelop Vim Vim Visual Studio Code Visual Studio Code Thonny Thonny DevEco Studio DevEco Studio Proprietary PyCharm PyCharm PythonAnywhere PythonAnywhere Visual Studio Code Visual Studio Code SlickEdit SlickEdit Wing IDE Wing IDE Pascal Object Pascal Open source Free Pascal IDE Free Pascal Lazarus Lazarus Dev-Pascal Dev-Pascal GNAVI PascalABC.NET PascalABC.NET Freeware Delphi Community Delphi Community Retail Delphi Delphi Turbo Pascal Turbo Pascal Virtual Pascal Virtual Pascal Borland Kylix Borland Kylix QuickPascal QuickPascal BASIC Open source Basic-256 Basic-256 Microsoft Small Basic Microsoft Small Basic SdlBasic SdlBasic Gambas Gambas Basic4GL Basic4GL VisualFBEditor / WinFBE VisualFBEditor / WinFBE InForm InForm Freeware FutureBASIC FutureBASIC RapidQ RapidQ Visual Studio Community Visual Studio Community Retail Visual Studio Visual Studio NS Basic NS Basic PureBasic PureBasic GLBasic GLBasic Liberty BASIC Liberty BASIC Xojo Xojo CA-Realizer CA-Realizer MonoDevelop MonoDevelop QuickBASIC QuickBASIC QBasic QBasic SharpDevelop SharpDevelop Visual Basic Visual Basic Visual Basic Express Visual Basic Express Go Open source Vim Vim Visual Studio Code (VSCode) Visual Studio Code Eclipse Eclipse Freeware Cloud9 IDE Cloud9 IDE Retail GoLand GoLand Haxe IntelliJ IDEA IntelliJ IDEA VS Code VS Code Sublime Text Sublime Text Powerflasher FDT Powerflasher FDT POP-11 Poplog Poplog Online AWS Cloud9 IDE Cloud9 IDE Eclipse Che Eclipse Che SourceLair SourceLair Comparison Comparison Category Category v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category Authority control databases FAST FAST FAST Germany Germany Germany United States United States United States France France France BnF data BnF data BnF data Czech Republic Czech Republic Czech Republic Czech Republic Israel Israel Israel IdRef IdRef IdRef https://en.wikipedia.org/w/index.php?title=C_(programming_language)&oldid=1266176654 Categories C (programming language) C (programming language) American inventions American inventions C programming language family C programming language family Cross-platform software Cross-platform software High-level programming languages High-level programming languages Procedural programming languages Procedural programming languages Structured programming languages Structured programming languages Programming languages created in 1972 Programming languages created in 1972 Programming languages with an ISO standard Programming languages with an ISO standard Statically typed programming languages Statically typed programming languages Systems programming languages Systems programming languages Wikipedia articles needing clarification from November 2023 Wikipedia articles needing clarification from November 2023 Webarchive template wayback links Webarchive template wayback links Articles with short description Articles with short description Short description matches Wikidata Short description matches Wikidata Wikipedia pending changes protected pages Wikipedia pending changes protected pages Use mdy dates from October 2024 Use mdy dates from October 2024 All articles with vague or ambiguous time All articles with vague or ambiguous time Vague or ambiguous time from August 2022 Vague or ambiguous time from August 2022 Wikipedia articles in need of updating from February 2021 Wikipedia articles in need of updating from February 2021 All Wikipedia articles in need of updating All Wikipedia articles in need of updating Wikipedia articles in need of updating from October 2024 Wikipedia articles in need of updating from October 2024 Articles needing additional references from October 2012 Articles needing additional references from October 2012 All articles needing additional references All articles needing additional references Wikipedia articles needing clarification from October 2021 Wikipedia articles needing clarification from October 2021 Articles needing additional references from July 2014 Articles needing additional references from July 2014 Pages using Sister project links with default search Pages using Sister project links with default search Pages using Sister project links with wikidata mismatch Pages using Sister project links with wikidata mismatch Pages using Sister project links with hidden wikidata Pages using Sister project links with hidden wikidata Articles with example C code Articles with example C code This page was last edited on 30 December 2024, at 12:32 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/Ruby_(programming_language)": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History Toggle History subsection 1.1 Early concept 1.2 Early releases 1.3 Ruby 1.8 and 1.9 1.4 Ruby 2 1.5 Ruby 3 1 History 1 History Toggle History subsection 1.1 Early concept 1.1 Early concept 1.1 Early concept 1.2 Early releases 1.2 Early releases 1.2 Early releases 1.3 Ruby 1.8 and 1.9 1.3 Ruby 1.8 and 1.9 1.3 Ruby 1.8 and 1.9 1.4 Ruby 2 1.4 Ruby 2 1.4 Ruby 2 1.5 Ruby 3 1.5 Ruby 3 1.5 Ruby 3 2 Semantics and philosophy 2 Semantics and philosophy 2 Semantics and philosophy 3 Features 3 Features 3 Features 4 Syntax 4 Syntax 4 Syntax 5 Implementations Toggle Implementations subsection 5.1 Matz's Ruby interpreter 5.2 Alternative implementations 5.3 Platform support 5 Implementations 5 Implementations Toggle Implementations subsection 5.1 Matz's Ruby interpreter 5.1 Matz's Ruby interpreter 5.1 Matz's Ruby interpreter 5.2 Alternative implementations 5.2 Alternative implementations 5.2 Alternative implementations 5.3 Platform support 5.3 Platform support 5.3 Platform support 6 Repositories and libraries 6 Repositories and libraries 6 Repositories and libraries 7 See also 7 See also 7 See also 8 References 8 References 8 References 9 Further reading 9 Further reading 9 Further reading 10 External links 10 External links 10 External links Toggle the table of contents Ruby (programming language) Ruby (programming language) 74 languages \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s Aragon\u00e9s Aragon\u00e9s Asturianu Asturianu Asturianu Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Bosanski Bosanski Bosanski Catal\u00e0 Catal\u00e0 Catal\u00e0 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Dansk Dansk Dansk Deutsch Deutsch Deutsch Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais Galego Galego Galego \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 Hausa Hausa Hausa \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 Hrvatski Hrvatski Hrvatski Ido Ido Ido Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia Interlingua Interlingua Interlingua Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 Kiswahili Kiswahili Kiswahili \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 Latvie\u0161u Latvie\u0161u Latvie\u0161u Lietuvi\u0173 Lietuvi\u0173 Lietuvi\u0173 Lombard Lombard Lombard Magyar Magyar Magyar \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 Bahasa Melayu Bahasa Melayu Bahasa Melayu \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Nederlands Nederlands Nederlands \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk nynorsk Norsk nynorsk Norsk nynorsk \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b13\u0b21\u0b3c\u0b3f\u0b06 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Shqip Shqip Shqip Simple English Simple English Simple English Sloven\u010dina Sloven\u010dina Sloven\u010dina \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Suomi Suomi Svenska Svenska Svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t \u5434\u8bed \u5434\u8bed \u5434\u8bed \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read Edit Edit Edit View history View history View history Tools Read Read Read Edit Edit Edit View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons Wikibooks Wikibooks Wikibooks Wikiquote Wikiquote Wikiquote Wikiversity Wikiversity Wikiversity Wikidata item Wikidata item Wikidata item Ruby on Rails Please help improve it to make it understandable to non-experts, without removing the technical details. help improve it make it understandable to non-experts (June 2022) June 2022 (Learn how and when to remove this message) Learn how and when to remove this message Paradigm Multi-paradigm functional imperative object-oriented reflective Designed by Yukihiro Matsumoto Developer ; 30 years ago (1995) 1995 Stable release [1] [ ] ; 7 days ago (25 December 2024) 25 December 2024 Typing discipline Duck dynamic strong Scope C OS Cross-platform License Ruby License Filename extensions ruby-lang.org ruby-lang.org implementations Ruby MRI TruffleRuby YARV Rubinius JRuby RubyMotion mruby Ada [2] [ ] Basic [3] [ ] C++ [2] [ ] CLU [4] [ ] Dylan [4] [ ] Eiffel [2] [ ] Lisp [4] [ ] Lua Perl [4] [ ] Python [4] [ ] Smalltalk [4] [ ] Clojure CoffeeScript Crystal D Elixir Groovy Julia [5] [ ] Mirah Nu [6] [ ] Ring [7] [ ] Rust [8] [ ] Swift [9] [ ] Ruby Programming at Wikibooks Ruby Programming Ruby is an interpreted, high-level, general-purpose programming language. It was designed with an emphasis on programming productivity and simplicity. In Ruby, everything is an object, including primitive data types. It was developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan. interpreted high-level general-purpose programming language object primitive data types Yukihiro \"Matz\" Matsumoto Japan Ruby is dynamically typed and uses garbage collection and just-in-time compilation. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. According to the creator, Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, BASIC, Java, and Lisp.[10][3] dynamically typed garbage collection just-in-time compilation procedural object-oriented functional programming Perl Smalltalk Eiffel Ada BASIC Java Lisp [10] [ ] [3] [ ] History [edit] [ edit edit ] History of Ruby Early concept [edit] [ edit edit ] Matsumoto has said that Ruby was conceived in 1993. In a 1999 post to the ruby-talk mailing list, he describes some of his early ideas about the language: I was talking with my colleague about the possibility of an object-oriented scripting language. I knew Perl (Perl4, not Perl5), but I didn't like it really, because it had the smell of a toy language (it still has). The object-oriented language seemed very promising. I knew Python then. But I didn't like it, because I didn't think it was a true object-oriented language \u2013 OO features appeared to be add-on to the language. As a language maniac and OO fan for 15 years, I really wanted a genuine object-oriented, easy-to-use scripting language. I looked for but couldn't find one. So I decided to make it. toy language Python Matsumoto describes the design of Ruby as being like a simple Lisp language at its core, with an object system like that of Smalltalk, blocks inspired by higher-order functions, and practical utility like that of Perl.[11] Lisp higher-order functions [11] [ ] The name \"Ruby\" originated during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language.[12] Initially two names were proposed: \"Coral\" and \"Ruby\". Matsumoto chose the latter in a later e-mail to Ishitsuka.[13] Matsumoto later noted a factor in choosing the name \"Ruby\"\u2013it was the birthstone of one of his colleagues.[14][15] [12] [ ] Coral Ruby [13] [ ] birthstone [14] [ ] [15] [ ] Early releases [edit] [ edit edit ] The first public release of Ruby 0.95 was announced on Japanese domestic newsgroups on December 21, 1995.[16][17] Subsequently, three more versions of Ruby were released in two days.[12] The release coincided with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language. newsgroups [16] [ ] [17] [ ] [12] [ ] Japanese-language Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixins, iterators, closures, exception handling and garbage collection.[18] object-oriented classes mixins iterators closures exception handling garbage collection [18] [ ] After the release of Ruby 0.95 in 1995, several stable versions of Ruby were released in these years: Ruby 1.0: December 25, 1996[12] [12] [ ] Ruby 1.2: December 1998 Ruby 1.4: August 1999 Ruby 1.6: September 2000 In 1997, the first article about Ruby was published on the Web. In the same year, Matsumoto was hired by netlab.jp to work on Ruby as a full-time developer.[12] [12] [ ] In 1998, the Ruby Application Archive was launched by Matsumoto, along with a simple English-language homepage for Ruby.[12] [12] [ ] In 1999, the first English language mailing list ruby-talk began, which signaled a growing interest in the language outside Japan.[19] In this same year, Matsumoto and Keiju Ishitsuka wrote the first book on Ruby, The Object-oriented Scripting Language Ruby (\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e Ruby), which was published in Japan in October 1999. It would be followed in the early 2000s by around 20 books on Ruby published in Japanese.[12] [19] [ ] [12] [ ] By 2000, Ruby was more popular than Python in Japan.[20] In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public, further widening the adoption of Ruby amongst English speakers. In early 2002, the English-language ruby-talk mailing list was receiving more messages than the Japanese-language ruby-list, demonstrating Ruby's increasing popularity in the non-Japanese speaking world. [20] [ ] Programming Ruby Ruby 1.8 and 1.9 [edit] [ edit edit ] Ruby 1.8 was initially released August 2003, was stable for a long time, and was retired June 2013.[21] Although deprecated, there is still code based on it. Ruby 1.8 is only partially compatible with Ruby 1.9. [21] [ ] Ruby 1.8 has been the subject of several industry standards. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency (a Japanese government agency) for submission to the Japanese Industrial Standards Committee (JISC) and then to the International Organization for Standardization (ISO). It was accepted as a Japanese Industrial Standard (JIS X 3017) in 2011[22] and an international standard (ISO/IEC 30170) in 2012.[23][24] Japanese government Japanese Industrial Standards Committee International Organization for Standardization [22] [ ] [23] [ ] [24] [ ] Ruby on Rails Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a web framework written in Ruby. Rails is frequently credited with increasing awareness of Ruby.[25] Ruby on Rails web framework [25] [ ] Effective with Ruby 1.9.3, released October 31, 2011,[26] Ruby switched from being dual-licensed under the Ruby License and the GPL to being dual-licensed under the Ruby License and the two-clause BSD license.[27] Adoption of 1.9 was slowed by changes from 1.8 that required many popular third party gems to be rewritten. Ruby 1.9 introduces many significant changes over the 1.8 series. Examples include:[28] [26] [ ] [27] [ ] gems [28] [ ] block local variables (variables that are local to the block in which they are declared) block local block an additional lambda syntax: f = ->(a,b) { puts a + b } lambda f = -> ( a , b ) { puts a + b } an additional Hash literal syntax using colons for symbol keys: {symbol_key: \"value\"} == {:symbol_key => \"value\"} Hash { symbol_key : \"value\" } == { :symbol_key => \"value\" } per-string character encodings are supported character encodings new socket API [IPv6 support] IPv6 require_relative import security Ruby 2 [edit] [ edit edit ] Ruby 2.0 was intended to be fully backward compatible with Ruby 1.9.3. As of the official 2.0.0 release on February 24, 2013, there were only five known (minor) incompatibilities.[29] Ruby 2.0 added several new features, including: [29] [ ] Method keyword arguments Method A new method, Module#prepend, to extend a class A new literal to create an array of symbols New API for lazy evaluation of Enumerables lazy evaluation A new convention of using #to_h to convert objects to Hashes[30] [30] [ ] Starting with 2.1.0, Ruby's versioning policy changed to be more similar to semantic versioning.[31] semantic versioning [31] [ ] Ruby 2.2.0 includes speed-ups, bugfixes, and library updates and removes some deprecated APIs. Most notably, Ruby 2.2.0 introduces changes to memory handling \u2013 an incremental garbage collector, support for garbage collection of symbols and the option to compile directly against jemalloc. It also contains experimental support for using vfork(2) with system() and spawn(), and added support for the Unicode 7.0 specification. Since version 2.2.1,[32] Ruby MRI performance on PowerPC64 was improved.[33][34][35] Features that were made obsolete or removed include callcc, the DL library, Digest::HMAC, lib/rational.rb, lib/complex.rb, GServer, Logger::Application as well as various C API functions.[36] vfork Unicode [32] [ ] Ruby MRI PowerPC64 [33] [ ] [34] [ ] [35] [ ] [36] [ ] Ruby 2.3.0 includes many performance improvements, updates, and bugfixes including changes to Proc#call, Socket and IO use of exception keywords, Thread#name handling, default passive Net::FTP connections, and Rake being removed from stdlib.[37] Other notable changes include: [37] [ ] The ability to mark all string literals as frozen by default with a consequently large performance increase in string operations.[38] string literals [38] [ ] Hash comparison to allow direct checking of key/value pairs instead of just keys. A new safe navigation operator &. that can ease nil handling (e.g. instead of if obj && obj.foo && obj.foo.bar, we can use if obj&.foo&.bar). safe navigation operator if obj && obj . foo && obj . foo . bar The did_you_mean gem is now bundled by default and required on startup to automatically suggest similar name matches on a NameError or NoMethodError. Hash#dig and Array#dig to easily extract deeply nested values (e.g. given profile = { social: { wikipedia: { name: 'Foo Baz' } } }, the value Foo Baz can now be retrieved by profile.dig(:social, :wikipedia, :name)). profile = { social : { wikipedia : { name : 'Foo Baz' } } } .grep_v(regexp) which will match all negative examples of a given regular expression in addition to other new features. Ruby 2.4.0 includes performance improvements to hash table, Array#max, Array#min, and instance variable access.[39] Other notable changes include: [39] [ ] Binding#irb: Start a REPL session similar to binding.pry Unify Fixnum and Bignum into Integer class String supports Unicode case mappings, not just ASCII A new method, Regexp#match?, which is a faster Boolean version of Regexp#match Thread deadlock detection now shows threads with their backtrace and dependency A few notable changes in Ruby 2.5.0 include rescue and ensure statements automatically use a surrounding do-end block (less need for extra begin-end blocks), method-chaining with yield_self, support for branch coverage and method coverage measurement, and easier Hash transformations with Hash#slice and Hash#transform_keys On top of that come a lot of performance improvements like faster block passing (3 times faster), faster Mutexes, faster ERB templates and improvements on some concatenation methods. A few notable changes in Ruby 2.6.0 include an experimental just-in-time compiler (JIT), and RubyVM::AbstractSyntaxTree (experimental). just-in-time compiler A few notable changes in Ruby 2.7.0 include pattern Matching (experimental), REPL improvements, a compaction GC, and separation of positional and keyword arguments. Ruby 3 [edit] [ edit edit ] Ruby 3.0.0 was released on Christmas Day in 2020.[40] It is known as Ruby 3x3 which means that programs would run three times faster in Ruby 3.0 comparing to Ruby 2.0.[41] and some had already implemented in intermediate releases on the road from 2 to 3. To achieve 3x3, Ruby 3 comes with MJIT, and later YJIT, Just-In-Time Compilers, to make programs faster, although they are described as experimental and remain disabled by default (enabled by flags at runtime). Christmas [40] [ ] [41] [ ] Another goal of Ruby 3.0 is to improve concurrency and two more utilities Fibre Scheduler, and experimental Ractor facilitate the goal.[40] Ractor is light-weight and thread-safe as it is achieved by exchanging messages rather than shared objects. concurrency [40] [ ] Ruby 3.0 introduces RBS language to describe the types of Ruby programs for static analysis.[40] It is separated from general Ruby programs. static analysis [40] [ ] There are some syntax enhancements and library changes in Ruby 3.0 as well.[40] [40] [ ] Ruby 3.1 was released on December 25, 2021.[42] It includes YJIT, a new, experimental, Just-In-Time Compiler developed by Shopify, to enhance the performance of real world business applications. A new debugger is also included. There are some syntax enhancements and other improvements in this release. Network libraries for FTP, SMTP, IMAP, and POP are moved from default gems to bundled gems.[43] [42] [ ] Shopify debugger FTP SMTP IMAP POP [43] [ ] Ruby 3.2 was released on December 25, 2022.[44] It brings support for being run inside of a WebAssembly environment via a WASI interface. Regular expressions also receives some improvements, including a faster, memoized matching algorithm to protect against certain ReDoS attacks, and configurable timeouts for regular expression matching. Additional debugging and syntax features are also included in this release, which include syntax suggestion, as well as error highlighting. The MJIT compiler has been re-implemented as a standard library module, while the YJIT, a Rust-based JIT compiler now supports more architectures on Linux. [44] [ ] WebAssembly Regular expressions memoized ReDoS Rust JIT Ruby 3.3 was released on December 25, 2023.[1] Ruby 3.3 introduces significant enhancements and performance improvements to the language. Key features include the introduction of the Prism parser for portable and maintainable parsing, the addition of the pure-Ruby JIT compiler RJIT, and major performance boosts in the YJIT compiler. Additionally, improvements in memory usage, the introduction of an M:N thread scheduler, and updates to the standard library contribute to a more efficient and developer-friendly Ruby ecosystem. [1] [ ] Semantics and philosophy [edit] [ edit edit ] Yukihiro Matsumoto Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design.[45] At a Google Tech Talk in 2008 he said, \"I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.\"[46] He stresses that systems design needs to emphasize human, rather than computer, needs:[47] user interface [45] [ ] [46] [ ] [47] [ ] Often people, especially computer engineers, focus on the machines. They think, \"By doing this, the machine will run fast. By doing this, the machine will run more effectively. By doing this, the machine will something something something.\" They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves. Matsumoto has said his primary design goal was to make a language that he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least astonishment (POLA) to the design of Ruby;[47] in a May 2005 discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard.[48] principle of least astonishment [47] [ ] [48] [ ] Matsumoto defined it this way in an interview:[47] [47] [ ] Everyone has an individual background. Someone may come from Python, someone else may come from Perl, and they may be surprised by different aspects of the language. Then they come up to me and say, 'I was surprised by this feature of the language, so Ruby violates the principle of least surprise.' Wait. Wait. The principle of least surprise is not for you only. The principle of least surprise means principle of least my surprise. And it means the principle of least surprise after you learn Ruby very well. For example, I was a C++ programmer before I started designing Ruby. I programmed in C++ exclusively for two or three years. And after two years of C++ programming, it still surprises me. Ruby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives (such as integers, Booleans, and \"null\"). Because everything in Ruby is an object, everything in Ruby has certain built-in abilities called methods. Every function is a method and methods are always called on an object. Methods defined at the top level scope become methods of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as \"global\" procedures. Ruby supports inheritance with dynamic dispatch, mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import modules as mixins. object-oriented integers null function method inheritance dynamic dispatch mixins instance multiple inheritance modules Ruby has been described as a multi-paradigm programming language: it allows procedural programming (defining functions/variables outside classes makes them part of the root, 'self' Object), with object orientation (everything is an object) or functional programming (it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation). It has support for introspection, reflective programming, metaprogramming, and interpreter-based threads. Ruby features dynamic typing, and supports parametric polymorphism. multi-paradigm programming language functional programming anonymous functions closures continuations introspection reflective programming metaprogramming threads dynamic typing parametric polymorphism According to the Ruby FAQ, the syntax is similar to Perl's and the semantics are similar to Smalltalk's, but the design philosophy differs greatly from Python's.[49] Perl Smalltalk's Python [49] [ ] Features [edit] [ edit edit ] Thoroughly object-oriented with inheritance, mixins and metaclasses[50] object-oriented inheritance mixins metaclasses [50] [ ] Dynamic typing and duck typing Dynamic typing duck typing Everything is an expression (even statements) and everything is executed imperatively (even declarations) expression statements imperatively declarations Succinct and flexible syntax[51] that minimizes syntactic noise and serves as a foundation for domain-specific languages[52] [51] [ ] syntactic noise domain-specific languages [52] [ ] Dynamic reflection and alteration of objects to facilitate metaprogramming[53] reflection alteration metaprogramming [53] [ ] Lexical closures, iterators and generators, with a block syntax[54] Lexical closures iterators generators block syntax [54] [ ] Literal notation for arrays, hashes, regular expressions and symbols arrays hashes regular expressions symbols Embedding code in strings (interpolation) interpolation Default arguments Default arguments Four levels of variable scope (global, class, instance, and local) denoted by sigils or the lack thereof global class instance local sigils Garbage collection Garbage collection First-class continuations First-class continuations Strict Boolean coercion rules (everything is true except false and nil) coercion nil Exception handling Exception handling Operator overloading[55] Operator overloading [55] [ ] Built-in support for rational numbers, complex numbers and arbitrary-precision arithmetic rational numbers complex numbers arbitrary-precision arithmetic Custom dispatch behavior (through method_missing and const_missing) Native threads and cooperative fibers (fibers are a 1.9/YARV feature) threads fibers YARV Support for Unicode and multiple character encodings. Unicode character encodings Native plug-in API in C plug-in C Interactive Ruby Shell, an interactive command-line interpreter that can be used to test code quickly (REPL) REPL Centralized package management through RubyGems RubyGems Implemented on all major platforms Large standard library, including modules for YAML, JSON, XML, CGI, OpenSSL, HTTP, FTP, RSS, curses, zlib and Tk[56] YAML JSON XML CGI OpenSSL HTTP FTP RSS curses zlib Tk [56] [ ] Just-in-time compilation Just-in-time compilation Syntax [edit] [ edit edit ] Ruby syntax The syntax of Ruby is broadly similar to that of Perl and Python. Class and method definitions are signaled by keywords, whereas code blocks can be defined by either keywords or braces. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. For practical purposes there is no distinction between expressions and statements.[57][58] Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant. Perl Python sigil expressions statements [57] [ ] [58] [ ] One of the differences from Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods (attr_writer, attr_reader, etc.). Unlike the \"getter\" and \"setter\" methods of other languages like C++ or Java, accessor methods in Ruby can be created with a single line of code via metaprogramming; however, accessor methods can also be created in the traditional fashion of C++ and Java. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of calling code or having to do any refactoring achieving similar functionality to C# and VB.NET property members. C++ Java metaprogramming C# VB.NET Python's property descriptors are similar, but come with a trade-off in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby's design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside the class; rather, one passes a message to the class and receives a response. Implementations [edit] [ edit edit ] Ruby MRI \u00a7 Operating systems List of Ruby compilers Matz's Ruby interpreter [edit] [ edit edit ] The original Ruby interpreter is often referred to as Matz's Ruby Interpreter or MRI. This implementation is written in C and uses its own Ruby-specific virtual machine. interpreter Matz's Ruby Interpreter virtual machine The standardized and retired Ruby 1.8 implementation was written in C, as a single-pass interpreted language.[21] implementation C interpreted language [21] [ ] Starting with Ruby 1.9, and continuing with Ruby 2.x and above, the official Ruby interpreter has been YARV (\"Yet Another Ruby VM\"), and this implementation has superseded the slower virtual machine used in previous releases of MRI. YARV Alternative implementations [edit] [ edit edit ] As of 2018[update], there are a number of alternative implementations of Ruby, including JRuby, Rubinius, and mruby. Each takes a different approach, with JRuby and Rubinius providing just-in-time compilation and mruby also providing ahead-of-time compilation. [update] JRuby Rubinius mruby just-in-time compilation ahead-of-time compilation Ruby has three major alternative implementations: JRuby, a mixed Java and Ruby implementation that runs on the Java virtual machine. JRuby currently targets Ruby 3.1.x. JRuby Java Java virtual machine TruffleRuby, a Java implementation using the Truffle language implementation framework with GraalVM TruffleRuby GraalVM Rubinius, a C++ bytecode virtual machine that uses LLVM to compile to machine code at runtime. The bytecode compiler and most core classes are written in pure Ruby. Rubinius currently targets Ruby 2.3.1. Rubinius C++ LLVM Other Ruby implementations include: MagLev, a Smalltalk implementation that runs on GemTalk Systems' GemStone/S VM MagLev Smalltalk GemTalk Systems GemStone/S mruby, an implementation designed to be embedded into C code, in a similar vein to Lua. It is currently being developed by Yukihiro Matsumoto and others mruby Lua Yukihiro Matsumoto RGSS, or Ruby Game Scripting System, a proprietary implementation that is used by the RPG Maker series of software for game design and modification of the RPG Maker engine RGSS proprietary RPG Maker julializer, a transpiler (partial) from Ruby to Julia. It can be used for a large speedup over e.g. Ruby or JRuby implementations (may only be useful for numerical code).[59] julializer transpiler Julia [59] [ ] Topaz, a Ruby implementation written in Python Topaz Python Opal, a web-based interpreter that compiles Ruby to JavaScript Opal JavaScript Other now defunct Ruby implementations were: MacRuby, a Mac OS X implementation on the Objective-C runtime. Its iOS counterpart is called RubyMotion MacRuby Mac OS X Objective-C RubyMotion IronRuby an implementation on the .NET Framework IronRuby .NET Framework Cardinal, an implementation for the Parrot virtual machine Parrot virtual machine Ruby Enterprise Edition, often shortened to ree, an implementation optimized to handle large-scale Ruby on Rails projects Ruby Enterprise Edition Ruby on Rails HotRuby, a JavaScript and ActionScript implementation of the Ruby programming language HotRuby JavaScript ActionScript Ruby programming language The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is complex to implement and uses many Ruby-specific features. The point when a particular implementation achieves this goal is called \"the Rails singularity\". The reference implementation, JRuby, and Rubinius[60] are all able to run Rails unmodified in a production environment. Ruby on Rails [60] [ ] Platform support [edit] [ edit edit ] Matsumoto originally developed Ruby on the 4.3BSD-based Sony NEWS-OS 3.x, but later migrated his work to SunOS 4.x, and finally to Linux.[61][62] By 1999, Ruby was known to work across many different operating systems. Modern Ruby versions and implementations are available on all major desktop, mobile and server-based operating systems. Ruby is also supported across a number of cloud hosting platforms like Jelastic, Heroku, Google Cloud Platform and others. 4.3BSD Sony NEWS-OS SunOS Linux [61] [ ] [62] [ ] operating systems Jelastic Heroku Google Cloud Platform Tools such as RVM and RBEnv, facilitate installation and partitioning of multiple ruby versions, and multiple 'gemsets' on one machine. RVM RBEnv Repositories and libraries [edit] [ edit edit ] RubyGems is Ruby's package manager. A Ruby package is called a \"gem\" and can be installed via the command line. Most gems are libraries, though a few exist that are applications, such as IDEs.[63] There are over 100,000 Ruby gems hosted on RubyGems.org.[64] RubyGems IDEs [63] [ ] RubyGems.org [64] [ ] Many new and existing Ruby libraries are hosted on GitHub, a service that offers version control repository hosting for Git. GitHub version control Git The Ruby Application Archive, which hosted applications, documentation, and libraries for Ruby programming, was maintained until 2013, when its function was transferred to RubyGems.[65] [65] [ ] See also [edit] [ edit edit ] Free and open-source software portal Free and open-source software portal Free and open-source software portal Computer programming portal Computer programming portal Computer programming portal Comparison of programming languages Comparison of programming languages Metasploit Metasploit Why's (poignant) Guide to Ruby Why's (poignant) Guide to Ruby Crystal (programming language) Crystal (programming language) Ruby on Rails Ruby on Rails References [edit] [ edit edit ] ^ a b \"Ruby 3.3.0 Released\". Archived from the original on 2023-12-25. Retrieved 2023-12-25. ^ a b a b \"Ruby 3.3.0 Released\". Archived from the original on 2023-12-25. Retrieved 2023-12-25. \"Ruby 3.3.0 Released\" Archived . Retrieved 2023-12-25 2023-12-25 ^ a b c Cooper, Peter (2009). Beginning Ruby: From Novice to Professional. Beginning from Novice to Professional (2nd ed.). Berkeley: APress. p. 101. ISBN 978-1-4302-2363-4. To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby. ^ a b c a b c Cooper, Peter (2009). Beginning Ruby: From Novice to Professional. Beginning from Novice to Professional (2nd ed.). Berkeley: APress. p. 101. ISBN 978-1-4302-2363-4. To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby. ISBN 978-1-4302-2363-4 ^ a b \"Reasons behind Ruby\". Ruby Conference 2008. Confreaks (YouTube). 15 April 2013. ^ a b a b \"Reasons behind Ruby\". Ruby Conference 2008. Confreaks (YouTube). 15 April 2013. \"Reasons behind Ruby\" ^ a b c d e f Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. It draws primarily on features from Perl, Smalltalk, Python, Lisp, Dylan, and CLU. ^ a b c d e f a b c d e f Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. It draws primarily on features from Perl, Smalltalk, Python, Lisp, Dylan, and CLU. Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java 3 ISBN 978-1-59059-881-8 ^ \"Julia 1.0 Documentation: Introduction\". Archived from the original on 16 August 2018. Retrieved 6 October 2018. ^ ^ \"Julia 1.0 Documentation: Introduction\". Archived from the original on 16 August 2018. Retrieved 6 October 2018. \"Julia 1.0 Documentation: Introduction\" the original . Retrieved 6 October 2018 6 October ^ Burks, Tim. \"About Nu\u2122\". Programming Nu\u2122. Neon Design Technology, Inc. Archived from the original on 2018-12-25. Retrieved 2011-07-21. ^ ^ Burks, Tim. \"About Nu\u2122\". Programming Nu\u2122. Neon Design Technology, Inc. Archived from the original on 2018-12-25. Retrieved 2011-07-21. \"About Nu\u2122\" Archived . Retrieved 2011-07-21 2011-07-21 ^ Ring Team (3 December 2017). \"Ring and other languages\". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 3 December 2017. ^ ^ Ring Team (3 December 2017). \"Ring and other languages\". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 3 December 2017. \"Ring and other languages\" ring-lang Archived . Retrieved 3 December 2017 3 December ^ \"Influences - The Rust Reference\". The Rust Reference. Archived from the original on 2019-01-26. Retrieved 2023-04-18. ^ ^ \"Influences - The Rust Reference\". The Rust Reference. Archived from the original on 2019-01-26. Retrieved 2023-04-18. \"Influences - The Rust Reference\" Archived . Retrieved 2023-04-18 2023-04-18 ^ Lattner, Chris (2014-06-03). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 2018-12-25. Retrieved 2014-06-03. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ ^ Lattner, Chris (2014-06-03). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 2018-12-25. Retrieved 2014-06-03. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. \"Chris Lattner's Homepage\" Archived . Retrieved 2014-06-03 2014-06-03 ^ \"About Ruby\". Archived from the original on 9 October 2014. Retrieved 15 February 2020. ^ ^ \"About Ruby\". Archived from the original on 9 October 2014. Retrieved 15 February 2020. \"About Ruby\" Archived . Retrieved 15 February 2020 15 February ^ Matsumoto, Yukihiro (13 February 2006). \"Re: Ruby's lisp features\". Archived from the original on 2018-10-27. Retrieved 15 February 2020. ^ ^ Matsumoto, Yukihiro (13 February 2006). \"Re: Ruby's lisp features\". Archived from the original on 2018-10-27. Retrieved 15 February 2020. Matsumoto, Yukihiro \"Re: Ruby's lisp features\" the original . Retrieved 15 February 2020 15 February ^ a b c d e f \"History of Ruby\". Archived from the original on 2011-07-14. Retrieved 2008-08-14. ^ a b c d e f a b c d e f \"History of Ruby\". Archived from the original on 2011-07-14. Retrieved 2008-08-14. \"History of Ruby\" Archived . Retrieved 2008-08-14 2008-08-14 ^ \"[FYI: historic] The decisive moment of the language name Ruby. (Re: [ANN] ruby 1.8.1)\" (E-mail from Hiroshi Sugihara to ruby-talk). Archived from the original on 2011-07-17. Retrieved 2008-08-14. ^ ^ \"[FYI: historic] The decisive moment of the language name Ruby. (Re: [ANN] ruby 1.8.1)\" (E-mail from Hiroshi Sugihara to ruby-talk). Archived from the original on 2011-07-17. Retrieved 2008-08-14. \"[FYI: historic] The decisive moment of the language name Ruby. (Re: [ANN] ruby 1.8.1)\" the original . Retrieved 2008-08-14 2008-08-14 ^ \"1.3 Why the name 'Ruby'?\". The Ruby Language FAQ. Ruby-Doc.org. Archived from the original on May 28, 2012. Retrieved April 10, 2012. ^ ^ \"1.3 Why the name 'Ruby'?\". The Ruby Language FAQ. Ruby-Doc.org. Archived from the original on May 28, 2012. Retrieved April 10, 2012. \"1.3 Why the name 'Ruby'?\" Archived . Retrieved April 10, 2012 April 10, ^ Yukihiro Matsumoto (June 11, 1999). \"Re: the name of Ruby?\". Ruby-Talk (Mailing list). Archived from the original on December 25, 2018. Retrieved April 10, 2012. ^ ^ Yukihiro Matsumoto (June 11, 1999). \"Re: the name of Ruby?\". Ruby-Talk (Mailing list). Archived from the original on December 25, 2018. Retrieved April 10, 2012. Yukihiro Matsumoto \"Re: the name of Ruby?\" the original . Retrieved April 10, 2012 April 10, ^ \"More archeolinguistics: unearthing proto-Ruby\". Archived from the original on 6 November 2015. Retrieved 2 May 2015. ^ ^ \"More archeolinguistics: unearthing proto-Ruby\". Archived from the original on 6 November 2015. Retrieved 2 May 2015. \"More archeolinguistics: unearthing proto-Ruby\" the original . Retrieved 2 May 2015 2 May ^ \"[ruby-talk:00382] Re: history of ruby\". Archived from the original on 16 July 2011. Retrieved 2 May 2015. ^ ^ \"[ruby-talk:00382] Re: history of ruby\". Archived from the original on 16 July 2011. Retrieved 2 May 2015. \"[ruby-talk:00382] Re: history of ruby\" the original . Retrieved 2 May 2015 2 May ^ \"[ruby-list:124] TUTORIAL \u2014 ruby's features\". Archived from the original on 24 May 2003. Retrieved 2 May 2015. ^ ^ \"[ruby-list:124] TUTORIAL \u2014 ruby's features\". Archived from the original on 24 May 2003. Retrieved 2 May 2015. \"[ruby-list:124] TUTORIAL \u2014 ruby's features\" the original . Retrieved 2 May 2015 2 May ^ \"An Interview with the Creator of Ruby\". Archived from the original on 2008-02-08. Retrieved 2007-07-11. ^ ^ \"An Interview with the Creator of Ruby\". Archived from the original on 2008-02-08. Retrieved 2007-07-11. \"An Interview with the Creator of Ruby\" Archived . Retrieved 2007-07-11 2007-07-11 ^ Yukihiro Matsumoto (October 2000). \"Programming Ruby: Forward\". Archived from the original on 25 December 2018. Retrieved 5 March 2014. ^ ^ Yukihiro Matsumoto (October 2000). \"Programming Ruby: Forward\". Archived from the original on 25 December 2018. Retrieved 5 March 2014. \"Programming Ruby: Forward\" Archived . Retrieved 5 March 2014 5 March ^ a b \"We retire Ruby 1.8.7\". Archived from the original on 6 June 2015. Retrieved 2 May 2015. ^ a b a b \"We retire Ruby 1.8.7\". Archived from the original on 6 June 2015. Retrieved 2 May 2015. \"We retire Ruby 1.8.7\" Archived . Retrieved 2 May 2015 2 May ^ \"IPA \u72ec\u7acb\u884c\u653f\u6cd5\u4eba \u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb\uff1a\u30d7\u30ec\u30b9\u767a\u8868 \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9eRuby\u306eJIS\u898f\u683c\uff08JIS X 3017\uff09\u5236\u5b9a\u306b\u3064\u3044\u3066\". Archived from the original on 2 February 2015. Retrieved 2 May 2015. ^ ^ \"IPA \u72ec\u7acb\u884c\u653f\u6cd5\u4eba \u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb\uff1a\u30d7\u30ec\u30b9\u767a\u8868 \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9eRuby\u306eJIS\u898f\u683c\uff08JIS X 3017\uff09\u5236\u5b9a\u306b\u3064\u3044\u3066\". Archived from the original on 2 February 2015. Retrieved 2 May 2015. \"IPA \u72ec\u7acb\u884c\u653f\u6cd5\u4eba \u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb\uff1a\u30d7\u30ec\u30b9\u767a\u8868 \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9eRuby\u306eJIS\u898f\u683c\uff08JIS X 3017\uff09\u5236\u5b9a\u306b\u3064\u3044\u3066\" the original . Retrieved 2 May 2015 2 May ^ \"IPA \u72ec\u7acb\u884c\u653f\u6cd5\u4eba \u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb\uff1a\u30d7\u30ec\u30b9\u767a\u8868 \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9eRuby\u3001\u56fd\u969b\u898f\u683c\u3068\u3057\u3066\u627f\u8a8d\". Archived from the original on 1 February 2015. Retrieved 2 May 2015. ^ ^ \"IPA \u72ec\u7acb\u884c\u653f\u6cd5\u4eba \u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb\uff1a\u30d7\u30ec\u30b9\u767a\u8868 \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9eRuby\u3001\u56fd\u969b\u898f\u683c\u3068\u3057\u3066\u627f\u8a8d\". Archived from the original on 1 February 2015. Retrieved 2 May 2015. \"IPA \u72ec\u7acb\u884c\u653f\u6cd5\u4eba \u60c5\u5831\u51e6\u7406\u63a8\u9032\u6a5f\u69cb\uff1a\u30d7\u30ec\u30b9\u767a\u8868 \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9eRuby\u3001\u56fd\u969b\u898f\u683c\u3068\u3057\u3066\u627f\u8a8d\" the original . Retrieved 2 May 2015 2 May ^ \"ISO/IEC 30170:2012\". Archived from the original on 2017-03-12. Retrieved 2017-03-10. ^ ^ \"ISO/IEC 30170:2012\". Archived from the original on 2017-03-12. Retrieved 2017-03-10. \"ISO/IEC 30170:2012\" Archived . Retrieved 2017-03-10 2017-03-10 ^ Web Development: Ruby on Rails Archived 2009-02-24 at the Wayback Machine. Devarticles.com (2007-03-22). Retrieved on 2013-07-17. ^ ^ Web Development: Ruby on Rails Archived 2009-02-24 at the Wayback Machine. Devarticles.com (2007-03-22). Retrieved on 2013-07-17. Web Development: Ruby on Rails Archived Wayback Machine ^ \"Ruby 1.9.3 p0 is released\". ruby-lang.org. October 31, 2011. Archived from the original on January 14, 2013. Retrieved February 20, 2013. ^ ^ \"Ruby 1.9.3 p0 is released\". ruby-lang.org. October 31, 2011. Archived from the original on January 14, 2013. Retrieved February 20, 2013. \"Ruby 1.9.3 p0 is released\" Archived . Retrieved February 20, 2013 February 20, ^ \"v1_9_3_0/NEWS\". Ruby Subversion source repository. ruby-lang.org. September 17, 2011. Archived from the original on November 6, 2015. Retrieved February 20, 2013. ^ ^ \"v1_9_3_0/NEWS\". Ruby Subversion source repository. ruby-lang.org. September 17, 2011. Archived from the original on November 6, 2015. Retrieved February 20, 2013. \"v1_9_3_0/NEWS\" Subversion the original . Retrieved February 20, 2013 February 20, ^ Ruby 1.9: What to Expect Archived 2016-03-04 at the Wayback Machine. slideshow.rubyforge.org. Retrieved on 2013-07-17. ^ ^ Ruby 1.9: What to Expect Archived 2016-03-04 at the Wayback Machine. slideshow.rubyforge.org. Retrieved on 2013-07-17. Ruby 1.9: What to Expect Archived Wayback Machine ^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2013-02-27 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17. ^ ^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2013-02-27 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17. Ruby 2.0.0-p0 is released Archived Wayback Machine ^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2016-01-17 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17. ^ ^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2016-01-17 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17. Ruby 2.0.0-p0 is released Archived Wayback Machine ^ \"Semantic Versioning starting with Ruby 2.1.0\". December 21, 2013. Archived from the original on February 13, 2014. Retrieved December 27, 2013. ^ ^ \"Semantic Versioning starting with Ruby 2.1.0\". December 21, 2013. Archived from the original on February 13, 2014. Retrieved December 27, 2013. \"Semantic Versioning starting with Ruby 2.1.0\" the original . Retrieved December 27, 2013 December 27, ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). \"Ruby 2.2.1 Released\". Archived from the original on 16 May 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). \"Ruby 2.2.1 Released\". Archived from the original on 16 May 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) \"Ruby 2.2.1 Released\" Archived . Retrieved 12 July 2016 12 July {{cite web}}: CS1 maint: multiple names: authors list (link) cite web link ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). \"v2.2.1 ChangeLog\". Archived from the original on 26 February 2017. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). \"v2.2.1 ChangeLog\". Archived from the original on 26 February 2017. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) \"v2.2.1 ChangeLog\" the original . Retrieved 12 July 2016 12 July {{cite web}}: CS1 maint: multiple names: authors list (link) cite web link ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). \"Specifying non volatile registers for increase performance in ppc64\". Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). \"Specifying non volatile registers for increase performance in ppc64\". Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) \"Specifying non volatile registers for increase performance in ppc64\" Archived . Retrieved 12 July 2016 12 July {{cite web}}: CS1 maint: multiple names: authors list (link) cite web link ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). \"Specifying MACRO for increase performance in ppc64\". Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). \"Specifying MACRO for increase performance in ppc64\". Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) \"Specifying MACRO for increase performance in ppc64\" Archived . Retrieved 12 July 2016 12 July {{cite web}}: CS1 maint: multiple names: authors list (link) cite web link ^ \"ruby/NEWS at v2_2_0 \u00b7 ruby/ruby \u00b7 GitHub\". GitHub. Archived from the original on 1 January 2015. Retrieved 2 May 2015. ^ ^ \"ruby/NEWS at v2_2_0 \u00b7 ruby/ruby \u00b7 GitHub\". GitHub. Archived from the original on 1 January 2015. Retrieved 2 May 2015. \"ruby/NEWS at v2_2_0 \u00b7 ruby/ruby \u00b7 GitHub\" Archived . Retrieved 2 May 2015 2 May ^ \"Ruby/NEWS at v.2_3_0 - ruby/ruby\". GitHub. Archived from the original on 1 March 2017. Retrieved 25 December 2015. ^ ^ \"Ruby/NEWS at v.2_3_0 - ruby/ruby\". GitHub. Archived from the original on 1 March 2017. Retrieved 25 December 2015. \"Ruby/NEWS at v.2_3_0 - ruby/ruby\" Archived . Retrieved 25 December 2015 25 December ^ \"Ruby 2.3.0 changes and features\". Running with Ruby. dev.mensfeld.pl. 14 November 2015. Archived from the original on 5 January 2016. Retrieved 27 December 2015. ^ ^ \"Ruby 2.3.0 changes and features\". Running with Ruby. dev.mensfeld.pl. 14 November 2015. Archived from the original on 5 January 2016. Retrieved 27 December 2015. \"Ruby 2.3.0 changes and features\" Archived . Retrieved 27 December 2015 27 December ^ \"Ruby 2.4.0 Released\". www.ruby-lang.org. Archived from the original on 2017-02-17. Retrieved 2016-12-30. ^ ^ \"Ruby 2.4.0 Released\". www.ruby-lang.org. Archived from the original on 2017-02-17. Retrieved 2016-12-30. \"Ruby 2.4.0 Released\" Archived . Retrieved 2016-12-30 2016-12-30 ^ a b c d \"Ruby 3.0.0 Released\". Ruby Programming Language. 2020-12-25. Archived from the original on 2020-12-25. Retrieved 2020-12-25. ^ a b c d a b c d \"Ruby 3.0.0 Released\". Ruby Programming Language. 2020-12-25. Archived from the original on 2020-12-25. Retrieved 2020-12-25. \"Ruby 3.0.0 Released\" Archived . Retrieved 2020-12-25 2020-12-25 ^ Scheffler, Jonan (November 10, 2016). \"Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance\". Ruby. Archived from the original on May 10, 2019. Retrieved May 18, 2019. ^ ^ Scheffler, Jonan (November 10, 2016). \"Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance\". Ruby. Archived from the original on May 10, 2019. Retrieved May 18, 2019. \"Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance\" Archived . Retrieved May 18, 2019 May 18, ^ \"Ruby 3.1.0 Released\". ruby-lang.org. Archived from the original on 25 December 2021. Retrieved 25 Dec 2021. ^ ^ \"Ruby 3.1.0 Released\". ruby-lang.org. Archived from the original on 25 December 2021. Retrieved 25 Dec 2021. \"Ruby 3.1.0 Released\" Archived . Retrieved 25 Dec 2021 25 Dec ^ \"Ruby 3.1.0 Released\". Archived from the original on 2021-12-26. Retrieved 2021-12-26. ^ ^ \"Ruby 3.1.0 Released\". Archived from the original on 2021-12-26. Retrieved 2021-12-26. \"Ruby 3.1.0 Released\" Archived . Retrieved 2021-12-26 2021-12-26 ^ \"Ruby 3.2.0 Released\". Archived from the original on 2022-12-25. Retrieved 2022-12-25. ^ ^ \"Ruby 3.2.0 Released\". Archived from the original on 2022-12-25. Retrieved 2022-12-25. \"Ruby 3.2.0 Released\" Archived . Retrieved 2022-12-25 2022-12-25 ^ \"The Ruby Programming Language\". Archived from the original on 18 January 2020. Retrieved 2 May 2015. ^ ^ \"The Ruby Programming Language\". Archived from the original on 18 January 2020. Retrieved 2 May 2015. \"The Ruby Programming Language\" Archived . Retrieved 2 May 2015 2 May ^ Google Tech Talks \u2013 Ruby 1.9 on YouTube ^ ^ Google Tech Talks \u2013 Ruby 1.9 on YouTube Google Tech Talks \u2013 Ruby 1.9 Google Tech Talks \u2013 Ruby 1.9 YouTube ^ a b c Bill Venners. \"The Philosophy of Ruby\". Archived from the original on 5 July 2019. Retrieved 2 May 2015. ^ a b c a b c Bill Venners. \"The Philosophy of Ruby\". Archived from the original on 5 July 2019. Retrieved 2 May 2015. \"The Philosophy of Ruby\" Archived . Retrieved 2 May 2015 2 May ^ \"Welcome to RUBYWEEKLYNEWS.ORG\". 4 July 2017. Archived from the original on 4 July 2017.{{cite web}}: CS1 maint: bot: original URL status unknown (link) ^ ^ \"Welcome to RUBYWEEKLYNEWS.ORG\". 4 July 2017. Archived from the original on 4 July 2017.{{cite web}}: CS1 maint: bot: original URL status unknown (link) \"Welcome to RUBYWEEKLYNEWS.ORG\" {{cite web}}: CS1 maint: bot: original URL status unknown (link) cite web link ^ \"The Ruby Language FAQ: How Does Ruby Stack Up Against...?\". Archived from the original on 8 May 2015. Retrieved 2 May 2015. ^ ^ \"The Ruby Language FAQ: How Does Ruby Stack Up Against...?\". Archived from the original on 8 May 2015. Retrieved 2 May 2015. \"The Ruby Language FAQ: How Does Ruby Stack Up Against...?\" Archived . Retrieved 2 May 2015 2 May ^ Bruce Stewart (29 November 2001). \"An Interview with the Creator of Ruby\". O'Reilly Media. Archived from the original on 6 May 2015. Retrieved 2 May 2015. ^ ^ Bruce Stewart (29 November 2001). \"An Interview with the Creator of Ruby\". O'Reilly Media. Archived from the original on 6 May 2015. Retrieved 2 May 2015. \"An Interview with the Creator of Ruby\" Archived . Retrieved 2 May 2015 2 May ^ Bill Venners. \"Dynamic Productivity with Ruby\". Archived from the original on 5 September 2015. Retrieved 2 May 2015. ^ ^ Bill Venners. \"Dynamic Productivity with Ruby\". Archived from the original on 5 September 2015. Retrieved 2 May 2015. \"Dynamic Productivity with Ruby\" Archived . Retrieved 2 May 2015 2 May ^ \"Language Workbenches: The Killer-App for Domain Specific Languages?\". martinfowler.com. Archived from the original on 2 May 2021. Retrieved 2 May 2015. ^ ^ \"Language Workbenches: The Killer-App for Domain Specific Languages?\". martinfowler.com. Archived from the original on 2 May 2021. Retrieved 2 May 2015. \"Language Workbenches: The Killer-App for Domain Specific Languages?\" Archived . Retrieved 2 May 2015 2 May ^ \"Ruby \u2013 Add class methods at runtime\". Archived from the original on 2007-09-22. Retrieved 2007-11-01. ^ ^ \"Ruby \u2013 Add class methods at runtime\". Archived from the original on 2007-09-22. Retrieved 2007-11-01. \"Ruby \u2013 Add class methods at runtime\" Archived . Retrieved 2007-11-01 2007-11-01 ^ Bill Venners. \"Blocks and Closures in Ruby\". Archived from the original on 18 April 2015. Retrieved 2 May 2015. ^ ^ Bill Venners. \"Blocks and Closures in Ruby\". Archived from the original on 18 April 2015. Retrieved 2 May 2015. \"Blocks and Closures in Ruby\" Archived . Retrieved 2 May 2015 2 May ^ \"Methods\". Official Ruby FAQ. Archived from the original on 2022-06-28. Retrieved 2021-06-20. ^ ^ \"Methods\". Official Ruby FAQ. Archived from the original on 2022-06-28. Retrieved 2021-06-20. \"Methods\" Archived . Retrieved 2021-06-20 2021-06-20 ^ Britt, James. \"Ruby 2.0.0 Standard Library Documentation\". Archived from the original on 2013-11-13. Retrieved 2013-12-09. ^ ^ Britt, James. \"Ruby 2.0.0 Standard Library Documentation\". Archived from the original on 2013-11-13. Retrieved 2013-12-09. \"Ruby 2.0.0 Standard Library Documentation\" Archived . Retrieved 2013-12-09 2013-12-09 ^ \"[ruby-talk:01120] Re: The value of while...\" Archived from the original on 2011-07-17. Retrieved 2008-12-06. In Ruby's syntax, statement is just a special case of an expression that cannot appear as an argument (e.g. multiple assignment). ^ ^ \"[ruby-talk:01120] Re: The value of while...\" Archived from the original on 2011-07-17. Retrieved 2008-12-06. In Ruby's syntax, statement is just a special case of an expression that cannot appear as an argument (e.g. multiple assignment). \"[ruby-talk:01120] Re: The value of while...\" the original . Retrieved 2008-12-06 2008-12-06 ^ \"[ruby-talk:02460] Re: Precedence question\". Archived from the original on 2004-07-22. Retrieved 2008-12-06. statement [...] can not be part of expression unless grouped within parentheses. ^ ^ \"[ruby-talk:02460] Re: Precedence question\". Archived from the original on 2004-07-22. Retrieved 2008-12-06. statement [...] can not be part of expression unless grouped within parentheses. \"[ruby-talk:02460] Re: Precedence question\" the original . Retrieved 2008-12-06 2008-12-06 ^ \"remove/virtual_module: Born to make your Ruby Code more than 3x faster. Hopefully\". GitHub. 21 February 2020. Archived from the original on 1 March 2017. Retrieved 29 August 2016. ^ ^ \"remove/virtual_module: Born to make your Ruby Code more than 3x faster. Hopefully\". GitHub. 21 February 2020. Archived from the original on 1 March 2017. Retrieved 29 August 2016. \"remove/virtual_module: Born to make your Ruby Code more than 3x faster. Hopefully\" GitHub Archived . Retrieved 29 August 2016 29 August ^ Peter Cooper (2010-05-18). \"The Why, What, and How of Rubinius 1.0's Release\". Archived from the original on 2010-05-24. Retrieved 2010-05-23. ^ ^ Peter Cooper (2010-05-18). \"The Why, What, and How of Rubinius 1.0's Release\". Archived from the original on 2010-05-24. Retrieved 2010-05-23. \"The Why, What, and How of Rubinius 1.0's Release\" Archived . Retrieved 2010-05-23 2010-05-23 ^ Maya Stodte (February 2000). \"IBM developerWorks \u2013 Ruby: a new language\". Archived from the original on August 18, 2000. Retrieved 3 March 2014. ^ ^ Maya Stodte (February 2000). \"IBM developerWorks \u2013 Ruby: a new language\". Archived from the original on August 18, 2000. Retrieved 3 March 2014. \"IBM developerWorks \u2013 Ruby: a new language\" the original . Retrieved 3 March 2014 3 March ^ Yukihiro Matsumoto (August 2002). \"lang-ruby-general: Re: question about Ruby initial development\". Archived from the original on 3 March 2014. Retrieved 3 March 2014. ^ ^ Yukihiro Matsumoto (August 2002). \"lang-ruby-general: Re: question about Ruby initial development\". Archived from the original on 3 March 2014. Retrieved 3 March 2014. \"lang-ruby-general: Re: question about Ruby initial development\" Archived . Retrieved 3 March 2014 3 March ^ \"The Ruby Toolbox\". Archived from the original on 2015-04-03. Retrieved 2015-04-04. ^ ^ \"The Ruby Toolbox\". Archived from the original on 2015-04-03. Retrieved 2015-04-04. \"The Ruby Toolbox\" Archived . Retrieved 2015-04-04 2015-04-04 ^ \"Stats RubyGems.org your community gem host\". rubygems.org. Archived from the original on 10 December 2021. Retrieved 10 December 2021. ^ ^ \"Stats RubyGems.org your community gem host\". rubygems.org. Archived from the original on 10 December 2021. Retrieved 10 December 2021. \"Stats RubyGems.org your community gem host\" Archived . Retrieved 10 December 2021 10 December ^ \"We retire raa.ruby-lang.org\". 2013-08-08. Archived from the original on 2015-12-31. Retrieved 2016-01-03. ^ ^ \"We retire raa.ruby-lang.org\". 2013-08-08. Archived from the original on 2015-12-31. Retrieved 2016-01-03. \"We retire raa.ruby-lang.org\" Archived . Retrieved 2016-01-03 2016-01-03 Further reading [edit] [ edit edit ] Black, David; Leo, Joseph (March 15, 2019), The Well-Grounded Rubyist (Third ed.), Manning Publications, p. 584, ISBN 978-1617295218 Manning Publications ISBN 978-1617295218 Metz, Sandi (August 22, 2018), Practical Object-Oriented Design: An Agile Primer Using Ruby (Second ed.), Addison-Wesley Professional, p. 288, ISBN 978-0-13-445647-8, archived from the original on February 13, 2020, retrieved February 13, 2020 Practical Object-Oriented Design: An Agile Primer Using Ruby Addison-Wesley Professional ISBN 978-0-13-445647-8 archived , retrieved February 13, 2020 February 13, Cooper, Peter (July 12, 2016), Beginning Ruby: From Novice to Professional (Third ed.), Apress, p. 492, ISBN 978-1484212790 Apress ISBN 978-1484212790 Carlson, Lucas; Richardson, Leonard (April 3, 2015), Ruby Cookbook: Recipes for Object-Oriented Scripting (Second ed.), O'Reilly Media, p. 963, ISBN 978-1449373719 Ruby Cookbook: Recipes for Object-Oriented Scripting O'Reilly Media ISBN 978-1449373719 Fulton, Hal; Arko, Andr\u00e9 (March 2, 2015), The Ruby Way: Solutions and Techniques in Ruby Programming (Third ed.), Addison-Wesley Professional, p. 816, ISBN 978-0-321-71463-3, archived from the original on February 13, 2020, retrieved February 13, 2020 The Ruby Way: Solutions and Techniques in Ruby Programming Addison-Wesley Professional ISBN 978-0-321-71463-3 archived , retrieved February 13, 2020 February 13, Thomas, Dave; Fowler, Chad; Hunt, Andy (July 7, 2013), Programming Ruby 1.9 & 2.0: The Pragmatic Programmers' Guide (Fourth ed.), Pragmatic Bookshelf, p. 888, ISBN 978-1937785499 Pragmatic Bookshelf ISBN 978-1937785499 McAnally, Jeremy; Arkin, Assaf (March 28, 2009), Ruby in Practice (First ed.), Manning Publications, p. 360, ISBN 978-1933988474 Manning Publications ISBN 978-1933988474 Flanagan, David; Matsumoto, Yukihiro (January 25, 2008), The Ruby Programming Language (First ed.), O'Reilly Media, p. 446, ISBN 978-0-596-51617-8 The Ruby Programming Language O'Reilly Media 446 ISBN 978-0-596-51617-8 Baird, Kevin (June 8, 2007), Ruby by Example: Concepts and Code (First ed.), No Starch Press, p. 326, ISBN 978-1593271480, archived from the original on January 13, 2020, retrieved February 13, 2020 Ruby by Example: Concepts and Code No Starch Press ISBN 978-1593271480 archived , retrieved February 13, 2020 February 13, Fitzgerald, Michael (May 14, 2007), Learning Ruby (First ed.), O'Reilly Media, p. 255, ISBN 978-0-596-52986-4 Learning Ruby O'Reilly Media 255 ISBN 978-0-596-52986-4 External links [edit] [ edit edit ] Ruby (programming language) Ruby programming language Ruby programming language Topic:Ruby Official website Official website Official website Official website Ruby documentation Ruby documentation v v t t e e Ruby programming language Implementations Ruby MRI; YARV Ruby MRI YARV mruby mruby JRuby JRuby RubyMotion RubyMotion MacRuby MacRuby IronRuby IronRuby XRuby HotRuby HotRuby MagLev MagLev Rubinius Rubinius IDE Aptana Studio Aptana Studio Komodo IDE Komodo IDE RubyMine RubyMine Applications Capistrano Capistrano Hackety Hack Hackety Hack Interactive Ruby Shell Interactive Ruby Shell Pry Pry Rake Rake Redmine Redmine RSpec RSpec RubyGems RubyGems RVM RVM Chef Chef Puppet Puppet Vagrant Vagrant Homebrew Homebrew CocoaPods CocoaPods Libraries frameworks Adhearsion Adhearsion eRuby (RHTML) eRuby Merb Merb Padrino Padrino RubyCocoa RubyCocoa Ruby on Rails Ruby on Rails Shoes Shoes Sinatra Sinatra QtRuby QtRuby Server mod_ruby mod_ruby Mongrel Mongrel Phusion Passenger (mod_rails/mod_rack) Phusion Passenger Rack Rack WEBrick WEBrick Yukihiro Matsumoto Yukihiro Matsumoto David Heinemeier Hansson David Heinemeier Hansson why the lucky stiff why the lucky stiff Dave Thomas Dave Thomas Document format Document format why's (poignant) Guide to Ruby why's (poignant) Guide to Ruby Ruby Central Ruby Central RubyKaigi RubyKaigi RubyForge RubyForge Ruby License Ruby License Category Category Commons Commons v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category v v t t e e Free and open-source software Alternative terms for free software Alternative terms for free software Comparison of open-source and closed-source software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Comparison of source-code-hosting facilities Free software Free software Free software project directories Free software project directories Gratis versus libre Gratis versus libre Long-term support Long-term support Open-source software Open-source software Open-source software development Open-source software development Outline Outline Timeline Timeline Softwarepackages Audio Audio Bioinformatics Bioinformatics Codecs Codecs Configuration management Configuration management Drivers Graphics Wireless Drivers Graphics Graphics Wireless Wireless Health Health Mathematics Mathematics Office suites Office suites Operating systems Operating systems Routing Routing Television Television Video games Video games Web applications E-commerce Web applications E-commerce E-commerce Android apps Android apps iOS apps iOS apps Commercial Commercial Formerly proprietary Formerly proprietary Formerly open-source Formerly open-source Community Free software movement Free software movement History History Open-source-software movement Open-source-software movement Events Events Advocacy Advocacy Organisations Free Software Movement of India Free Software Movement of India Free Software Foundation Free Software Foundation Licenses AFL AFL Apache Apache APSL APSL Artistic Artistic Beerware Beerware BSD BSD Creative Commons Creative Commons CDDL CDDL EPL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL Free Software Foundation GNU GPL GNU GPL GNU AGPL GNU AGPL GNU LGPL GNU LGPL ISC ISC MIT MIT MPL MPL Python Python Python Software Foundation License Python Software Foundation License Shared Source Initiative Shared Source Initiative Sleepycat Sleepycat Unlicense Unlicense WTFPL WTFPL zlib zlib Comparison of licenses Comparison of licenses Contributor License Agreement Contributor License Agreement Copyleft Copyleft Debian Free Software Guidelines Debian Free Software Guidelines Definition of Free Cultural Works Definition of Free Cultural Works Free license Free license The Free Software Definition The Free Software Definition The Open Source Definition The Open Source Definition Open-source license Open-source license Permissive software license Permissive software license Public domain Public domain Digital rights management Digital rights management License proliferation License proliferation Mozilla software rebranding Mozilla software rebranding Proprietary device drivers Proprietary device drivers Proprietary firmware Proprietary firmware Proprietary software Proprietary software SCO/Linux controversies SCO/Linux controversies Software patents Software patents Software security Software security Tivoization Tivoization Trusted Computing Trusted Computing Forking Forking GNU Manifesto GNU Manifesto Microsoft Open Specification Promise Microsoft Open Specification Promise Open-core model Open-core model Open-source hardware Open-source hardware Shared Source Initiative Shared Source Initiative Source-available software Source-available software The Cathedral and the Bazaar The Cathedral and the Bazaar Revolution OS Revolution OS Portal Portal Category Category v v t t e e ISO by standard number ISO standards ISO romanizations IEC standards 1 1 2 2 3 3 4 4 6 6 7 7 9 9 16 16 17 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 31 -0 -0 -1 -1 -3 -3 -4 -4 -5 -5 -6 -6 -7 -7 -8 -8 -9 -9 -10 -10 -11 -11 -12 -12 -13 -13 68-1 68-1 128 128 216 216 217 217 226 226 228 228 233 233 259 259 261 261 262 262 302 302 306 306 361 361 500 500 518 518 519 519 639 -1 -2 -3 -5 -6 639 -1 -1 -2 -2 -3 -3 -5 -5 -6 -6 646 646 657 657 668 668 690 690 704 704 732 732 764 764 838 838 843 843 860 860 898 898 965 965 999 999 1000 1000 1004 1004 1007 1007 1073-1 1073-1 1073-2 1073-2 1155 1155 1413 1413 1538 1538 1629 1629 1745 1745 1989 1989 2014 2014 2015 2015 2022 2022 2033 2033 2047 2047 2108 2108 2145 2145 2146 2146 2240 2240 2281 2281 2533 2533 2709 2709 2711 2711 2720 2720 2788 2788 2848 2848 2852 2852 2921 2921 3029 3029 3103 3103 3166 -1 -2 -3 3166 -1 -1 -2 -2 -3 -3 3297 3297 3307 3307 3601 3601 3602 3602 3864 3864 3901 3901 3950 3950 3977 3977 4031 4031 4157 4157 4165 4165 4217 4217 4909 4909 5218 5218 5426 5426 5427 5427 5428 5428 5725 5725 5775 5775 5776 5776 5800 5800 5807 5807 5964 5964 6166 6166 6344 6344 6346 6346 6373 6373 6385 6385 6425 6425 6429 6429 6438 6438 6523 6523 6709 6709 6943 6943 7001 7001 7002 7002 7010 7010 7027 7027 7064 7064 7098 7098 7185 7185 7200 7200 7498 -1 7498 -1 -1 7637 7637 7736 7736 7810 7810 7811 7811 7812 7812 7813 7813 7816 7816 7942 7942 8000 8000 8093 8093 8178 8178 8217 8217 8373 8373 8501-1 8501-1 8571 8571 8583 8583 8601 8601 8613 8613 8632 8632 8651 8651 8652 8652 8691 8691 8805/8806 8805/8806 8807 8807 8820-5 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8859 -1 -1 -2 -2 -3 -3 -4 -4 -5 -5 -6 -6 -7 -7 -8 -8 -8-I -8-I -9 -9 -10 -10 -11 -11 -12 -12 -13 -13 -14 -14 -15 -15 -16 -16 8879 8879 9000/9001 9000/9001 9036 9036 9075 9075 9126 9126 9141 9141 9227 9227 9241 9241 9293 9293 9314 9314 9362 9362 9407 9407 9496 9496 9506 9506 9529 9529 9564 9564 9592/9593 9592/9593 9594 9594 9660 9660 9797-1 9797-1 9897 9897 9899 9899 9945 9945 9984 9984 9985 9985 9995 9995 10006 10006 10007 10007 10116 10116 10118-3 10118-3 10160 10160 10161 10161 10165 10165 10179 10179 10206 10206 10218 10218 10279 10279 10303 -11 -21 -22 -28 -238 10303 -11 -11 -21 -21 -22 -22 -28 -28 -238 -238 10383 10383 10585 10585 10589 10589 10628 10628 10646 10646 10664 10664 10746 10746 10861 10861 10957 10957 10962 10962 10967 10967 11073 11073 11170 11170 11172 11172 11179 11179 11404 11404 11544 11544 11783 11783 11784 11784 11785 11785 11801 11801 11889 11889 11898 11898 11940 (-2) 11940 -2 11941 11941 11941 (TR) 11941 (TR) 11992 11992 12006 12006 12052 12052 12182 12182 12207 12207 12234-2 12234-2 12620 12620 13211 -1 -2 13211 -1 -1 -2 -2 13216 13216 13250 13250 13399 13399 13406-2 13406-2 13450 13450 13485 13485 13490 13490 13567 13567 13568 13568 13584 13584 13616 13616 13816 13816 13818 13818 14000 14000 14031 14031 14224 14224 14289 14289 14396 14396 14443 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14496 -2 -2 -3 -3 -6 -6 -10 -10 -11 -11 -12 -12 -14 -14 -17 -17 -20 -20 14617 14617 14644 14644 14649 14649 14651 14651 14698 14698 14764 14764 14882 14882 14971 14971 15022 15022 15189 15189 15288 15288 15291 15291 15398 15398 15408 15408 15444 -3 -9 15444 -3 -3 -9 -9 15445 15445 15438 15438 15504 15504 15511 15511 15686 15686 15693 15693 15706 -2 15706 -2 -2 15707 15707 15897 15897 15919 15919 15924 15924 15926 15926 15926 WIP 15926 WIP 15930 15930 15938 15938 16023 16023 16262 16262 16355-1 16355-1 16485 16485 16612-2 16612-2 16750 16750 16949 (TS) 16949 (TS) 17024 17024 17025 17025 17100 17100 17203 17203 17369 17369 17442 17442 17506 17506 17799 17799 18004 18004 18014 18014 18181 18181 18245 18245 18629 18629 18916 18916 19005 19005 19011 19011 19092 -1 -2 19092 -1 -1 -2 -2 19114 19114 19115 19115 19125 19125 19136 19136 19407 19407 19439 19439 19500 19500 19501 19501 19502 19502 19503 19503 19505 19505 19506 19506 19507 19507 19508 19508 19509 19509 19510 19510 19600 19600 19752 19752 19757 19757 19770 19770 19775-1 19775-1 19794-5 19794-5 19831 19831 20000 20000 20022 20022 20121 20121 20400 20400 20802 20802 20830 20830 21000 21000 21001 21001 21047 21047 21122 21122 21500 21500 21827 21827 22000 22000 22275 22275 22300 22300 22301 22301 22395 22395 22537 22537 23000 23000 23003 23003 23008 23008 23009 23009 23090-3 23090-3 23092 23092 23094-1 23094-1 23094-2 23094-2 23270 23270 23271 23271 23360 23360 23941 23941 24517 24517 24613 24613 24617 24617 24707 24707 24728 24728 25178 25178 25964 25964 26000 26000 26262 26262 26300 26300 26324 26324 27000 series 27000 series 27000 27000 27001 27001 27002 27002 27005 27005 27006 27006 27729 27729 28000 28000 29110 29148 29148 29199-2 29199-2 29500 29500 30170 30170 31000 31000 32000 32000 37001 37001 38500 38500 39075 39075 40500 40500 42010 42010 45001 45001 50001 50001 55000 55000 56000 56000 80000 80000 Category Category Authority control databases Germany Germany Germany United States United States United States France France France BnF data BnF data BnF data Czech Republic Czech Republic Czech Republic Czech Republic Spain Spain Spain Israel Israel Israel IdRef IdRef IdRef https://en.wikipedia.org/w/index.php?title=Ruby_(programming_language)&oldid=1256598228 Categories Ruby (programming language) Ruby (programming language) Class-based programming languages Class-based programming languages Dynamic programming languages Dynamic programming languages Dynamically typed programming languages Dynamically typed programming languages Free and open source interpreters Free and open source interpreters Functional languages Functional languages Free software programmed in C Free software programmed in C ISO standards ISO standards Japanese inventions Japanese inventions Multi-paradigm programming languages Multi-paradigm programming languages Object-oriented programming languages Object-oriented programming languages Programming languages created in 1995 Programming languages created in 1995 Programming languages with an ISO standard Programming languages with an ISO standard Scripting languages Scripting languages Software using the BSD license Software using the BSD license Text-oriented programming languages Text-oriented programming languages Webarchive template wayback links Webarchive template wayback links CS1 maint: multiple names: authors list CS1 maint: multiple names: authors list CS1 maint: bot: original URL status unknown CS1 maint: bot: original URL status unknown Articles with short description Articles with short description Short description matches Wikidata Short description matches Wikidata Wikipedia articles that are too technical from June 2022 Wikipedia articles that are too technical from June 2022 All articles that are too technical All articles that are too technical Articles containing potentially dated statements from 2018 Articles containing potentially dated statements from 2018 All articles containing potentially dated statements All articles containing potentially dated statements Commons category link is on Wikidata Commons category link is on Wikidata Official website different in Wikidata and Wikipedia Official website different in Wikidata and Wikipedia Articles with example Ruby code Articles with example Ruby code This page was last edited on 10 November 2024, at 18:35 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/HTML": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History Toggle History subsection 1.1 Development 1.2 HTML version timeline 1.2.1 HTML 2 1.2.2 HTML 3 1.2.3 HTML 4 1.2.4 HTML 5 1.3 HTML draft version timeline 1.3.1 XHTML versions 1.4 Transition of HTML publication to WHATWG 1 History 1 History Toggle History subsection 1.1 Development 1.1 Development 1.1 Development 1.2 HTML version timeline 1.2.1 HTML 2 1.2.2 HTML 3 1.2.3 HTML 4 1.2.4 HTML 5 1.2 HTML version timeline 1.2 HTML version timeline 1.2.1 HTML 2 1.2.1 HTML 2 1.2.1 HTML 2 1.2.2 HTML 3 1.2.2 HTML 3 1.2.2 HTML 3 1.2.3 HTML 4 1.2.3 HTML 4 1.2.3 HTML 4 1.2.4 HTML 5 1.2.4 HTML 5 1.2.4 HTML 5 1.3 HTML draft version timeline 1.3.1 XHTML versions 1.3 HTML draft version timeline 1.3 HTML draft version timeline 1.3.1 XHTML versions 1.3.1 XHTML versions 1.3.1 XHTML versions 1.4 Transition of HTML publication to WHATWG 1.4 Transition of HTML publication to WHATWG 1.4 Transition of HTML publication to WHATWG 2 Markup Toggle Markup subsection 2.1 Elements 2.1.1 Element examples 2.1.1.1 Headings 2.1.1.2 Line breaks 2.1.1.3 Links 2.1.1.4 Inputs 2.1.2 Attributes 2.2 Character and entity references 2.3 Data types 2.4 Document type declaration 2 Markup 2 Markup Toggle Markup subsection 2.1 Elements 2.1.1 Element examples 2.1.1.1 Headings 2.1.1.2 Line breaks 2.1.1.3 Links 2.1.1.4 Inputs 2.1.2 Attributes 2.1 Elements 2.1 Elements 2.1.1 Element examples 2.1.1.1 Headings 2.1.1.2 Line breaks 2.1.1.3 Links 2.1.1.4 Inputs 2.1.1 Element examples 2.1.1 Element examples 2.1.1.1 Headings 2.1.1.1 Headings 2.1.1.1 Headings 2.1.1.2 Line breaks 2.1.1.2 Line breaks 2.1.1.2 Line breaks 2.1.1.3 Links 2.1.1.3 Links 2.1.1.3 Links 2.1.1.4 Inputs 2.1.1.4 Inputs 2.1.1.4 Inputs 2.1.2 Attributes 2.1.2 Attributes 2.1.2 Attributes 2.2 Character and entity references 2.2 Character and entity references 2.2 Character and entity references 2.3 Data types 2.3 Data types 2.3 Data types 2.4 Document type declaration 2.4 Document type declaration 2.4 Document type declaration 3 Semantic HTML 3 Semantic HTML 3 Semantic HTML 4 Delivery Toggle Delivery subsection 4.1 HTTP 4.2 HTML e-mail 4.3 Naming conventions 4.4 HTML Application 4 Delivery 4 Delivery Toggle Delivery subsection 4.1 HTTP 4.1 HTTP 4.1 HTTP 4.2 HTML e-mail 4.2 HTML e-mail 4.2 HTML e-mail 4.3 Naming conventions 4.3 Naming conventions 4.3 Naming conventions 4.4 HTML Application 4.4 HTML Application 4.4 HTML Application 5 HTML4 variations Toggle HTML4 variations subsection 5.1 SGML-based versus XML-based HTML 5.2 Transitional versus strict 5.3 Frameset versus transitional 5.4 Summary of specification versions 5 HTML4 variations 5 HTML4 variations Toggle HTML4 variations subsection 5.1 SGML-based versus XML-based HTML 5.1 SGML-based versus XML-based HTML 5.1 SGML-based versus XML-based HTML 5.2 Transitional versus strict 5.2 Transitional versus strict 5.2 Transitional versus strict 5.3 Frameset versus transitional 5.3 Frameset versus transitional 5.3 Frameset versus transitional 5.4 Summary of specification versions 5.4 Summary of specification versions 5.4 Summary of specification versions 6 WHATWG HTML versus HTML5 6 WHATWG HTML versus HTML5 6 WHATWG HTML versus HTML5 7 WYSIWYG editors 7 WYSIWYG editors 7 WYSIWYG editors 8 See also 8 See also 8 See also 9 Notes 9 Notes 9 Notes 10 References 10 References 10 References 11 External links 11 External links 11 External links Toggle the table of contents HTML HTML 135 languages Afrikaans Afrikaans Afrikaans Alemannisch Alemannisch Alemannisch \u00c6nglisc \u00c6nglisc \u00c6nglisc \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s Aragon\u00e9s Aragon\u00e9s \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be Asturianu Asturianu Asturianu Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 Basa Bali Basa Bali Basa Bali \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Boarisch Boarisch Boarisch Bosanski Bosanski Bosanski Brezhoneg Brezhoneg Brezhoneg Catal\u00e0 Catal\u00e0 Catal\u00e0 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Corsu Corsu Corsu Cymraeg Cymraeg Cymraeg Dansk Dansk Dansk Davvis\u00e1megiella Davvis\u00e1megiella Davvis\u00e1megiella Deutsch Deutsch Deutsch Dolnoserbski Dolnoserbski Dolnoserbski Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fiji Hindi Fiji Hindi Fiji Hindi F\u00f8royskt F\u00f8royskt F\u00f8royskt Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais Frysk Frysk Frysk Furlan Furlan Furlan Gaeilge Gaeilge Gaeilge G\u00e0idhlig G\u00e0idhlig G\u00e0idhlig Galego Galego Galego \u06af\u06cc\u0644\u06a9\u06cc \u06af\u06cc\u0644\u06a9\u06cc \u06af\u06cc\u0644\u06a9\u06cc \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 Hornjoserbsce Hornjoserbsce Hornjoserbsce Hrvatski Hrvatski Hrvatski Ido Ido Ido Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia Interlingua Interlingua Interlingua \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea Jawa Jawa Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 Kiswahili Kiswahili Kiswahili Kurd\u00ee Kurd\u00ee Kurd\u00ee \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 Latga\u013cu Latga\u013cu Latga\u013cu Latina Latina Latina Latvie\u0161u Latvie\u0161u Latvie\u0161u L\u00ebtzebuergesch L\u00ebtzebuergesch L\u00ebtzebuergesch Lietuvi\u0173 Lietuvi\u0173 Lietuvi\u0173 Ligure Ligure Ligure Lingua Franca Nova Lingua Franca Nova Lingua Franca Nova Lombard Lombard Lombard Magyar Magyar Magyar \u092e\u0948\u0925\u093f\u0932\u0940 \u092e\u0948\u0925\u093f\u0932\u0940 \u092e\u0948\u0925\u093f\u0932\u0940 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy Malagasy Malagasy \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 Bahasa Melayu Bahasa Melayu Bahasa Melayu Minangkabau Minangkabau Minangkabau \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u95a9\u6771\u8a9e / M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304 \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Nederlands Nederlands Nederlands \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932\u0940 \u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e \u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e \u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u041d\u043e\u0445\u0447\u0438\u0439\u043d \u041d\u043e\u0445\u0447\u0438\u0439\u043d \u041d\u043e\u0445\u0447\u0438\u0439\u043d Nordfriisk Nordfriisk Nordfriisk Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk nynorsk Norsk nynorsk Norsk nynorsk \u041e\u043b\u044b\u043a \u043c\u0430\u0440\u0438\u0439 \u041e\u043b\u044b\u043a \u043c\u0430\u0440\u0438\u0439 \u041e\u043b\u044b\u043a \u043c\u0430\u0440\u0438\u0439 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1015\u1021\u102d\u102f\u101d\u103a\u108f\u1018\u102c\u108f\u101e\u102c\u108f \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 Runa Simi Runa Simi Runa Simi \u0420\u0443\u0441\u0438\u043d\u044c\u0441\u043a\u044b\u0439 \u0420\u0443\u0441\u0438\u043d\u044c\u0441\u043a\u044b\u0439 \u0420\u0443\u0441\u0438\u043d\u044c\u0441\u043a\u044b\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Scots Scots Shqip Shqip Shqip \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd Simple English Simple English Simple English \u0633\u0646\u068c\u064a \u0633\u0646\u068c\u064a \u0633\u0646\u068c\u064a Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Soomaaliga Soomaaliga Soomaaliga \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Suomi Suomi Svenska Svenska Svenska Tagalog Tagalog Tagalog \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u107d\u1083\u1087\u101e\u1083\u1087\u1010\u1086\u1038 \u107d\u1083\u1087\u101e\u1083\u1087\u1010\u1086\u1038 \u107d\u1083\u1087\u101e\u1083\u1087\u1010\u1086\u1038 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrkmen\u00e7e T\u00fcrkmen\u00e7e T\u00fcrkmen\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 V\u00e8neto V\u00e8neto V\u00e8neto Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Winaray Winaray Winaray Wolof Wolof Wolof \u5434\u8bed \u5434\u8bed \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 Yor\u00f9b\u00e1 Yor\u00f9b\u00e1 Yor\u00f9b\u00e1 \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read View source View source View source View history View history View history Tools Read Read Read View source View source View source View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons MediaWiki MediaWiki MediaWiki Wikibooks Wikibooks Wikibooks Wikiversity Wikiversity Wikiversity Wikidata item Wikidata item Wikidata item HTM HTML5 [1] [ ] Filename extension .html .htm Internet media type Type code Uniform Type Identifier (UTI) WHATWG WHATWG World Wide Web Consortium (W3C; formerly) World Wide Web Consortium ; 32 years ago (1993) 1993 Latest release Living Standard Document file format Container for HTML elements Web browser SGML XHTML Open format? Open format html.spec.whatwg.org html.spec.whatwg.org HTML Dynamic HTML Dynamic HTML HTML5 article audio canvas video HTML5 article article audio audio canvas canvas video video XHTML Basic Mobile Profile XHTML Basic Basic Mobile Profile Mobile Profile HTML element meta div and span blink marquee HTML element meta meta div and span div and span blink blink marquee marquee HTML attribute alt attribute HTML attribute alt attribute alt attribute HTML frame HTML frame HTML editor HTML editor Character encodings named characters Unicode Character encodings named characters named characters Unicode Unicode Language code Language code Document Object Model Document Object Model Browser Object Model Browser Object Model Style sheets CSS Style sheets CSS CSS Font family Font family Web colors Web colors JavaScript WebCL HTMX JavaScript WebCL WebCL HTMX HTMX Web3D WebGL WebGPU WebXR Web3D WebGL WebGL WebGPU WebGPU WebXR WebXR W3C Validator W3C Validator Validator WHATWG WHATWG Quirks mode Quirks mode Web storage Web storage Rendering engine Rendering engine Document markup languages Document markup languages Comparison of browser engines Comparison of browser engines v v t t e e Hypertext Markup Language (HTML) is the standard markup language[a] for documents designed to be displayed in a web browser. It defines the content and structure of web content. It is often assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript, a programming language. markup language [a] [ ] web browser web content Cascading Style Sheets scripting languages JavaScript Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for its appearance. Web browsers web server render web page semantically HTML elements are the building blocks of HTML pages. With HTML constructs, images and other objects such as interactive forms may be embedded into the rendered page. HTML provides a means to create structured documents by denoting structural semantics for text such as headings, paragraphs, lists, links, quotes, and other items. HTML elements are delineated by tags, written using angle brackets. Tags such as <img> and <input> directly introduce content into the page. Other tags such as <p> and </p> surround and provide information about document text and may include sub-element tags. Browsers do not display the HTML tags but use them to interpret the content of the page. HTML elements images interactive forms structured documents semantics links angle brackets < img > < input > < p > </ p > Browsers HTML can embed programs written in a scripting language such as JavaScript, which affects the behavior and content of web pages. The inclusion of CSS defines the look and layout of content. The World Wide Web Consortium (W3C), former maintainer of the HTML and current maintainer of the CSS standards, has encouraged the use of CSS over explicit presentational HTML since 1997.[update][3] A form of HTML, known as HTML5, is used to display video and audio, primarily using the <canvas> element, together with JavaScript. scripting language JavaScript World Wide Web Consortium CSS [update] [3] [ ] HTML5 < canvas > History Development Tim Berners-Lee In 1980, physicist Tim Berners-Lee, a contractor at CERN, proposed and prototyped ENQUIRE, a system for CERN researchers to use and share documents. In 1989, Berners-Lee wrote a memo proposing an Internet-based hypertext system.[4] Berners-Lee specified HTML and wrote the browser and server software in late 1990. That year, Berners-Lee and CERN data systems engineer Robert Cailliau collaborated on a joint request for funding, but the project was not formally adopted by CERN. In his personal notes of 1990, Berners-Lee listed \"some of the many areas in which hypertext is used\"; an encyclopedia is the first entry.[5] physicist Tim Berners-Lee CERN ENQUIRE Internet hypertext [4] [ ] data systems Robert Cailliau encyclopedia [5] [ ] The first publicly available description of HTML was a document called \"HTML Tags\",[6] first mentioned on the Internet by Tim Berners-Lee in late 1991.[7][8] It describes 18 elements comprising the initial, relatively simple design of HTML. Except for the hyperlink tag, these were strongly influenced by SGMLguid, an in-house Standard Generalized Markup Language (SGML)-based documentation format at CERN. Eleven of these elements still exist in HTML 4.[9] [6] [ ] [7] [ ] [8] [ ] SGMLguid Standard Generalized Markup Language [9] [ ] HTML is a markup language that web browsers use to interpret and compose text, images, and other material into visible or audible web pages. Default characteristics for every item of HTML markup are defined in the browser, and these characteristics can be altered or enhanced by the web page designer's additional use of CSS. Many of the text elements are mentioned in the 1988 ISO technical report TR 9537 Techniques for using SGML, which describes the features of early text formatting languages such as that used by the RUNOFF command developed in the early 1960s for the CTSS (Compatible Time-Sharing System) operating system. These formatting commands were derived from the commands used by typesetters to manually format documents. However, the SGML concept of generalized markup is based on elements (nested annotated ranges with attributes) rather than merely print effects, with separate structure and markup. HTML has been progressively moved in this direction with CSS. markup language web browsers compose CSS RUNOFF command CTSS Berners-Lee considered HTML to be an application of SGML. It was formally defined as such by the Internet Engineering Task Force (IETF) with the mid-1993 publication of the first proposal for an HTML specification, the \"Hypertext Markup Language (HTML)\" Internet Draft by Berners-Lee and Dan Connolly, which included an SGML Document type definition to define the syntax.[10][11] The draft expired after six months, but was notable for its acknowledgment of the NCSA Mosaic browser's custom tag for embedding in-line images, reflecting the IETF's philosophy of basing standards on successful prototypes. Similarly, Dave Raggett's competing Internet Draft, \"HTML+ (Hypertext Markup Format)\", from late 1993, suggested standardizing already-implemented features like tables and fill-out forms.[12] Internet Engineering Task Force Dan Connolly Document type definition [10] [ ] [11] [ ] NCSA Mosaic Dave Raggett [12] [ ] After the HTML and HTML+ drafts expired in early 1994, the IETF created an HTML Working Group. In 1995, this working group completed \"HTML 2.0\", the first HTML specification intended to be treated as a standard against which future implementations should be based.[13] [13] [ ] Further development under the auspices of the IETF was stalled by competing interests. Since 1996,[update] the HTML specifications have been maintained, with input from commercial software vendors, by the World Wide Web Consortium (W3C).[14] In 2000, HTML became an international standard (ISO/IEC 15445:2000). HTML 4.01 was published in late 1999, with further errata published through 2001. In 2004, development began on HTML5 in the Web Hypertext Application Technology Working Group (WHATWG), which became a joint deliverable with the W3C in 2008, and was completed and standardized on 28 October 2014.[15] [update] World Wide Web Consortium [14] [ ] ISO IEC Web Hypertext Application Technology Working Group [15] [ ] HTML version timeline HTML 2 RFC 1866 RFCs November 25, 1995: RFC 1867 (form-based file upload) RFC 1867 May 1996: RFC 1942 (tables) RFC 1942 August 1996: RFC 1980 (client-side image maps) RFC 1980 January 1997: RFC 2070 (internationalization) RFC 2070 internationalization HTML 3 [16] [ ] W3C Recommendation [17] [ ] [18] [ ] Netscape blink element Microsoft marquee element [14] [ ] MathML HTML 4 [19] [ ] Strict, in which deprecated elements are forbidden Transitional, in which deprecated elements are allowed Frameset, in which mostly only frame related elements are allowed. frame Initially code-named \"Cougar\",[18] HTML 4.0 adopted many browser-specific element types and attributes, but also sought to phase out Netscape's visual markup features by marking them as deprecated in favor of style sheets. HTML 4 is an SGML application conforming to ISO 8879 \u2013 SGML.[20] [18] [ ] deprecated [20] [ ] [21] [ ] [22] [ ] [23] [ ] [24] [ ] ISO [25] [ ] ISO/IEC JTC 1/SC 34 [24] [ ] HTML 5 HTML5 [26] [ ] [27] [ ] [28] [ ] [29] [ ] [30] [ ] [31] [ ] [32] [ ] [33] [ ] HTML draft version timeline [7] [ ] [34] [ ] [35] [ ] [36] [ ] [37] [ ] [37] [ ] [38] [ ] IETF [39] [ ] HTML+ [40] [ ] [41] [ ] [42] [ ] RFC 1866 [43] [ ] [44] [ ] [45] [ ] [45] [ ] Arena browser test bed [46] [ ] [47] [ ] [48] [ ] [14] [ ] [14] [ ] browser wars [14] [ ] [14] [ ] HTML5 Working Draft [49] [ ] SGML HTML5 [50] [ ] [51] [ ] [52] [ ] W3C [53] [ ] [54] [ ] W3C Recommendation [55] [ ] [56] [ ] [57] [ ] [58] [ ] XHTML versions XHTML XHTML is a separate language that began as a reformulation of HTML 4.01 using XML 1.0. It is now referred to as the XML syntax for HTML and is no longer being developed as a separate standard.[59] XML [59] [ ] XHTML 1.0 was published as a W3C Recommendation on January 26, 2000,[60] and was later revised and republished on August 1, 2002. It offers the same three variations as HTML 4.0 and 4.01, reformulated in XML, with minor restrictions. [60] [ ] XHTML 1.1[61] was published as a W3C Recommendation on May 31, 2001. It is based on XHTML 1.0 Strict, but includes minor changes, can be customized, and is reformulated using modules in the W3C recommendation \"Modularization of XHTML\", which was published on April 10, 2001.[62] [61] [ ] [62] [ ] XHTML 2.0 was a working draft. Work on it was abandoned in 2009 in favor of work on HTML5 and XHTML5.[63][64][65] XHTML 2.0 was incompatible with XHTML 1.x and, therefore, would be more accurately characterized as an XHTML-inspired new language than an update to XHTML 1.x. HTML5 XHTML5 [63] [ ] [64] [ ] [65] [ ] Transition of HTML publication to WHATWG HTML5 \u00a7 W3C and WHATWG conflict On 28 May 2019, the W3C announced that WHATWG would be the sole publisher of the HTML and DOM standards.[66][67][68][69] The W3C and WHATWG had been publishing competing standards since 2012. While the W3C standard was identical to the WHATWG in 2007 the standards have since progressively diverged due to different design decisions.[70] The WHATWG \"Living Standard\" had been the de facto web standard for some time.[71] [66] [ ] [67] [ ] [68] [ ] [69] [ ] [70] [ ] [71] [ ] Markup HTML markup consists of several key components, including those called tags (and their attributes), character-based data types, character references and entity references. HTML tags most commonly come in pairs like <h1> and </h1>, although some represent empty elements and so are unpaired, for example <img>. The first tag in such a pair is the start tag, and the second is the end tag (they are also called opening tags and closing tags). < h1 > </ h1 > < img > Another important component is the HTML document type declaration, which triggers standards mode rendering. document type declaration standards mode The following is an example of the classic \"Hello, World!\" program: \"Hello, World!\" program <!DOCTYPE html> < html > < head > < title > </ title > </ head > < body > < div > < p > </ p > </ div > </ body > </ html > The text between <html> and </html> describes the web page, and the text between <body> and </body> is the visible page content. The markup text <title>This is a title</title> defines the browser page title shown on browser tabs and window titles and the tag <div> defines a division of the page used for easy styling. Between <head> and </head>, a <meta> element can be used to define webpage metadata. < html > </ html > < body > </ body > < title > </ title > browser tabs window < div > < head > </ head > < meta > The Document Type Declaration <!DOCTYPE html> is for HTML5. If a declaration is not included, various browsers will revert to \"quirks mode\" for rendering.[72] <!DOCTYPE html> quirks mode [72] [ ] Elements HTML element HTML documents imply a structure of nested HTML elements. These are indicated in the document by HTML tags, enclosed in angle brackets thus: <p>.[73][better source needed] HTML elements < p > [73] [ ] better source needed better source needed In the simple, general case, the extent of an element is indicated by a pair of tags: a \"start tag\" <p> and \"end tag\" </p>. The text content of the element, if any, is placed between these tags. < p > </ p > Tags may also enclose further tag markup between the start and end, including a mixture of tags and text. This indicates further (nested) elements, as children of the parent element. The start tag may also include the element's attributes within the tag. These indicate other information, such as identifiers for sections within the document, identifiers used to bind style information to the presentation of the document, and for some tags such as the <img> used to embed images, the reference to the image resource in the format like this: <img src=\"example.com/example.jpg\"> < img > < img src = \"example.com/example.jpg\" > Some elements, such as the line break <br /> do not permit any embedded content, either text or further tags. These require only a single empty tag (akin to a start tag) and do not use an end tag. line break < br /> Many tags, particularly the closing end tag for the very commonly used paragraph element <p>, are optional. An HTML browser or other agent can infer the closure for the end of an element from the context and the structural rules defined by the HTML standard. These rules are complex and not widely understood by most HTML authors. < p > The general form of an HTML element is therefore: <tag attribute1=\"value1\" attribute2=\"value2\">''content''</tag>. Some HTML elements are defined as empty elements and take the form <tag attribute1=\"value1\" attribute2=\"value2\">. Empty elements may enclose no content, for instance, the <br /> tag or the inline <img> tag. The name of an HTML element is the name used in the tags. The end tag's name is preceded by a slash character, /, and that in empty elements the end tag is neither required nor allowed. If attributes are not mentioned, default values are used in each case. < tag attribute1 = \"value1\" attribute2 = \"value2\" > </ tag > < tag attribute1 = \"value1\" attribute2 = \"value2\" > < br /> < img > Element examples HTML element Header of the HTML document: <head>...</head>. The title is included in the head, for example: < head > </ head > < head > < title > </ title > < link rel = \"stylesheet\" href = \"stylebyjimbowales.css\" > <!-- Imports Stylesheets --> </ head > Headings HTML headings are defined with the <h1> to <h6> tags with H1 being the highest (or most important) level and H6 the least: < h1 > < h6 > < h1 > </ h1 > < h2 > </ h2 > < h3 > </ h3 > < h4 > </ h4 > < h5 > </ h5 > < h6 > </ h6 > The effects are: CSS can substantially change the rendering. Paragraphs: < p > </ p > < p > </ p > Line breaks <br />. The difference between <br /> and <p> is that <br /> breaks a line without altering the semantic structure of the page, whereas <p> sections the page into paragraphs. The element <br /> is an empty element in that, although it may have attributes, it can take no content and it may not have an end tag. < br /> < br /> < p > < br /> breaks a line < p > paragraphs < br /> < p > < br > < br > < br > </ p > Links This is a link in HTML. To create a link the <a> tag is used. The href attribute holds the URL address of the link. < a > URL < a href = \"https://www.wikipedia.org/\" > </ a > Inputs There are many possible ways a user can give inputs like: < input type = \"text\" > <!-- This is for text input --> < input type = \"file\" > <!-- This is for uploading files --> < input type = \"checkbox\" > <!-- This is for checkboxes --> Comments: <!-- This is a comment --> Comments can help in the understanding of the markup and do not display in the webpage. There are several types of markup elements used in HTML: < h2 > </ h2 > heading Cascading Style Sheets [74] [ ] < b > </ b > < b > </ b > < i > </ i > < strong > </ strong > < em > </ em > deprecated CSS hyperlink URL < a href = \"https://en.wikipedia.org/\" > </ a > Wikipedia Wikipedia < a href = \"https://example.org\" >< img src = \"image.gif\" alt = \"descriptive text\" width = \"50\" height = \"50\" border = \"0\" ></ a > Attributes HTML attribute Most of the attributes of an element are name\u2013value pairs, separated by = and written within the start tag of an element after the element's name. The value may be enclosed in single or double quotes, although values consisting of certain characters can be left unquoted in HTML (but not XHTML).[75][76] Leaving attribute values unquoted is considered unsafe.[77] In contrast with name-value pair attributes, there are some attributes that affect the element simply by their presence in the start tag of the element,[7] like the ismap attribute for the img element.[78] name\u2013value pairs [75] [ ] [76] [ ] [77] [ ] [7] [ ] [78] [ ] There are several common attributes that may appear in many elements : The id attribute provides a document-wide unique identifier for an element. This is used to identify the element so that stylesheets can alter its presentational properties, and scripts may alter, animate or delete its contents or presentation. Appended to the URL of the page, it provides a globally unique identifier for the element, typically a sub-section of the page. For example, the ID \"Attributes\" in https://en.wikipedia.org/wiki/HTML#Attributes. The class attribute provides a way of classifying similar elements. This can be used for semantic or presentation purposes. For example, an HTML document might semantically use the designation <class=\"notation\"> to indicate that all elements with this class value are subordinate to the main text of the document. In presentation, such elements might be gathered together and presented as footnotes on a page instead of appearing in the place where they occur in the HTML source. Class attributes are used semantically in microformats. Multiple class values may be specified; for example <class=\"notation important\"> puts the element into both the notation and the important classes. semantic < class =\" notation \" > microformats < class =\" notation important \" > An author may use the style attribute to assign presentational properties to a particular element. It is considered better practice to use an element's id or class attributes to select the element from within a stylesheet, though sometimes this can be too cumbersome for a simple, specific, or ad hoc styling. stylesheet The title attribute is used to attach a subtextual explanation to an element. In most browsers this attribute is displayed as a tooltip. browsers tooltip The lang attribute identifies the natural language of the element's contents, which may be different from that of the rest of the document. For example, in an English-language document: <p>Oh well, <span lang=\"fr\">c'est la vie</span>, as they say in France.</p> < p > < span lang = \"fr\" > </ span > </ p > The abbreviation element, abbr, can be used to demonstrate some of these attributes: < abbr id = \"anId\" class = \"jargon\" style = \"color:purple;\" title = \"Hypertext Markup Language\" > </ abbr > This example displays as HTML; in most browsers, pointing the cursor at the abbreviation should display the title text \"Hypertext Markup Language.\" Most elements take the language-related attribute dir to specify text direction, such as with \"rtl\" for right-to-left text in, for example, Arabic, Persian or Hebrew.[79] Arabic Persian Hebrew [79] [ ] Character and entity references List of XML and HTML character entity references Unicode and HTML As of version 4.0, HTML defines a set of 252 character entity references and a set of 1,114,050 numeric character references, both of which allow individual characters to be written via simple markup, rather than literally. A literal character and its markup counterpart are considered equivalent and are rendered identically. character entity references numeric character references The ability to \"escape\" characters in this way allows for the characters < and & (when written as &lt; and &amp;, respectively) to be interpreted as character data, rather than markup. For example, a literal < normally indicates the start of a tag, and & normally indicates the start of a character entity reference or numeric character reference; writing it as &amp; or &#x26; or &#38; allows & to be included in the content of an element or in the value of an attribute. The double-quote character (\"), when not used to quote an attribute value, must also be escaped as &quot; or &#x22; or &#34; when it appears within the attribute value itself. Equivalently, the single-quote character ('), when not used to quote an attribute value, must also be escaped as &#x27; or &#39; (or as &apos; in HTML5 or XHTML documents[80][81]) when it appears within the attribute value itself. If document authors overlook the need to escape such characters, some browsers can be very forgiving and try to use context to guess their intent. The result is still invalid markup, which makes the document less accessible to other browsers and to other user agents that may try to parse the document for search and indexing purposes for example. escape [80] [ ] [81] [ ] user agents search and indexing Escaping also allows for characters that are not easily typed, or that are not available in the document's character encoding, to be represented within the element and attribute content. For example, the acute-accented e (\u00e9), a character typically found only on Western European and South American keyboards, can be written in any HTML document as the entity reference &eacute; or as the numeric references &#xE9; or &#233;, using characters that are available on all keyboards and are supported in all character encodings. Unicode character encodings such as UTF-8 are compatible with all modern browsers and allow direct access to almost all the characters of the world's writing systems.[82] character encoding Unicode UTF-8 [82] [ ] Ampersand Less Than Greater Than Double Quote Single Quote Non-Breaking Space Copyright Registered Trademark Dagger Double dagger Trademark Data types HTML defines several data types for element content, such as script data and stylesheet data, and a plethora of types for attribute values, including IDs, names, URIs, numbers, units of length, languages, media descriptors, colors, character encodings, dates and times, and so on. All of these data types are specializations of character data. data types URIs Document type declaration HTML documents are required to start with a document type declaration (informally, a \"doctype\"). In browsers, the doctype helps to define the rendering mode\u2014particularly whether to use quirks mode. ocument type declaration quirks mode The original purpose of the doctype was to enable the parsing and validation of HTML documents by SGML tools based on the document type definition (DTD). The DTD to which the DOCTYPE refers contains a machine-readable grammar specifying the permitted and prohibited content for a document conforming to such a DTD. Browsers, on the other hand, do not implement HTML as an application of SGML and as consequence do not read the DTD. document type definition HTML5 does not define a DTD; therefore, in HTML5 the doctype declaration is simpler and shorter:[83] HTML5 [83] [ ] <!DOCTYPE html > An example of an HTML 4 doctype <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"https://www.w3.org/TR/html4/strict.dtd\" > This declaration references the DTD for the \"strict\" version of HTML 4.01. SGML-based validators read the DTD in order to properly parse the document and to perform validation. In modern browsers, a valid doctype activates standards mode as opposed to quirks mode. quirks mode In addition, HTML 4.01 provides Transitional and Frameset DTDs, as explained below. The transitional type is the most inclusive, incorporating current tags as well as older or \"deprecated\" tags, with the Strict DTD excluding deprecated tags. The frameset has all tags necessary to make frames on a page along with the tags included in transitional type.[84] as explained below [84] [ ] Semantic HTML Semantic HTML Semantic HTML is a way of writing HTML that emphasizes the meaning of the encoded information over its presentation (look). HTML has included semantic markup from its inception,[85] but has also included presentational markup, such as <font>, <i> and <center> tags. There are also the semantically neutral div and span tags. Since the late 1990s, when Cascading Style Sheets were beginning to work in most browsers, web authors have been encouraged to avoid the use of presentational HTML markup with a view to the separation of content and presentation.[86] [85] [ ] < font > < i > < center > div and span Cascading Style Sheets separation of content and presentation [86] [ ] In a 2001 discussion of the Semantic Web, Tim Berners-Lee and others gave examples of ways in which intelligent software \"agents\" may one day automatically crawl the web and find, filter, and correlate previously unrelated, published facts for the benefit of human users.[87] Such agents are not commonplace even now, but some of the ideas of Web 2.0, mashups and price comparison websites may be coming close. The main difference between these web application hybrids and Berners-Lee's semantic agents lies in the fact that the current aggregation and hybridization of information is usually designed by web developers, who already know the web locations and the API semantics of the specific data they wish to mash, compare and combine. Semantic Web Tim Berners-Lee [87] [ ] Web 2.0 mashups price comparison websites aggregation web developers API semantics An important type of web agent that does crawl and read web pages automatically, without prior knowledge of what it might find, is the web crawler or search-engine spider. These software agents are dependent on the semantic clarity of web pages they find as they use various techniques and algorithms to read and index millions of web pages a day and provide web users with search facilities without which the World Wide Web's usefulness would be greatly reduced. web crawler algorithms search facilities In order for search engine spiders to be able to rate the significance of pieces of text they find in HTML documents, and also for those creating mashups and other hybrids as well as for more automated agents as they are developed, the semantic structures that exist in HTML need to be widely and uniformly applied to bring out the meaning of the published text.[88] [88] [ ] Presentational markup tags are deprecated in current HTML and XHTML recommendations. The majority of presentational features from previous versions of HTML are no longer allowed as they lead to poorer accessibility, higher cost of site maintenance, and larger document sizes.[89] deprecated XHTML [89] [ ] Good semantic HTML also improves the accessibility of web documents (see also Web Content Accessibility Guidelines). For example, when a screen reader or audio browser can correctly ascertain the structure of a document, it will not waste the visually impaired user's time by reading out repeated or irrelevant information when it has been marked up correctly. accessibility Web Content Accessibility Guidelines Delivery HTML documents can be delivered by the same means as any other computer file. However, they are most often delivered either by HTTP from a web server or by email. HTTP web server email HTTP Hypertext Transfer Protocol The World Wide Web is composed primarily of HTML documents transmitted from web servers to web browsers using the Hypertext Transfer Protocol (HTTP). However, HTTP is used to serve images, sound, and other content, in addition to HTML. To allow the web browser to know how to handle each document it receives, other information is transmitted along with the document. This meta data usually includes the MIME type (e.g., text/html or application/xhtml+xml) and the character encoding (see Character encodings in HTML). World Wide Web Hypertext Transfer Protocol meta data MIME type Character encodings in HTML In modern browsers, the MIME type that is sent with the HTML document may affect how the document is initially interpreted. A document sent with the XHTML MIME type is expected to be well-formed XML; syntax errors may cause the browser to fail to render it. The same document sent with the HTML MIME type might be displayed successfully since some browsers are more lenient with HTML. well-formed The W3C recommendations state that XHTML 1.0 documents that follow guidelines set forth in the recommendation's Appendix C may be labeled with either MIME Type.[90] XHTML 1.1 also states that XHTML 1.1 documents should[91] be labeled with either MIME type.[92] [90] [ ] [91] [ ] [92] [ ] HTML e-mail HTML email Most graphical email clients allow the use of a subset of HTML (often ill-defined) to provide formatting and semantic markup not available with plain text. This may include typographic information like colored headings, emphasized and quoted text, inline images and diagrams. Many such clients include both a GUI editor for composing HTML e-mail messages and a rendering engine for displaying them. Use of HTML in e-mail is criticized by some because of compatibility issues, because it can help disguise phishing attacks, because of accessibility issues for blind or visually impaired people, because it can confuse spam filters and because the message size is larger than plain text. semantic plain text GUI phishing spam Naming conventions The most common filename extension for files containing HTML is .html. A common abbreviation of this is .htm, which originated because some early operating systems and file systems, such as DOS and the limitations imposed by FAT data structure, limited file extensions to three letters.[93] filename extension files DOS FAT three letters [93] [ ] HTML Application HTML Application An HTML Application (HTA; file extension .hta) is a Microsoft Windows application that uses HTML and Dynamic HTML in a browser to provide the application's graphical interface. A regular HTML file is confined to the security model of the web browser's security, communicating only to web servers and manipulating only web page objects and site cookies. An HTA runs as a fully trusted application and therefore has more privileges, like creation/editing/removal of files and Windows Registry entries. Because they operate outside the browser's security model, HTAs cannot be executed via HTTP, but must be downloaded (just like an EXE file) and executed from local file system. Microsoft Windows browser web browser's security site cookies Windows Registry EXE HTML4 variations Since its inception, HTML and its associated protocols gained acceptance relatively quickly. However, no clear standards existed in the early years of the language. Though its creators originally conceived of HTML as a semantic language devoid of presentation details,[94] practical uses pushed many presentational elements and attributes into the language, driven largely by the various browser vendors. The latest standards surrounding HTML reflect efforts to overcome the sometimes chaotic development of the language[95] and to create a rational foundation for building both meaningful and well-presented documents. To return HTML to its role as a semantic language, the W3C has developed style languages such as CSS and XSL to shoulder the burden of presentation. In conjunction, the HTML specification has slowly reined in the presentational elements. [94] [ ] [95] [ ] W3C CSS XSL There are two axes differentiating various variations of HTML as currently specified: SGML-based HTML versus XML-based HTML (referred to as XHTML) on one axis, and strict versus transitional (loose) versus frameset on the other axis. SGML-based versus XML-based HTML One difference in the latest[when?] HTML specifications lies in the distinction between the SGML-based specification and the XML-based specification. The XML-based specification is usually called XHTML to distinguish it clearly from the more traditional definition. However, the root element name continues to be \"html\" even in the XHTML-specified HTML. The W3C intended XHTML 1.0 to be identical to HTML 4.01 except where limitations of XML over the more complex SGML require workarounds. Because XHTML and HTML are closely related, they are sometimes documented in parallel. In such circumstances, some authors conflate the two names as (X)HTML or X(HTML). when? when? XHTML conflate the two names Like HTML 4.01, XHTML 1.0 has three sub-specifications: strict, transitional, and frameset. Aside from the different opening declarations for a document, the differences between an HTML 4.01 and XHTML 1.0 document\u2014in each of the corresponding DTDs\u2014are largely syntactic. The underlying syntax of HTML allows many shortcuts that XHTML does not, such as elements with optional opening or closing tags, and even empty elements which must not have an end tag. By contrast, XHTML requires all elements to have an opening tag and a closing tag. XHTML, however, also introduces a new shortcut: an XHTML tag may be opened and closed within the same tag, by including a slash before the end of the tag like this: <br/>. The introduction of this shorthand, which is not used in the SGML declaration for HTML 4.01, may confuse earlier software unfamiliar with this new convention. A fix for this is to include a space before closing the tag, as such: <br />.[96] < br /> < br /> [96] [ ] To understand the subtle differences between HTML and XHTML, consider the transformation of a valid and well-formed XHTML 1.0 document that adheres to Appendix C (see below) into a valid HTML 4.01 document. Making this translation requires the following steps: The language for an element should be specified with a lang attribute rather than the XHTML xml:lang attribute. XHTML uses XML's built-in language-defining functionality attribute. Remove the XML namespace (xmlns=URI). HTML has no facilities for namespaces. Change the document type declaration from XHTML 1.0 to HTML 4.01. (see DTD section for further explanation). DTD section If present, remove the XML declaration. (Typically this is: <?xml version=\"1.0\" encoding=\"utf-8\"?>). <?xml version=\"1.0\" encoding=\"utf-8\"?> Ensure that the document's MIME type is set to text/html. For both HTML and XHTML, this comes from the HTTP Content-Type header sent by the server. Change the XML empty-element syntax to an HTML style empty element (<br/> to <br />). < br /> < br /> Those are the main changes necessary to translate a document from XHTML 1.0 to HTML 4.01. To translate from HTML to XHTML would also require the addition of any omitted opening or closing tags. Whether coding in HTML or XHTML it may just be best to always include the optional tags within an HTML document rather than remembering which tags can be omitted. A well-formed XHTML document adheres to all the syntax requirements of XML. A valid document adheres to the content specification for XHTML, which describes the document structure. The W3C recommends several conventions to ensure an easy migration between HTML and XHTML (see HTML Compatibility Guidelines). The following steps can be applied to XHTML 1.0 documents only: HTML Compatibility Guidelines Include both xml:lang and lang attributes on any elements assigning language. Use the empty-element syntax only for elements specified as empty in HTML. Include an extra space in empty-element tags: for example <br /> instead of <br/>. < br /> < br /> Include explicit close tags for elements that permit content but are left empty (for example, <div></div>, not <div />). < div ></ div > < div /> Omit the XML declaration. By carefully following the W3C's compatibility guidelines, a user agent should be able to interpret the document equally as HTML or XHTML. For documents that are XHTML 1.0 and have been made compatible in this way, the W3C permits them to be served either as HTML (with a text/html MIME type), or as XHTML (with an application/xhtml+xml or application/xml MIME type). When delivered as XHTML, browsers should use an XML parser, which adheres strictly to the XML specifications for parsing the document's contents. MIME type Transitional versus strict HTML 4 defined three different versions of the language: Strict, Transitional (once called Loose), and Frameset. The Strict version is intended for new documents and is considered best practice, while the Transitional and Frameset versions were developed to make it easier to transition documents that conformed to older HTML specifications or did not conform to any specification to a version of HTML 4. The Transitional and Frameset versions allow for presentational markup, which is omitted in the Strict version. Instead, cascading style sheets are encouraged to improve the presentation of HTML documents. Because XHTML 1 only defines an XML syntax for the language defined by HTML 4, the same differences apply to XHTML 1 as well. cascading style sheets The Transitional version allows the following parts of the vocabulary, which are not included in the Strict version: A looser content model Inline elements and plain text are allowed directly in: body, blockquote, form, noscript and noframes Inline elements and plain text are allowed directly in: body, blockquote, form, noscript and noframes Presentation related elements underline (u) (Deprecated. can confuse a visitor with a hyperlink.) strike-through (s) center (Deprecated. use CSS instead.) font (Deprecated. use CSS instead.) basefont (Deprecated. use CSS instead.) underline (u) (Deprecated. can confuse a visitor with a hyperlink.) strike-through (s) center (Deprecated. use CSS instead.) font (Deprecated. use CSS instead.) basefont (Deprecated. use CSS instead.) Presentation related attributes background (Deprecated. use CSS instead.) and bgcolor (Deprecated. use CSS instead.) attributes for body (required element according to the W3C.) element. align (Deprecated. use CSS instead.) attribute on div, form, paragraph (p) and heading (h1...h6) elements align (Deprecated. use CSS instead.), noshade (Deprecated. use CSS instead.), size (Deprecated. use CSS instead.) and width (Deprecated. use CSS instead.) attributes on hr element align (Deprecated. use CSS instead.), border, vspace and hspace attributes on img and object (caution: the object element is only supported in Internet Explorer (from the major browsers)) elements align (Deprecated. use CSS instead.) attribute on legend and caption elements align (Deprecated. use CSS instead.) and bgcolor (Deprecated. use CSS instead.) on table element nowrap (Obsolete), bgcolor (Deprecated. use CSS instead.), width, height on td and th elements bgcolor (Deprecated. use CSS instead.) attribute on tr element clear (Obsolete) attribute on br element compact attribute on dl, dir and menu elements type (Deprecated. use CSS instead.), compact (Deprecated. use CSS instead.) and start (Deprecated. use CSS instead.) attributes on ol and ul elements type and value attributes on li element width attribute on pre element background (Deprecated. use CSS instead.) and bgcolor (Deprecated. use CSS instead.) attributes for body (required element according to the W3C.) element. align (Deprecated. use CSS instead.) attribute on div, form, paragraph (p) and heading (h1...h6) elements align (Deprecated. use CSS instead.), noshade (Deprecated. use CSS instead.), size (Deprecated. use CSS instead.) and width (Deprecated. use CSS instead.) attributes on hr element align (Deprecated. use CSS instead.), border, vspace and hspace attributes on img and object (caution: the object element is only supported in Internet Explorer (from the major browsers)) elements align (Deprecated. use CSS instead.) attribute on legend and caption elements align (Deprecated. use CSS instead.) and bgcolor (Deprecated. use CSS instead.) on table element nowrap (Obsolete), bgcolor (Deprecated. use CSS instead.), width, height on td and th elements bgcolor (Deprecated. use CSS instead.) attribute on tr element clear (Obsolete) attribute on br element compact attribute on dl, dir and menu elements type (Deprecated. use CSS instead.), compact (Deprecated. use CSS instead.) and start (Deprecated. use CSS instead.) attributes on ol and ul elements type and value attributes on li element width attribute on pre element Additional elements in Transitional specification menu (Deprecated. use CSS instead.) list (no substitute, though the unordered list, is recommended) dir (Deprecated. use CSS instead.) list (no substitute, though the unordered list is recommended) isindex (Deprecated.) (element requires server-side support and is typically added to documents server-side, form and input elements can be used as a substitute) applet (Deprecated. use the object element instead.) menu (Deprecated. use CSS instead.) list (no substitute, though the unordered list, is recommended) dir (Deprecated. use CSS instead.) list (no substitute, though the unordered list is recommended) isindex (Deprecated.) (element requires server-side support and is typically added to documents server-side, form and input elements can be used as a substitute) applet (Deprecated. use the object element instead.) The language (Obsolete) attribute on script element (redundant with the type attribute). Frame related entities iframe noframes target (Deprecated in the map, link and form elements.) attribute on a, client-side image-map (map), link, form and base elements iframe noframes target (Deprecated in the map, link and form elements.) attribute on a, client-side image-map (map), link, form and base elements The Frameset version includes everything in the Transitional version, as well as the frameset element (used instead of body) and the frame element. Frameset versus transitional In addition to the above transitional differences, the frameset specifications (whether XHTML 1.0 or HTML 4.01) specify a different content model, with frameset replacing body, that contains either frame elements, or optionally noframes with a body. Summary of specification versions As this list demonstrates, the loose versions of the specification are maintained for legacy support. However, contrary to popular misconceptions, the move to XHTML does not imply a removal of this legacy support. Rather the X in XML stands for extensible and the W3C is modularizing the entire specification and opens it up to independent extensions. The primary achievement in the move from XHTML 1.0 to XHTML 1.1 is the modularization of the entire specification. The strict version of HTML is deployed in XHTML 1.1 through a set of modular extensions to the base XHTML 1.1 specification. Likewise, someone looking for the loose (transitional) or frameset specifications will find similar extended XHTML 1.1 support (much of it is contained in the legacy or frame modules). Modularization also allows for separate features to develop on their own timetable. So for example, XHTML 1.1 will allow quicker migration to emerging XML standards such as MathML (a presentational and semantic math language based on XML) and XForms\u2014a new highly advanced web-form technology to replace the existing HTML forms. MathML XForms In summary, the HTML 4 specification primarily reined in all the various HTML implementations into a single clearly written specification based on SGML. XHTML 1.0, ported this specification, as is, to the new XML-defined specification. Next, XHTML 1.1 takes advantage of the extensible nature of XML and modularizes the whole specification. XHTML 2.0 was intended to be the first step in adding new features to the specification in a standards-body-based approach. WHATWG HTML versus HTML5 \u00a7 Transition of HTML Publication to WHATWG The HTML Living Standard, which is developed by WHATWG, is the official version, while W3C HTML5 is no longer separate from WHATWG. WYSIWYG editors Please expand the article by making an edit requestto include this information . Further details may exist on the talk page. by making an edit request by making an edit request by making an edit request to include this information talk page (January 2021) January 2021 There are some WYSIWYG editors (what you see is what you get), in which the user lays out everything as it is to appear in the HTML document using a graphical user interface (GUI), often similar to word processors. The editor renders the document rather than showing the code, so authors do not require extensive knowledge of HTML. WYSIWYG graphical user interface word processors The WYSIWYG editing model has been criticized,[97][98] primarily because of the low quality of the generated code; there are voices[who?] advocating a change to the WYSIWYM model (what you see is what you mean). [97] [ ] [98] [ ] who? who? WYSIWYM WYSIWYG editors remain a controversial topic because of their perceived flaws such as: Relying mainly on the layout as opposed to meaning, often using markup that does not convey the intended meaning but simply copies the layout.[99] [99] [ ] Often producing extremely verbose and redundant code that fails to make use of the cascading nature of HTML and CSS. CSS Often producing ungrammatical markup, called tag soup or semantically incorrect markup (such as <em> for italics). tag soup < em > As a great deal of the information in HTML documents is not in the layout, the model has been criticized for its \"what you see is all you get\"-nature.[100] [100] [ ] See also Breadcrumb navigation Breadcrumb navigation Cellpadding Cellpadding Comparison of HTML parsers Comparison of HTML parsers Dynamic web page Dynamic web page HTML Application HTML Application HTML character references HTML character references List of document markup languages List of document markup languages List of XML and HTML character entity references List of XML and HTML character entity references Microdata (HTML) Microdata (HTML) Microformat Microformat Polyglot markup Polyglot markup Semantic HTML Semantic HTML W3C (X)HTML Validator W3C (X)HTML Validator Web colors Web colors Notes ^ Even though HTML is executable, it is not viewed as a programming language in programming language discourse.[2] ^ ^ Even though HTML is executable, it is not viewed as a programming language in programming language discourse.[2] programming language [2] [ ] References ^ \"W3C Html\". ^ ^ \"W3C Html\". \"W3C Html\" ^ Hermans, Felienne; Schlesinger, Ari (2024-10-17). \"A Case for Feminism in Programming Language Design\". OOPSLA. ACM: 205\u2013222. doi:10.1145/3689492.3689809. ISBN 979-8-4007-1215-9. ^ ^ Hermans, Felienne; Schlesinger, Ari (2024-10-17). \"A Case for Feminism in Programming Language Design\". OOPSLA. ACM: 205\u2013222. doi:10.1145/3689492.3689809. ISBN 979-8-4007-1215-9. \"A Case for Feminism in Programming Language Design\" OOPSLA 205\u2013 doi 10.1145/3689492.3689809 ISBN 979-8-4007-1215-9 ^ \"HTML 4.0 Specification \u2014 W3C Recommendation \u2014 Conformance: requirements and recommendations\". World Wide Web Consortium. December 18, 1997. Archived from the original on July 5, 2015. Retrieved July 6, 2015. ^ ^ \"HTML 4.0 Specification \u2014 W3C Recommendation \u2014 Conformance: requirements and recommendations\". World Wide Web Consortium. December 18, 1997. Archived from the original on July 5, 2015. Retrieved July 6, 2015. \"HTML 4.0 Specification \u2014 W3C Recommendation \u2014 Conformance: requirements and recommendations\" Archived . Retrieved July 6, 2015 July 6, ^ Tim Berners-Lee, \"Information Management: A Proposal\". CERN (March 1989, May 1990). W3C. ^ ^ Tim Berners-Lee, \"Information Management: A Proposal\". CERN (March 1989, May 1990). W3C. Information Management: A Proposal ^ Berners-Lee, Tim. \"Intended Uses\". W3C. ^ ^ Berners-Lee, Tim. \"Intended Uses\". W3C. \"Intended Uses\" ^ \"Tags used in HTML\". info.cern.ch. October 1991. Retrieved 2 March 2023. ^ ^ \"Tags used in HTML\". info.cern.ch. October 1991. Retrieved 2 March 2023. \"Tags used in HTML\" . Retrieved 2 March 2023 2 March ^ a b c \"Tags used in HTML\". World Wide Web Consortium. November 3, 1992. Archived from the original on January 31, 2010. Retrieved November 16, 2008. ^ a b c a b c \"Tags used in HTML\". World Wide Web Consortium. November 3, 1992. Archived from the original on January 31, 2010. Retrieved November 16, 2008. \"Tags used in HTML\" Archived . Retrieved November 16, 2008 November 16, ^ Berners-Lee, Tim (October 29, 1991). \"Re: status. Re: X11 BROWSER for WWW\". World Wide Web Consortium. Archived from the original on May 24, 2007. Retrieved April 8, 2007. ^ ^ Berners-Lee, Tim (October 29, 1991). \"Re: status. Re: X11 BROWSER for WWW\". World Wide Web Consortium. Archived from the original on May 24, 2007. Retrieved April 8, 2007. \"Re: status. Re: X11 BROWSER for WWW\" Archived . Retrieved April 8, 2007 April 8, ^ \"Index of the HTML 4 elements\". World Wide Web Consortium. December 24, 1999. Archived from the original on May 5, 2007. Retrieved April 8, 2007. ^ ^ \"Index of the HTML 4 elements\". World Wide Web Consortium. December 24, 1999. Archived from the original on May 5, 2007. Retrieved April 8, 2007. \"Index of the HTML 4 elements\" Archived . Retrieved April 8, 2007 April 8, ^ Berners-Lee, Tim (December 9, 1991). \"Re: SGML/HTML docs, X Browser\". w3. Archived from the original on December 22, 2007. Retrieved June 16, 2007. SGML is very general. HTML is a specific application of the SGML basic syntax applied to hypertext documents with simple structure. ^ ^ Berners-Lee, Tim (December 9, 1991). \"Re: SGML/HTML docs, X Browser\". w3. Archived from the original on December 22, 2007. Retrieved June 16, 2007. SGML is very general. HTML is a specific application of the SGML basic syntax applied to hypertext documents with simple structure. \"Re: SGML/HTML docs, X Browser\" Archived . Retrieved June 16, 2007 June 16, ^ Berners-Lee, Tim; Connolly, Daniel (June 1993). \"Hypertext Markup Language (HTML): A Representation of Textual Information and MetaInformation for Retrieval and Interchange\". w3. Archived from the original on January 3, 2017. Retrieved January 4, 2017. ^ ^ Berners-Lee, Tim; Connolly, Daniel (June 1993). \"Hypertext Markup Language (HTML): A Representation of Textual Information and MetaInformation for Retrieval and Interchange\". w3. Archived from the original on January 3, 2017. Retrieved January 4, 2017. \"Hypertext Markup Language (HTML): A Representation of Textual Information and MetaInformation for Retrieval and Interchange\" Archived . Retrieved January 4, 2017 January 4, ^ Raggett, Dave. \"A Review of the HTML+ Document Format\". w3. Archived from the original on February 29, 2000. Retrieved May 22, 2020. The hypertext markup language HTML was developed as a simple non-proprietary delivery format for global hypertext. HTML+ is a set of modular extensions to HTML and has been developed in response to a growing understanding of the needs of information providers. These extensions include text flow around floating figures, fill-out forms, tables, and mathematical equations. ^ ^ Raggett, Dave. \"A Review of the HTML+ Document Format\". w3. Archived from the original on February 29, 2000. Retrieved May 22, 2020. The hypertext markup language HTML was developed as a simple non-proprietary delivery format for global hypertext. HTML+ is a set of modular extensions to HTML and has been developed in response to a growing understanding of the needs of information providers. These extensions include text flow around floating figures, fill-out forms, tables, and mathematical equations. Raggett, Dave \"A Review of the HTML+ Document Format\" Archived . Retrieved May 22, 2020 May 22, ^ Berners-Lee, Tim; Connolly, Daniel W. (November 1995). Hypertext Markup Language - 2.0. Network Working Group. doi:10.17487/RFC1866. RFC 1866. Historic. Obsoleted by RFC 2854. This document thus defines an HTML 2.0 (to distinguish it from the previous informal specifications). Future (generally upwardly compatible) versions of HTML with new features will be released with higher version numbers. ^ ^ Berners-Lee, Tim; Connolly, Daniel W. (November 1995). Hypertext Markup Language - 2.0. Network Working Group. doi:10.17487/RFC1866. RFC 1866. Historic. Obsoleted by RFC 2854. This document thus defines an HTML 2.0 (to distinguish it from the previous informal specifications). Future (generally upwardly compatible) versions of HTML with new features will be released with higher version numbers. Berners-Lee, Tim Hypertext Markup Language - 2.0 doi 10.17487/RFC1866 10.17487/RFC1866 RFC 1866 2854 ^ a b c d e f Raggett, Dave (1998). Raggett on HTML 4. Archived from the original on August 9, 2007. Retrieved July 9, 2007. ^ a b c d e f a b c d e f Raggett, Dave (1998). Raggett on HTML 4. Archived from the original on August 9, 2007. Retrieved July 9, 2007. Raggett on HTML 4 the original . Retrieved July 9, 2007 July 9, ^ \"HTML5 \u2013 Hypertext Markup Language \u2013 5.0\". Internet Engineering Task Force. 28 October 2014. Archived from the original on October 28, 2014. Retrieved November 25, 2014. This document recommends HTML 5.0 after completion. ^ ^ \"HTML5 \u2013 Hypertext Markup Language \u2013 5.0\". Internet Engineering Task Force. 28 October 2014. Archived from the original on October 28, 2014. Retrieved November 25, 2014. This document recommends HTML 5.0 after completion. \"HTML5 \u2013 Hypertext Markup Language \u2013 5.0\" Archived . Retrieved November 25, 2014 November 25, ^ \"HTML 3.2 Reference Specification\". World Wide Web Consortium. January 14, 1997. Retrieved November 16, 2008. ^ ^ \"HTML 3.2 Reference Specification\". World Wide Web Consortium. January 14, 1997. Retrieved November 16, 2008. \"HTML 3.2 Reference Specification\" . Retrieved November 16, 2008 November 16, ^ \"IETF HTML WG\". Retrieved June 16, 2007. Note: This working group is closed ^ ^ \"IETF HTML WG\". Retrieved June 16, 2007. Note: This working group is closed \"IETF HTML WG\" . Retrieved June 16, 2007 June 16, ^ a b Engelfriet, Arnoud. \"Introduction to Wilbur\". htmlhelp.com. Retrieved June 16, 2007. ^ a b a b Engelfriet, Arnoud. \"Introduction to Wilbur\". htmlhelp.com. Retrieved June 16, 2007. Engelfriet, Arnoud \"Introduction to Wilbur\" . Retrieved June 16, 2007 June 16, ^ \"HTML 4.0 Specification\". World Wide Web Consortium. December 18, 1997. Retrieved November 16, 2008. ^ ^ \"HTML 4.0 Specification\". World Wide Web Consortium. December 18, 1997. Retrieved November 16, 2008. \"HTML 4.0 Specification\" . Retrieved November 16, 2008 November 16, ^ \"HTML 4 \u2013 4 Conformance: requirements and recommendations\". Retrieved December 30, 2009. ^ ^ \"HTML 4 \u2013 4 Conformance: requirements and recommendations\". Retrieved December 30, 2009. \"HTML 4 \u2013 4 Conformance: requirements and recommendations\" . Retrieved December 30, 2009 December 30, ^ \"HTML 4.0 Specification\". World Wide Web Consortium. April 24, 1998. Retrieved November 16, 2008. ^ ^ \"HTML 4.0 Specification\". World Wide Web Consortium. April 24, 1998. Retrieved November 16, 2008. \"HTML 4.0 Specification\" . Retrieved November 16, 2008 November 16, ^ \"HTML 4.01 Specification\". World Wide Web Consortium. December 24, 1999. Retrieved November 16, 2008. ^ ^ \"HTML 4.01 Specification\". World Wide Web Consortium. December 24, 1999. Retrieved November 16, 2008. \"HTML 4.01 Specification\" . Retrieved November 16, 2008 November 16, ^ \"HTML 4 Errata\". W3C. Retrieved March 2, 2023. ^ ^ \"HTML 4 Errata\". W3C. Retrieved March 2, 2023. \"HTML 4 Errata\" . Retrieved March 2, 2023 March 2, ^ a b ISO (2000). \"ISO/IEC 15445:2000 \u2013 Information technology \u2013 Document description and processing languages \u2013 HyperText Markup Language (HTML)\". Retrieved March 1, 2023. ^ a b a b ISO (2000). \"ISO/IEC 15445:2000 \u2013 Information technology \u2013 Document description and processing languages \u2013 HyperText Markup Language (HTML)\". Retrieved March 1, 2023. \"ISO/IEC 15445:2000 \u2013 Information technology \u2013 Document description and processing languages \u2013 HyperText Markup Language (HTML)\" . Retrieved March 1, 2023 March 1, ^ \"ISO/IEC 15445:2000(E) ISO-HTML\". www.scss.tcd.ie. Geneva, CH: ISO/IEC. May 15, 2000. Retrieved March 1, 2023. ^ ^ \"ISO/IEC 15445:2000(E) ISO-HTML\". www.scss.tcd.ie. Geneva, CH: ISO/IEC. May 15, 2000. Retrieved March 1, 2023. \"ISO/IEC 15445:2000(E) ISO-HTML\" . Retrieved March 1, 2023 March 1, ^ \"HTML5: A vocabulary and associated APIs for HTML and XHTML\". World Wide Web Consortium. 28 October 2014. Retrieved 31 October 2014. ^ ^ \"HTML5: A vocabulary and associated APIs for HTML and XHTML\". World Wide Web Consortium. 28 October 2014. Retrieved 31 October 2014. \"HTML5: A vocabulary and associated APIs for HTML and XHTML\" . Retrieved 31 October 2014 31 October ^ \"Open Web Platform Milestone Achieved with HTML5 Recommendation\" (Press release). World Wide Web Consortium. 28 October 2014. Retrieved 31 October 2014. ^ ^ \"Open Web Platform Milestone Achieved with HTML5 Recommendation\" (Press release). World Wide Web Consortium. 28 October 2014. Retrieved 31 October 2014. \"Open Web Platform Milestone Achieved with HTML5 Recommendation\" . Retrieved 31 October 2014 31 October ^ \"HTML 5.1\". World Wide Web Consortium. 1 November 2016. Retrieved 6 January 2017. ^ ^ \"HTML 5.1\". World Wide Web Consortium. 1 November 2016. Retrieved 6 January 2017. \"HTML 5.1\" . Retrieved 6 January 2017 6 January ^ \"HTML 5.1 is a W3C Recommendation\". World Wide Web Consortium. 1 November 2016. Retrieved 6 January 2017. ^ ^ \"HTML 5.1 is a W3C Recommendation\". World Wide Web Consortium. 1 November 2016. Retrieved 6 January 2017. \"HTML 5.1 is a W3C Recommendation\" . Retrieved 6 January 2017 6 January ^ Philippe le Hegaret (17 November 2016). \"HTML 5.1 is the gold standard\". World Wide Web Consortium. Retrieved 6 January 2017. ^ ^ Philippe le Hegaret (17 November 2016). \"HTML 5.1 is the gold standard\". World Wide Web Consortium. Retrieved 6 January 2017. \"HTML 5.1 is the gold standard\" . Retrieved 6 January 2017 6 January ^ \"HTML 5.2\". World Wide Web Consortium. 14 December 2017. Retrieved 15 December 2017. ^ ^ \"HTML 5.2\". World Wide Web Consortium. 14 December 2017. Retrieved 15 December 2017. \"HTML 5.2\" . Retrieved 15 December 2017 15 December ^ \"HTML 5.2 is now a W3C Recommendation\". World Wide Web Consortium. 14 December 2017. Retrieved 15 December 2017. ^ ^ \"HTML 5.2 is now a W3C Recommendation\". World Wide Web Consortium. 14 December 2017. Retrieved 15 December 2017. \"HTML 5.2 is now a W3C Recommendation\" . Retrieved 15 December 2017 15 December ^ Charles McCathie Nevile (14 December 2017). \"HTML 5.2 is done, HTML 5.3 is coming\". World Wide Web Consortium. Retrieved 15 December 2017. ^ ^ Charles McCathie Nevile (14 December 2017). \"HTML 5.2 is done, HTML 5.3 is coming\". World Wide Web Consortium. Retrieved 15 December 2017. \"HTML 5.2 is done, HTML 5.3 is coming\" . Retrieved 15 December 2017 15 December ^ Connolly, Daniel (6 June 1992). \"MIME as a hypertext architecture\". CERN. Retrieved 24 October 2010. ^ ^ Connolly, Daniel (6 June 1992). \"MIME as a hypertext architecture\". CERN. Retrieved 24 October 2010. Connolly, Daniel \"MIME as a hypertext architecture\" . Retrieved 24 October 2010 24 October ^ Connolly, Daniel (15 July 1992). \"HTML DTD enclosed\". CERN. Retrieved 24 October 2010. ^ ^ Connolly, Daniel (15 July 1992). \"HTML DTD enclosed\". CERN. Retrieved 24 October 2010. Connolly, Daniel \"HTML DTD enclosed\" . Retrieved 24 October 2010 24 October ^ Connolly, Daniel (18 August 1992). \"document type declaration subset for Hyper Text Markup Language as defined by the World Wide Web project\". CERN. Archived from the original on 14 March 2012. Retrieved 24 October 2010. ^ ^ Connolly, Daniel (18 August 1992). \"document type declaration subset for Hyper Text Markup Language as defined by the World Wide Web project\". CERN. Archived from the original on 14 March 2012. Retrieved 24 October 2010. Connolly, Daniel \"document type declaration subset for Hyper Text Markup Language as defined by the World Wide Web project\" the original . Retrieved 24 October 2010 24 October ^ a b Connolly, Daniel (24 November 1992). \"Document Type Definition for the Hyper Text Markup Language as used by the World Wide Web application\". CERN. Archived from the original on 18 January 2012. Retrieved 24 October 2010. See section \"Revision History\" ^ a b a b Connolly, Daniel (24 November 1992). \"Document Type Definition for the Hyper Text Markup Language as used by the World Wide Web application\". CERN. Archived from the original on 18 January 2012. Retrieved 24 October 2010. See section \"Revision History\" Connolly, Daniel \"Document Type Definition for the Hyper Text Markup Language as used by the World Wide Web application\" the original . Retrieved 24 October 2010 24 October ^ Berners-Lee, Tim; Connolly, Daniel (June 1993). \"Hyper Text Markup Language (HTML) Internet-Draft version 1.1\". IETF IIIR Working Group. Retrieved 18 September 2010. ^ ^ Berners-Lee, Tim; Connolly, Daniel (June 1993). \"Hyper Text Markup Language (HTML) Internet-Draft version 1.1\". IETF IIIR Working Group. Retrieved 18 September 2010. Berners-Lee, Tim Connolly, Daniel \"Hyper Text Markup Language (HTML) Internet-Draft version 1.1\" . Retrieved 18 September 2010 18 September ^ Berners-Lee, Tim; Connolly, Daniel (June 1993). \"Hypertext Markup Language (HTML) Internet-Draft version 1.2\". IETF IIIR Working Group. Retrieved 18 September 2010. ^ ^ Berners-Lee, Tim; Connolly, Daniel (June 1993). \"Hypertext Markup Language (HTML) Internet-Draft version 1.2\". IETF IIIR Working Group. Retrieved 18 September 2010. Berners-Lee, Tim Connolly, Daniel \"Hypertext Markup Language (HTML) Internet-Draft version 1.2\" . Retrieved 18 September 2010 18 September ^ Raggett, Dave (1993-11-08). \"History for draft-raggett-www-html-00\". IETF Datatracker. Retrieved 2019-11-18. ^ ^ Raggett, Dave (1993-11-08). \"History for draft-raggett-www-html-00\". IETF Datatracker. Retrieved 2019-11-18. \"History for draft-raggett-www-html-00\" . Retrieved 2019-11-18 2019-11-18 ^ Berners-Lee, Tim; Connolly, Daniel (28 November 1994). \"HyperText Markup Language Specification \u2013 2.0 INTERNET DRAFT\". Internet Engineering Task Force. Retrieved 24 October 2010. ^ ^ Berners-Lee, Tim; Connolly, Daniel (28 November 1994). \"HyperText Markup Language Specification \u2013 2.0 INTERNET DRAFT\". Internet Engineering Task Force. Retrieved 24 October 2010. Berners-Lee, Tim Connolly, Daniel \"HyperText Markup Language Specification \u2013 2.0 INTERNET DRAFT\" . Retrieved 24 October 2010 24 October ^ Connolly, Daniel W. (1995-05-16). \"Hypertext Markup Language \u2013 2.0\". tools.ietf.org. Retrieved 2019-11-18. ^ ^ Connolly, Daniel W. (1995-05-16). \"Hypertext Markup Language \u2013 2.0\". tools.ietf.org. Retrieved 2019-11-18. \"Hypertext Markup Language \u2013 2.0\" . Retrieved 2019-11-18 2019-11-18 ^ Berners-Lee, Tim; Connolly, Daniel W. (November 1995). Hypertext Markup Language - 2.0. Network Working Group. doi:10.17487/RFC1866. RFC 1866. Historic. Obsoleted by RFC 2854. ^ ^ Berners-Lee, Tim; Connolly, Daniel W. (November 1995). Hypertext Markup Language - 2.0. Network Working Group. doi:10.17487/RFC1866. RFC 1866. Historic. Obsoleted by RFC 2854. Berners-Lee, Tim Hypertext Markup Language - 2.0 doi 10.17487/RFC1866 10.17487/RFC1866 RFC 1866 2854 ^ \"HTML 3.0 Draft (Expired!) Materials\". World Wide Web Consortium. December 21, 1995. Retrieved November 16, 2008. ^ ^ \"HTML 3.0 Draft (Expired!) Materials\". World Wide Web Consortium. December 21, 1995. Retrieved November 16, 2008. \"HTML 3.0 Draft (Expired!) Materials\" . Retrieved November 16, 2008 November 16, ^ a b \"HyperText Markup Language Specification Version 3.0\". Retrieved June 16, 2007. ^ a b a b \"HyperText Markup Language Specification Version 3.0\". Retrieved June 16, 2007. \"HyperText Markup Language Specification Version 3.0\" . Retrieved June 16, 2007 June 16, ^ Raggett, Dave (28 March 1995). \"HyperText Markup Language Specification Version 3.0\". HTML 3.0 Internet Draft Expires in six months. World Wide Web Consortium. Retrieved 17 June 2010. ^ ^ Raggett, Dave (28 March 1995). \"HyperText Markup Language Specification Version 3.0\". HTML 3.0 Internet Draft Expires in six months. World Wide Web Consortium. Retrieved 17 June 2010. \"HyperText Markup Language Specification Version 3.0\" World Wide Web Consortium . Retrieved 17 June 2010 17 June ^ Bowers, N. (1998). \"Weblint: just another perl hack\" (PDF). 1998 USENIX Annual Technical Conference (USENIX ATC 98). ^ ^ Bowers, N. (1998). \"Weblint: just another perl hack\" (PDF). 1998 USENIX Annual Technical Conference (USENIX ATC 98). \"Weblint: just another perl hack\" (PDF) ^ Lie, H\u00e5kon Wium; Bos, Bert (April 1997). Cascading style sheets: designing for the Web. Addison Wesley Longman. p. 263. ISBN 978-0-201-41998-6. Retrieved 9 June 2010. ^ ^ Lie, H\u00e5kon Wium; Bos, Bert (April 1997). Cascading style sheets: designing for the Web. Addison Wesley Longman. p. 263. ISBN 978-0-201-41998-6. Retrieved 9 June 2010. Lie, H\u00e5kon Wium Bos, Bert Cascading style sheets: designing for the Web Cascading style sheets: designing for the Web 263 ISBN 978-0-201-41998-6 . Retrieved 9 June 2010 9 June ^ \"HTML5\". World Wide Web Consortium. June 10, 2008. Retrieved November 16, 2008. ^ ^ \"HTML5\". World Wide Web Consortium. June 10, 2008. Retrieved November 16, 2008. \"HTML5\" . Retrieved November 16, 2008 November 16, ^ \"HTML5, one vocabulary, two serializations\". 15 January 2008. Retrieved February 25, 2009. ^ ^ \"HTML5, one vocabulary, two serializations\". 15 January 2008. Retrieved February 25, 2009. \"HTML5, one vocabulary, two serializations\" . Retrieved February 25, 2009 February 25, ^ \"W3C Confirms May 2011 for HTML5 Last Call, Targets 2014 for HTML5 Standard\". World Wide Web Consortium. 14 February 2011. Retrieved 18 February 2011. ^ ^ \"W3C Confirms May 2011 for HTML5 Last Call, Targets 2014 for HTML5 Standard\". World Wide Web Consortium. 14 February 2011. Retrieved 18 February 2011. \"W3C Confirms May 2011 for HTML5 Last Call, Targets 2014 for HTML5 Standard\" World Wide Web Consortium . Retrieved 18 February 2011 18 February ^ Hickson, Ian (January 19, 2011). \"HTML Is the New HTML5\". The WHATWG Blog. Archived from the original on 6 October 2019. Retrieved 21 January 2011. ^ ^ Hickson, Ian (January 19, 2011). \"HTML Is the New HTML5\". The WHATWG Blog. Archived from the original on 6 October 2019. Retrieved 21 January 2011. \"HTML Is the New HTML5\" the original . Retrieved 21 January 2011 21 January ^ Grannell, Craig (July 23, 2012). \"HTML5 gets the splits\". Net magazine. Archived from the original on Jul 25, 2012. Retrieved 23 July 2012. ^ ^ Grannell, Craig (July 23, 2012). \"HTML5 gets the splits\". Net magazine. Archived from the original on Jul 25, 2012. Retrieved 23 July 2012. \"HTML5 gets the splits\" the original . Retrieved 23 July 2012 23 July ^ \"HTML5\". W3C. 2012-12-17. Retrieved 2013-06-15. ^ ^ \"HTML5\". W3C. 2012-12-17. Retrieved 2013-06-15. \"HTML5\" . Retrieved 2013-06-15 2013-06-15 ^ \"When Will HTML5 Be Finished?\". FAQ. WHAT Working Group. Retrieved 29 November 2009. ^ ^ \"When Will HTML5 Be Finished?\". FAQ. WHAT Working Group. Retrieved 29 November 2009. \"When Will HTML5 Be Finished?\" . Retrieved 29 November 2009 29 November ^ \"Call for Review: HTML5 Proposed Recommendation Published W3C News\". W3C. 2014-09-16. Retrieved 2014-09-27. ^ ^ \"Call for Review: HTML5 Proposed Recommendation Published W3C News\". W3C. 2014-09-16. Retrieved 2014-09-27. \"Call for Review: HTML5 Proposed Recommendation Published W3C News\" . Retrieved 2014-09-27 2014-09-27 ^ \"Open Web Platform Milestone Achieved with HTML5 Recommendation\". W3C. 28 October 2014. Retrieved 29 October 2014. ^ ^ \"Open Web Platform Milestone Achieved with HTML5 Recommendation\". W3C. 28 October 2014. Retrieved 29 October 2014. \"Open Web Platform Milestone Achieved with HTML5 Recommendation\" . Retrieved 29 October 2014 29 October ^ \"HTML5 specification finalized, squabbling over specs continues\". Ars Technica. 2014-10-29. Retrieved 2014-10-29. ^ ^ \"HTML5 specification finalized, squabbling over specs continues\". Ars Technica. 2014-10-29. Retrieved 2014-10-29. \"HTML5 specification finalized, squabbling over specs continues\" . Retrieved 2014-10-29 2014-10-29 ^ \"HTML vs XML syntax\". WHATWG. Retrieved 22 March 2023. ^ ^ \"HTML vs XML syntax\". WHATWG. Retrieved 22 March 2023. \"HTML vs XML syntax\" . Retrieved 22 March 2023 22 March ^ \"XHTML 1.0: The Extensible HyperText Markup Language (Second Edition)\". World Wide Web Consortium. January 26, 2000. Retrieved November 16, 2008. ^ ^ \"XHTML 1.0: The Extensible HyperText Markup Language (Second Edition)\". World Wide Web Consortium. January 26, 2000. Retrieved November 16, 2008. \"XHTML 1.0: The Extensible HyperText Markup Language (Second Edition)\" . Retrieved November 16, 2008 November 16, ^ \"XHTML 1.1 \u2013 Module-based XHTML \u2014 Second Edition\". World Wide Web Consortium. February 16, 2007. Retrieved November 16, 2008. ^ ^ \"XHTML 1.1 \u2013 Module-based XHTML \u2014 Second Edition\". World Wide Web Consortium. February 16, 2007. Retrieved November 16, 2008. \"XHTML 1.1 \u2013 Module-based XHTML \u2014 Second Edition\" . Retrieved November 16, 2008 November 16, ^ \"Modularization of XHTML\". W3C. Retrieved 2017-01-04. ^ ^ \"Modularization of XHTML\". W3C. Retrieved 2017-01-04. \"Modularization of XHTML\" . Retrieved 2017-01-04 2017-01-04 ^ \"XHTM 2.0\". World Wide Web Consortium. July 26, 2006. Retrieved November 16, 2008. ^ ^ \"XHTM 2.0\". World Wide Web Consortium. July 26, 2006. Retrieved November 16, 2008. \"XHTM 2.0\" . Retrieved November 16, 2008 November 16, ^ \"XHTML 2 Working Group Expected to Stop Work End of 2009, W3C to Increase Resources on HTML5\". World Wide Web Consortium. July 17, 2009. Retrieved November 16, 2008. ^ ^ \"XHTML 2 Working Group Expected to Stop Work End of 2009, W3C to Increase Resources on HTML5\". World Wide Web Consortium. July 17, 2009. Retrieved November 16, 2008. \"XHTML 2 Working Group Expected to Stop Work End of 2009, W3C to Increase Resources on HTML5\" . Retrieved November 16, 2008 November 16, ^ \"W3C XHTML FAQ\". ^ ^ \"W3C XHTML FAQ\". \"W3C XHTML FAQ\" ^ Jaffe, Jeff (28 May 2019). \"W3C and WHATWG to Work Together to Advance the Open Web Platform\". W3C Blog. Archived from the original on 29 May 2019. Retrieved 29 May 2019. ^ ^ Jaffe, Jeff (28 May 2019). \"W3C and WHATWG to Work Together to Advance the Open Web Platform\". W3C Blog. Archived from the original on 29 May 2019. Retrieved 29 May 2019. \"W3C and WHATWG to Work Together to Advance the Open Web Platform\" Archived . Retrieved 29 May 2019 29 May ^ \"W3C and the WHATWG Signed an Agreement to Collaborate on a Single Version of HTML and DOM\". W3C. 28 May 2019. Archived from the original on 29 May 2019. Retrieved 29 May 2019. ^ ^ \"W3C and the WHATWG Signed an Agreement to Collaborate on a Single Version of HTML and DOM\". W3C. 28 May 2019. Archived from the original on 29 May 2019. Retrieved 29 May 2019. \"W3C and the WHATWG Signed an Agreement to Collaborate on a Single Version of HTML and DOM\" Archived . Retrieved 29 May 2019 29 May ^ \"Memorandum of Understanding Between W3C and WHATWG\". W3C. 28 May 2019. Archived from the original on 29 May 2019. Retrieved 29 May 2019. ^ ^ \"Memorandum of Understanding Between W3C and WHATWG\". W3C. 28 May 2019. Archived from the original on 29 May 2019. Retrieved 29 May 2019. \"Memorandum of Understanding Between W3C and WHATWG\" Archived . Retrieved 29 May 2019 29 May ^ Cimpanu, Catalin (29 May 2019). \"Browser vendors Win War with W3C over HTML and DOM standards\". ZDNet. Archived from the original on 29 May 2019. Retrieved 29 May 2019. ^ ^ Cimpanu, Catalin (29 May 2019). \"Browser vendors Win War with W3C over HTML and DOM standards\". ZDNet. Archived from the original on 29 May 2019. Retrieved 29 May 2019. \"Browser vendors Win War with W3C over HTML and DOM standards\" the original . Retrieved 29 May 2019 29 May ^ \"W3C \u2013 WHATWG Wiki\". WHATWG Wiki. Archived from the original on 29 May 2019. Retrieved 29 May 2019. ^ ^ \"W3C \u2013 WHATWG Wiki\". WHATWG Wiki. Archived from the original on 29 May 2019. Retrieved 29 May 2019. \"W3C \u2013 WHATWG Wiki\" the original . Retrieved 29 May 2019 29 May ^ Shankland, Stephen (July 9, 2009). \"An epitaph for the Web standard, XHTML 2\". CNET. CBS INTERACTIVE INC. ^ ^ Shankland, Stephen (July 9, 2009). \"An epitaph for the Web standard, XHTML 2\". CNET. CBS INTERACTIVE INC. \"An epitaph for the Web standard, XHTML 2\" ^ Activating Browser Modes with Doctype. Hsivonen.iki.fi. Retrieved on 2012-02-16. ^ ^ Activating Browser Modes with Doctype. Hsivonen.iki.fi. Retrieved on 2012-02-16. Activating Browser Modes with Doctype ^ \"HTML Elements\". w3schools. Retrieved 16 March 2015. ^ ^ \"HTML Elements\". w3schools. Retrieved 16 March 2015. \"HTML Elements\" . Retrieved 16 March 2015 16 March ^ \"CSS Introduction\". W3schools. Retrieved 16 March 2015. ^ ^ \"CSS Introduction\". W3schools. Retrieved 16 March 2015. \"CSS Introduction\" . Retrieved 16 March 2015 16 March ^ \"On SGML and HTML\". World Wide Web Consortium. Retrieved November 16, 2008. ^ ^ \"On SGML and HTML\". World Wide Web Consortium. Retrieved November 16, 2008. \"On SGML and HTML\" . Retrieved November 16, 2008 November 16, ^ \"XHTML 1.0 \u2013 Differences with HTML 4\". World Wide Web Consortium. Retrieved November 16, 2008. ^ ^ \"XHTML 1.0 \u2013 Differences with HTML 4\". World Wide Web Consortium. Retrieved November 16, 2008. \"XHTML 1.0 \u2013 Differences with HTML 4\" . Retrieved November 16, 2008 November 16, ^ Korpela, Jukka (July 6, 1998). \"Why attribute values should always be quoted in HTML\". Cs.tut.fi. Retrieved November 16, 2008. ^ ^ Korpela, Jukka (July 6, 1998). \"Why attribute values should always be quoted in HTML\". Cs.tut.fi. Retrieved November 16, 2008. \"Why attribute values should always be quoted in HTML\" . Retrieved November 16, 2008 November 16, ^ \"Objects, Images, and Applets in HTML documents\". World Wide Web Consortium. December 24, 1999. Retrieved November 16, 2008. ^ ^ \"Objects, Images, and Applets in HTML documents\". World Wide Web Consortium. December 24, 1999. Retrieved November 16, 2008. \"Objects, Images, and Applets in HTML documents\" . Retrieved November 16, 2008 November 16, ^ \"H56: Using the dir attribute on an inline element to resolve problems with nested directional runs\". Techniques for WCAG 2.0. W3C. Retrieved 18 September 2010. ^ ^ \"H56: Using the dir attribute on an inline element to resolve problems with nested directional runs\". Techniques for WCAG 2.0. W3C. Retrieved 18 September 2010. \"H56: Using the dir attribute on an inline element to resolve problems with nested directional runs\" . Retrieved 18 September 2010 18 September ^ \"Character Entity Reference Chart\". World Wide Web Consortium. October 24, 2012. ^ ^ \"Character Entity Reference Chart\". World Wide Web Consortium. October 24, 2012. \"Character Entity Reference Chart\" ^ \"The Named Character Reference '\". World Wide Web Consortium. January 26, 2000. ^ ^ \"The Named Character Reference '\". World Wide Web Consortium. January 26, 2000. \"The Named Character Reference '\" ^ \"The Unicode Standard: A Technical Introduction\". Unicode. Retrieved 2010-03-16. ^ ^ \"The Unicode Standard: A Technical Introduction\". Unicode. Retrieved 2010-03-16. \"The Unicode Standard: A Technical Introduction\" . Retrieved 2010-03-16 2010-03-16 ^ \"The HTML syntax\". HTML Standard. Retrieved 2013-08-19. ^ ^ \"The HTML syntax\". HTML Standard. Retrieved 2013-08-19. \"The HTML syntax\" . Retrieved 2013-08-19 2013-08-19 ^ \"HTML 4 Frameset Document Type Definition\". W3C. Retrieved 2021-12-25. ^ ^ \"HTML 4 Frameset Document Type Definition\". W3C. Retrieved 2021-12-25. \"HTML 4 Frameset Document Type Definition\" . Retrieved 2021-12-25 2021-12-25 ^ Berners-Lee, Tim; Fischetti, Mark (2000). Weaving the Web: The Original Design and Ultimate Destiny of the World Wide Web by Its Inventor. San Francisco: Harper. ISBN 978-0-06-251587-2. ^ ^ Berners-Lee, Tim; Fischetti, Mark (2000). Weaving the Web: The Original Design and Ultimate Destiny of the World Wide Web by Its Inventor. San Francisco: Harper. ISBN 978-0-06-251587-2. Weaving the Web: The Original Design and Ultimate Destiny of the World Wide Web by Its Inventor Weaving the Web: The Original Design and Ultimate Destiny of the World Wide Web by Its Inventor ISBN 978-0-06-251587-2 ^ Raggett, Dave (2002). \"Adding a touch of style\". W3C. Retrieved October 2, 2009. This article notes that presentational HTML markup may be useful when targeting browsers \"before Netscape 4.0 and Internet Explorer 4.0\". See the list of web browsers to confirm that these were both released in 1997. ^ ^ Raggett, Dave (2002). \"Adding a touch of style\". W3C. Retrieved October 2, 2009. This article notes that presentational HTML markup may be useful when targeting browsers \"before Netscape 4.0 and Internet Explorer 4.0\". See the list of web browsers to confirm that these were both released in 1997. \"Adding a touch of style\" . Retrieved October 2, 2009 October 2, list of web browsers ^ Berners-Lee, Tim; Hendler, James; Lassila, Ora (May 1, 2001). \"The Semantic Web\". Scientific American. Retrieved October 2, 2009. ^ ^ Berners-Lee, Tim; Hendler, James; Lassila, Ora (May 1, 2001). \"The Semantic Web\". Scientific American. Retrieved October 2, 2009. \"The Semantic Web\" . Retrieved October 2, 2009 October 2, ^ Nigel Shadbolt, Wendy Hall and Tim Berners-Lee (2006). \"The Semantic Web Revisited\" (PDF). IEEE Intelligent Systems. Archived from the original (PDF) on March 20, 2013. Retrieved October 2, 2009. ^ ^ Nigel Shadbolt, Wendy Hall and Tim Berners-Lee (2006). \"The Semantic Web Revisited\" (PDF). IEEE Intelligent Systems. Archived from the original (PDF) on March 20, 2013. Retrieved October 2, 2009. \"The Semantic Web Revisited\" (PDF) the original (PDF) . Retrieved October 2, 2009 October 2, ^ \"HTML: The Living Standard\". WHATWG. Retrieved 27 September 2018. ^ ^ \"HTML: The Living Standard\". WHATWG. Retrieved 27 September 2018. \"HTML: The Living Standard\" . Retrieved 27 September 2018 27 September ^ \"XHTML 1.0 The Extensible HyperText Markup Language (Second Edition)\". World Wide Web Consortium. 2002 [2000]. Retrieved December 7, 2008. XHTML Documents which follow the guidelines set forth in Appendix C, \"HTML Compatibility Guidelines\" may be labeled with the Internet Media Type \"text/html\" [RFC2854], as they are compatible with most HTML browsers. Those documents, and any other document conforming to this specification, may also be labeled with the Internet Media Type \"application/xhtml+xml\" as defined in [RFC3236]. ^ ^ \"XHTML 1.0 The Extensible HyperText Markup Language (Second Edition)\". World Wide Web Consortium. 2002 [2000]. Retrieved December 7, 2008. XHTML Documents which follow the guidelines set forth in Appendix C, \"HTML Compatibility Guidelines\" may be labeled with the Internet Media Type \"text/html\" [RFC2854], as they are compatible with most HTML browsers. Those documents, and any other document conforming to this specification, may also be labeled with the Internet Media Type \"application/xhtml+xml\" as defined in [RFC3236]. \"XHTML 1.0 The Extensible HyperText Markup Language (Second Edition)\" . Retrieved December 7, 2008 December 7, ^ S. Bradner (March 1997). Key words for use in RFCs to Indicate Requirement Levels. Network Working Group. doi:10.17487/RFC2119. BCP 14. RFC 2119. Best Current Practice 14. Updated by RFC 8174. 3. SHOULD This word, or the adjective \"RECOMMENDED\", mean that there may exist valid reasons in particular circumstances to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course. ^ ^ S. Bradner (March 1997). Key words for use in RFCs to Indicate Requirement Levels. Network Working Group. doi:10.17487/RFC2119. BCP 14. RFC 2119. Best Current Practice 14. Updated by RFC 8174. 3. SHOULD This word, or the adjective \"RECOMMENDED\", mean that there may exist valid reasons in particular circumstances to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course. Key words for use in RFCs to Indicate Requirement Levels doi 10.17487/RFC2119 10.17487/RFC2119 RFC 2119 8174 ^ \"XHTML 1.1 \u2013 Module-based XHTML \u2014 Second Edition\". World Wide Web Consortium. 2007. Retrieved December 7, 2008. XHTML 1.1 documents SHOULD be labeled with the Internet Media Type text/html as defined in [RFC2854] or application/xhtml+xml as defined in [RFC3236]. ^ ^ \"XHTML 1.1 \u2013 Module-based XHTML \u2014 Second Edition\". World Wide Web Consortium. 2007. Retrieved December 7, 2008. XHTML 1.1 documents SHOULD be labeled with the Internet Media Type text/html as defined in [RFC2854] or application/xhtml+xml as defined in [RFC3236]. \"XHTML 1.1 \u2013 Module-based XHTML \u2014 Second Edition\" . Retrieved December 7, 2008 December 7, ^ \"Naming Files, Paths, and Namespaces\". Microsoft. Retrieved 16 March 2015. ^ ^ \"Naming Files, Paths, and Namespaces\". Microsoft. Retrieved 16 March 2015. \"Naming Files, Paths, and Namespaces\" . Retrieved 16 March 2015 16 March ^ HTML Design Constraints, W3C Archives ^ ^ HTML Design Constraints, W3C Archives HTML Design Constraints ^ WWW: BTB \u2013 HTML, Pris Sears ^ ^ WWW: BTB \u2013 HTML, Pris Sears WWW: BTB \u2013 HTML ^ Freeman, E (2005). Head First HTML. O'Reilly. ^ ^ Freeman, E (2005). Head First HTML. O'Reilly. ^ Sauer, C.: WYSIWIKI \u2013 Questioning WYSIWYG in the Internet Age. In: Wikimania (2006) ^ ^ Sauer, C.: WYSIWIKI \u2013 Questioning WYSIWYG in the Internet Age. In: Wikimania (2006) ^ Spiesser, J., Kitchen, L.: Optimization of HTML automatically generated by WYSIWYG programs. In: 13th International Conference on World Wide Web, pp. 355\u2014364. WWW '04. ACM, New York, NY (New York, NY, U.S., May 17\u201320, 2004) ^ ^ Spiesser, J., Kitchen, L.: Optimization of HTML automatically generated by WYSIWYG programs. In: 13th International Conference on World Wide Web, pp. 355\u2014364. WWW '04. ACM, New York, NY (New York, NY, U.S., May 17\u201320, 2004) ^ XHTML Reference: blockquote Archived 2010-03-25 at the Wayback Machine. Xhtml.com. Retrieved on 2012-02-16. ^ ^ XHTML Reference: blockquote Archived 2010-03-25 at the Wayback Machine. Xhtml.com. Retrieved on 2012-02-16. XHTML Reference: blockquote Archived Wayback Machine ^ Doug Engelbart's INVISIBLE REVOLUTION. Invisiblerevolution.net. Retrieved on 2012-02-16. ^ ^ Doug Engelbart's INVISIBLE REVOLUTION. Invisiblerevolution.net. Retrieved on 2012-02-16. Doug Engelbart's INVISIBLE REVOLUTION External links HTML sister projects sister projects Definitions from Wiktionary Definitions from Wiktionary Definitions Media from Commons Media from Commons Media Textbooks from Wikibooks Textbooks from Wikibooks Textbooks Resources from Wikiversity Resources from Wikiversity Resources Data from Wikidata Data from Wikidata Data Discussions from Meta-Wiki Discussions from Meta-Wiki Discussions Documentation from MediaWiki Documentation from MediaWiki Documentation WHATWG's HTML Living Standard WHATWG HTML Living Standard Dave Raggett's Introduction to HTML Dave Raggett's Introduction to HTML Tim Berners-Lee Gives the Web a New Definition (archived 12 April 2011) Tim Berners-Lee Gives the Web a New Definition List of all HTML elements from all major versions List of all HTML elements from all major versions HTML Entities HTML Entities Sean B. Palmer. \"Early History of HTML \u2013 1990 to 1992\". Infomesh. Retrieved 2022-04-13. (Timeframe: 1980\u20131995) \"Early History of HTML \u2013 1990 to 1992\" . Retrieved 2022-04-13 2022-04-13 v v t t e e Web browsers Features standards protocols Bookmarks Bookmarks Extensions Extensions Privacy mode Privacy mode Web standards HTML v5 HTML v5 v5 CSS CSS DOM DOM JavaScript WebAssembly Web storage IndexedDB WebGL WebGPU JavaScript WebAssembly WebAssembly Web storage Web storage IndexedDB IndexedDB WebGL WebGL WebGPU WebGPU HTTP Encryption Cookies third-party HTTP Encryption Encryption Cookies third-party Cookies third-party third-party OCSP OCSP WebRTC WebRTC WebSocket WebSocket Blink Proprietary Google Chrome Google Chrome Arc Arc Avast Avast Coc Coc Coc Coc Comodo Comodo Epic Epic Maxthon Maxthon Microsoft Edge Microsoft Edge Opera (Mobile) Opera Mobile Puffin Puffin QQ QQ Samsung Samsung Silk Silk Sleipnir Sleipnir SRWare SRWare UC UC Vivaldi Vivaldi Whale Whale Yandex Yandex FOSS Chromium Chromium Brave Brave Dooble Dooble Falkon Falkon Otter Otter Supermium Supermium ungoogled ungoogled Gecko Firefox Firefox Floorp Floorp GNU IceCat GNU IceCat LibreWolf LibreWolf Midori Midori SlimBrowser SlimBrowser Tor Tor Zen Zen Gecko forks Basilisk K-Meleon Pale Moon SeaMonkey Waterfox forks Basilisk Basilisk K-Meleon K-Meleon Pale Moon Pale Moon SeaMonkey SeaMonkey Waterfox Waterfox WebKit Safari Safari GNOME Web GNOME Web iCab iCab Orion Orion engine 360 360 DuckDuckGo DuckDuckGo Konqueror Konqueror Lunascape Lunascape NetFront NetFront qutebrowser qutebrowser eww eww Flow Flow Ladybird Ladybird Links Links Lynx Lynx NetSurf NetSurf Opera Mini Opera Mini w3m w3m Blink Beaker Beaker Citrio Citrio Flock Flock Redcore Redcore Rockmelt Rockmelt SalamWeb SalamWeb Sputnik Sputnik Torch Torch Gecko Beonex Beonex Camino Camino Classilla Classilla Conkeror Conkeror Firefox Lite Firefox Lite Galeon Galeon Ghostzilla Ghostzilla IceDragon IceDragon Kazehakase Kazehakase Kylo Kylo Lotus Lotus MicroB MicroB Minimo Minimo Mozilla suite Mozilla suite PirateBrowser PirateBrowser Pogo Pogo Strata Strata Swiftfox Swiftfox Swiftweasel Swiftweasel TenFourFox TenFourFox Timberwolf Timberwolf xB xB MSHTML Internet Explorer Internet Explorer AOL AOL Deepnet Deepnet GreenBrowser GreenBrowser MediaBrowser MediaBrowser NeoPlanet NeoPlanet NetCaptor NetCaptor SpaceTime SpaceTime ZAC ZAC WebKit Arora Arora BOLT BOLT Dolphin Dolphin Fluid Fluid Google TV Google TV Iris Iris Mercury Mercury Nokia Symbian Nokia Symbian OmniWeb OmniWeb Opera Coast Opera Coast Origyn Origyn QtWeb QtWeb Shiira Shiira Steel Steel surf surf Uzbl Uzbl WebPositive WebPositive xombrero xombrero abaco abaco Amaya Amaya Arachne Arachne Arena Arena Blazer Blazer Cake Cake Charon Charon CM CM Deepfish Deepfish Dillo Dillo Edge Legacy Edge Legacy ELinks ELinks Gazelle Gazelle HotJava HotJava IBM Home Page Reader IBM Home Page Reader IBM WebExplorer IBM WebExplorer IBrowse IBrowse Internet Explorer for Mac Internet Explorer for Mac KidZui KidZui Line Mode Line Mode Mosaic Mosaic MSN TV MSN TV NetPositive NetPositive Netscape Netscape Skweezer Skweezer Skyfire Skyfire ThunderHawk ThunderHawk Vision Vision WinWAP WinWAP WorldWideWeb WorldWideWeb Category Category Comparisons Comparisons List List v v t t e e World Wide Web Consortium Recommendations ActivityPub ActivityPub Activity Streams Activity Streams ARIA ARIA Canonical XML Canonical XML CDF CDF CSS Animations Flexbox Grid CSS Animations Animations Flexbox Flexbox Grid Grid DOM DOM EXI EXI EmotionML EmotionML Geolocation API Geolocation API HTML HTML5 HTML HTML5 HTML5 IndexedDB IndexedDB ITS ITS JSON-LD JSON-LD Linked Data Notifications Linked Data Notifications MathML MathML Micropub Micropub OWL OWL PLS PLS RDF Schema RDFa RDF Schema Schema RDFa RDFa SISR SISR SKOS SKOS SMIL SMIL SOAP SOAP SRGS SRGS SRI SRI SSML SSML SVG Filter Effects SVG Filter Effects Filter Effects SCXML SCXML SHACL SHACL SPARQL SPARQL Timed text Timed text VoiceXML VoiceXML WebAssembly WebAssembly WoT TD WoT TD TD Web storage Web storage WSDL WSDL Webmention Webmention WebSub WebSub WebVTT WebVTT WOFF WOFF XHTML +RDFa XHTML +RDFa +RDFa XML Base Encryption Events Information Set Namespace Schema Signature XForms XInclude XLink XOP XPath 2.0 3.x XPointer XProc XQuery XSL XSL-FO XSLT elements XML Base Base Encryption Encryption Events Events Information Set Information Set Namespace Namespace Schema Schema Signature Signature XForms XForms XInclude XInclude XLink XLink XOP XOP XPath 2.0 3.x XPath 2.0 2.0 3.x 3.x XPointer XPointer XProc XProc XQuery XQuery XSL XSL XSL-FO XSL-FO XSLT elements XSLT elements elements IndieAuth IndieAuth XAdES XAdES XBL XBL XHTML+SMIL XHTML+SMIL XUP XUP Working drafts CCXML CCXML CURIE CURIE EME EME InkML InkML MSE MSE RIF RIF SMIL Timesheets SMIL Timesheets sXBL sXBL WebGPU WebGPU WebXR WebXR XFDL XFDL XFrames XFrames XMLHttpRequest XMLHttpRequest Web Content Accessibility Guidelines Web Content Accessibility Guidelines Markup Validation Service Markup Validation Service Web Accessibility Initiative Web Accessibility Initiative Web Components Web Components C-HTML C-HTML HDML HDML JSSS JSSS PGML PGML VML VML WebPlatform WebPlatform P3P P3P XHTML+MathML+SVG XHTML+MathML+SVG World Wide Web Foundation World Wide Web Foundation WHATWG WHATWG AB AB Board Board TAG TAG CSS CSS SVG SVG WebAssembly WebAssembly WebAuthn WebAuthn Web Advertising BG Web Advertising BG WebAssembly CG WebAssembly Device Description (DDWG) Device Description HTML HTML Multimodal Interaction Activity (MMI) Multimodal Interaction Activity CERN httpd CERN httpd Libwww Libwww Browsers Line Mode (1990\u2013) Line Mode (1990\u2013) Arena (1993\u201398) Arena (1993\u201398) Agora (1994\u201397) Agora (1994\u201397) Argo (1994\u201397) Argo (1994\u201397) Amaya (browser/editor, 1996\u20132012) Amaya (browser/editor, 1996\u20132012) International World Wide Web Conference (IW3C) Steering Committee (IW3C2) First conference (\"WWW1\", 1994) International World Wide Web Conference Steering Committee (IW3C2) Steering Committee First conference (\"WWW1\", 1994) First conference v v t t e e Document markup languages Office suite Compound Document Format Compound Document Format OOXML SpreadsheetML PresentationML WordprocessingML OOXML SpreadsheetML SpreadsheetML PresentationML PresentationML WordprocessingML WordprocessingML ODF ODF UOF UOF HTML HTML XHTML XHTML MathML MathML RTF RTF TeX TeX LaTeX LaTeX Markdown Markdown AmigaGuide AmigaGuide AsciiDoc AsciiDoc BBCode BBCode CML CML C-HTML C-HTML ConTeXt ConTeXt CrossMark CrossMark DITA DITA DocBook DocBook EAD EAD Enriched text Enriched text FHTML FHTML GML GML GuideML GuideML HDML HDML HyTime HyTime IPF IPF LilyPond LilyPond LinuxDoc LinuxDoc Lout MIF MIF MAML MAML MEI MEI MusicXML MusicXML OMDoc OMDoc OpenMath OpenMath Org-mode Org-mode POD POD ReStructuredText ReStructuredText RTML RTML RFT RFT S1000D S1000D Setext Setext TEI TEI Texinfo Texinfo troff troff Wikitext Wikitext WML WML WapTV WapTV XAML XAML List of document markup languages v v t t e e ISO by standard number ISO standards ISO romanizations IEC standards 1 1 2 2 3 3 4 4 6 6 7 7 9 9 16 16 17 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 31 -0 -0 -1 -1 -3 -3 -4 -4 -5 -5 -6 -6 -7 -7 -8 -8 -9 -9 -10 -10 -11 -11 -12 -12 -13 -13 68-1 68-1 128 128 216 216 217 217 226 226 228 228 233 233 259 259 261 261 262 262 302 302 306 306 361 361 500 500 518 518 519 519 639 -1 -2 -3 -5 -6 639 -1 -1 -2 -2 -3 -3 -5 -5 -6 -6 646 646 657 657 668 668 690 690 704 704 732 732 764 764 838 838 843 843 860 860 898 898 965 965 999 999 1000 1000 1004 1004 1007 1007 1073-1 1073-1 1073-2 1073-2 1155 1155 1413 1413 1538 1538 1629 1629 1745 1745 1989 1989 2014 2014 2015 2015 2022 2022 2033 2033 2047 2047 2108 2108 2145 2145 2146 2146 2240 2240 2281 2281 2533 2533 2709 2709 2711 2711 2720 2720 2788 2788 2848 2848 2852 2852 2921 2921 3029 3029 3103 3103 3166 -1 -2 -3 3166 -1 -1 -2 -2 -3 -3 3297 3297 3307 3307 3601 3601 3602 3602 3864 3864 3901 3901 3950 3950 3977 3977 4031 4031 4157 4157 4165 4165 4217 4217 4909 4909 5218 5218 5426 5426 5427 5427 5428 5428 5725 5725 5775 5775 5776 5776 5800 5800 5807 5807 5964 5964 6166 6166 6344 6344 6346 6346 6373 6373 6385 6385 6425 6425 6429 6429 6438 6438 6523 6523 6709 6709 6943 6943 7001 7001 7002 7002 7010 7010 7027 7027 7064 7064 7098 7098 7185 7185 7200 7200 7498 -1 7498 -1 -1 7637 7637 7736 7736 7810 7810 7811 7811 7812 7812 7813 7813 7816 7816 7942 7942 8000 8000 8093 8093 8178 8178 8217 8217 8373 8373 8501-1 8501-1 8571 8571 8583 8583 8601 8601 8613 8613 8632 8632 8651 8651 8652 8652 8691 8691 8805/8806 8805/8806 8807 8807 8820-5 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8859 -1 -1 -2 -2 -3 -3 -4 -4 -5 -5 -6 -6 -7 -7 -8 -8 -8-I -8-I -9 -9 -10 -10 -11 -11 -12 -12 -13 -13 -14 -14 -15 -15 -16 -16 8879 8879 9000/9001 9000/9001 9036 9036 9075 9075 9126 9126 9141 9141 9227 9227 9241 9241 9293 9293 9314 9314 9362 9362 9407 9407 9496 9496 9506 9506 9529 9529 9564 9564 9592/9593 9592/9593 9594 9594 9660 9660 9797-1 9797-1 9897 9897 9899 9899 9945 9945 9984 9984 9985 9985 9995 9995 10006 10006 10007 10007 10116 10116 10118-3 10118-3 10160 10160 10161 10161 10165 10165 10179 10179 10206 10206 10218 10218 10279 10279 10303 -11 -21 -22 -28 -238 10303 -11 -11 -21 -21 -22 -22 -28 -28 -238 -238 10383 10383 10585 10585 10589 10589 10628 10628 10646 10646 10664 10664 10746 10746 10861 10861 10957 10957 10962 10962 10967 10967 11073 11073 11170 11170 11172 11172 11179 11179 11404 11404 11544 11544 11783 11783 11784 11784 11785 11785 11801 11801 11889 11889 11898 11898 11940 (-2) 11940 -2 11941 11941 11941 (TR) 11941 (TR) 11992 11992 12006 12006 12052 12052 12182 12182 12207 12207 12234-2 12234-2 12620 12620 13211 -1 -2 13211 -1 -1 -2 -2 13216 13216 13250 13250 13399 13399 13406-2 13406-2 13450 13450 13485 13485 13490 13490 13567 13567 13568 13568 13584 13584 13616 13616 13816 13816 13818 13818 14000 14000 14031 14031 14224 14224 14289 14289 14396 14396 14443 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14496 -2 -2 -3 -3 -6 -6 -10 -10 -11 -11 -12 -12 -14 -14 -17 -17 -20 -20 14617 14617 14644 14644 14649 14649 14651 14651 14698 14698 14764 14764 14882 14882 14971 14971 15022 15022 15189 15189 15288 15288 15291 15291 15398 15398 15408 15408 15444 -3 -9 15444 -3 -3 -9 -9 15445 15445 15438 15438 15504 15504 15511 15511 15686 15686 15693 15693 15706 -2 15706 -2 -2 15707 15707 15897 15897 15919 15919 15924 15924 15926 15926 15926 WIP 15926 WIP 15930 15930 15938 15938 16023 16023 16262 16262 16355-1 16355-1 16485 16485 16612-2 16612-2 16750 16750 16949 (TS) 16949 (TS) 17024 17024 17025 17025 17100 17100 17203 17203 17369 17369 17442 17442 17506 17506 17799 17799 18004 18004 18014 18014 18181 18181 18245 18245 18629 18629 18916 18916 19005 19005 19011 19011 19092 -1 -2 19092 -1 -1 -2 -2 19114 19114 19115 19115 19125 19125 19136 19136 19407 19407 19439 19439 19500 19500 19501 19501 19502 19502 19503 19503 19505 19505 19506 19506 19507 19507 19508 19508 19509 19509 19510 19510 19600 19600 19752 19752 19757 19757 19770 19770 19775-1 19775-1 19794-5 19794-5 19831 19831 20000 20000 20022 20022 20121 20121 20400 20400 20802 20802 20830 20830 21000 21000 21001 21001 21047 21047 21122 21122 21500 21500 21827 21827 22000 22000 22275 22275 22300 22300 22301 22301 22395 22395 22537 22537 23000 23000 23003 23003 23008 23008 23009 23009 23090-3 23090-3 23092 23092 23094-1 23094-1 23094-2 23094-2 23270 23270 23271 23271 23360 23360 23941 23941 24517 24517 24613 24613 24617 24617 24707 24707 24728 24728 25178 25178 25964 25964 26000 26000 26262 26262 26300 26300 26324 26324 27000 series 27000 series 27000 27000 27001 27001 27002 27002 27005 27005 27006 27006 27729 27729 28000 28000 29110 29148 29148 29199-2 29199-2 29500 29500 30170 30170 31000 31000 32000 32000 37001 37001 38500 38500 39075 39075 40500 40500 42010 42010 45001 45001 50001 50001 55000 55000 56000 56000 80000 80000 Category Category v v t t e e IEC standards 60027 60027 60034 60034 60038 60038 60062 60062 60063 60063 60068 60068 60112 60112 60228 60228 60269 60269 60297 60297 60309 60309 60320 60320 60364 60364 60446 60446 60559 60559 60601 60601 60870 60870-5 60870-6 60870 60870-5 60870-5 60870-6 60870-6 60906-1 60906-1 60908 60908 60929 60929 60958 60958 60980-344 60980-344 61030 61030 61131 61131-3 61131-9 61131 61131-3 61131-3 61131-9 61131-9 61158 61158 61162 61162 61334 61334 61355 61355 61360 61360 61400 61400 61499 61499 61508 61508 61511 61511 61784 61784 61850 61850 61851 61851 61883 61883 61960 61960 61968 61968 61970 61970 62014-4 62014-4 62026 62026 62056 62056 62061 62061 62196 62196 62262 62262 62264 62264 62304 62304 62325 62325 62351 62351 62365 62365 62366 62366 62379 62379 62386 62386 62455 62455 62680 62680 62682 62682 62700 62700 63110 63110 63119 63119 63382 63382 646 646 1989 1989 2022 2022 4909 4909 5218 5218 6429 6429 6523 6523 7810 7810 7811 7811 7812 7812 7813 7813 7816 7816 7942 7942 8613 8613 8632 8632 8652 8652 8859 8859 9126 9126 9293 9293 9496 9496 9529 9529 9592 9592 9593 9593 9899 9899 9945 9945 9995 9995 10021 10021 10116 10116 10165 10165 10179 10179 10279 10279 10646 10646 10967 10967 11172 11172 11179 11179 11404 11404 11544 11544 11801 11801 12207 12207 13250 13250 13346 13346 13522-5 13522-5 13568 13568 13816 13816 13818 13818 14443 14443 14496 14496 14651 14651 14882 14882 15288 15288 15291 15291 15408 15408 15444 15444 15445 15445 15504 15504 15511 15511 15693 15693 15897 15897 15938 15938 16262 16262 16485 16485 17024 17024 17025 17025 18004 18004 18014 18014 18181 18181 19752 19752 19757 19757 19770 19770 19788 19788 20000 20000 20802 20802 21000 21000 21827 21827 22275 22275 22537 22537 23000 23000 23003 23003 23008 23008 23270 23270 23360 23360 24707 24707 24727 24727 24744 24744 24752 24752 26300 26300 27000 27000 27000-series 27000-series 27002 27002 27040 27040 29110 29119 29119 33001 33001 38500 38500 39075 39075 42010 42010 80000 80000 81346 81346 International Electrotechnical Commission International Electrotechnical Commission Authority control databases Germany Germany Germany United States United States United States United States France France France BnF data BnF data BnF data Czech Republic Czech Republic Czech Republic Czech Republic Spain Spain Spain Israel Israel Israel ELMCIP ELMCIP ELMCIP Portal: Portal Computer programming Computer programming https://en.wikipedia.org/w/index.php?title=HTML&oldid=1264571829 Categories HTML HTML Computer-related introductions in 1990 Computer-related introductions in 1990 Markup languages Markup languages Open formats Open formats Technical communication Technical communication World Wide Web Consortium standards World Wide Web Consortium standards SGML SGML Webarchive template wayback links Webarchive template wayback links Articles with short description Articles with short description Short description is different from Wikidata Short description is different from Wikidata Wikipedia pages semi-protected against vandalism Wikipedia pages semi-protected against vandalism Articles containing potentially dated statements from 1997 Articles containing potentially dated statements from 1997 All articles containing potentially dated statements All articles containing potentially dated statements Articles containing potentially dated statements from 1996 Articles containing potentially dated statements from 1996 All articles lacking reliable references All articles lacking reliable references Articles lacking reliable references from February 2019 Articles lacking reliable references from February 2019 All articles with vague or ambiguous time All articles with vague or ambiguous time Vague or ambiguous time from March 2022 Vague or ambiguous time from March 2022 Articles to be expanded from January 2021 Articles to be expanded from January 2021 All articles with specifically marked weasel-worded phrases All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from June 2020 Articles with specifically marked weasel-worded phrases from June 2020 Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with hidden wikidata Pages using Sister project links with hidden wikidata Articles with example code Articles with example code This page was last edited on 22 December 2024, at 12:57 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/C%2B%2B": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History Toggle History subsection 1.1 Etymology 1.2 Philosophy 1.3 Standardization 1 History 1 History Toggle History subsection 1.1 Etymology 1.1 Etymology 1.1 Etymology 1.2 Philosophy 1.2 Philosophy 1.2 Philosophy 1.3 Standardization 1.3 Standardization 1.3 Standardization 2 Language Toggle Language subsection 2.1 Object storage 2.1.1 Static storage duration objects 2.1.2 Thread storage duration objects 2.1.3 Automatic storage duration objects 2.1.4 Dynamic storage duration objects 2.2 Templates 2.3 Objects 2.3.1 Encapsulation 2.3.2 Inheritance 2.4 Operators and operator overloading 2.5 Polymorphism 2.5.1 Static polymorphism 2.5.2 Dynamic polymorphism 2.5.2.1 Inheritance 2.5.2.2 Virtual member functions 2.6 Lambda expressions 2.7 Exception handling 2.8 Enumerated types 2 Language 2 Language Toggle Language subsection 2.1 Object storage 2.1.1 Static storage duration objects 2.1.2 Thread storage duration objects 2.1.3 Automatic storage duration objects 2.1.4 Dynamic storage duration objects 2.1 Object storage 2.1 Object storage 2.1.1 Static storage duration objects 2.1.1 Static storage duration objects 2.1.1 Static storage duration objects 2.1.2 Thread storage duration objects 2.1.2 Thread storage duration objects 2.1.2 Thread storage duration objects 2.1.3 Automatic storage duration objects 2.1.3 Automatic storage duration objects 2.1.3 Automatic storage duration objects 2.1.4 Dynamic storage duration objects 2.1.4 Dynamic storage duration objects 2.1.4 Dynamic storage duration objects 2.2 Templates 2.2 Templates 2.2 Templates 2.3 Objects 2.3.1 Encapsulation 2.3.2 Inheritance 2.3 Objects 2.3 Objects 2.3.1 Encapsulation 2.3.1 Encapsulation 2.3.1 Encapsulation 2.3.2 Inheritance 2.3.2 Inheritance 2.3.2 Inheritance 2.4 Operators and operator overloading 2.4 Operators and operator overloading 2.4 Operators and operator overloading 2.5 Polymorphism 2.5.1 Static polymorphism 2.5.2 Dynamic polymorphism 2.5.2.1 Inheritance 2.5.2.2 Virtual member functions 2.5 Polymorphism 2.5 Polymorphism 2.5.1 Static polymorphism 2.5.1 Static polymorphism 2.5.1 Static polymorphism 2.5.2 Dynamic polymorphism 2.5.2.1 Inheritance 2.5.2.2 Virtual member functions 2.5.2 Dynamic polymorphism 2.5.2 Dynamic polymorphism 2.5.2.1 Inheritance 2.5.2.1 Inheritance 2.5.2.1 Inheritance 2.5.2.2 Virtual member functions 2.5.2.2 Virtual member functions 2.5.2.2 Virtual member functions 2.6 Lambda expressions 2.6 Lambda expressions 2.6 Lambda expressions 2.7 Exception handling 2.7 Exception handling 2.7 Exception handling 2.8 Enumerated types 2.8 Enumerated types 2.8 Enumerated types 3 Standard library 3 Standard library 3 Standard library 4 C++ Core Guidelines 4 C++ Core Guidelines 4 C++ Core Guidelines 5 Compatibility Toggle Compatibility subsection 5.1 With C 5 Compatibility 5 Compatibility Toggle Compatibility subsection 5.1 With C 5.1 With C 5.1 With C 6 See also 6 See also 6 See also 7 Footnotes 7 Footnotes 7 Footnotes 8 References 8 References 8 References 9 Further reading 9 Further reading 9 Further reading 10 External links 10 External links 10 External links Toggle the table of contents C++ C++ 109 languages Afrikaans Afrikaans Afrikaans \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s Aragon\u00e9s Aragon\u00e9s \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be Asturianu Asturianu Asturianu Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u062a\u06c6\u0631\u06a9\u062c\u0647 \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0f56\u0f7c\u0f51\u0f0b\u0f61\u0f72\u0f42 \u0f56\u0f7c\u0f51\u0f0b\u0f61\u0f72\u0f42 \u0f56\u0f7c\u0f51\u0f0b\u0f61\u0f72\u0f42 Bosanski Bosanski Bosanski Brezhoneg Brezhoneg Brezhoneg Catal\u00e0 Catal\u00e0 Catal\u00e0 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u0427\u04d1\u0432\u0430\u0448\u043b\u0430 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Dansk Dansk Dansk Deutsch Deutsch Deutsch Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais Gaeilge Gaeilge Gaeilge Galego Galego Galego \u8d1b\u8a9e \u8d1b\u8a9e \u8d1b\u8a9e \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 Hausa Hausa Hausa \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Hrvatski Hrvatski Ido Ido Ido Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia Interlingua Interlingua Interlingua \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea Jawa Jawa Jawa \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 \u049a\u0430\u0437\u0430\u049b\u0448\u0430 Kiswahili Kiswahili Kiswahili \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 Latina Latina Latina Latvie\u0161u Latvie\u0161u Latvie\u0161u L\u00ebtzebuergesch L\u00ebtzebuergesch L\u00ebtzebuergesch Lietuvi\u0173 Lietuvi\u0173 Lietuvi\u0173 Lombard Lombard Lombard Magyar Magyar Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u092e\u0930\u093e\u0920\u0940 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 \u0645\u0635\u0631\u0649 Bahasa Melayu Bahasa Melayu Bahasa Melayu Minangkabau Minangkabau Minangkabau \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u041c\u043e\u043d\u0433\u043e\u043b \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Na Vosa Vakaviti Na Vosa Vakaviti Na Vosa Vakaviti Nederlands Nederlands Nederlands \u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e \u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e \u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk nynorsk Norsk nynorsk Norsk nynorsk Occitan Occitan Occitan O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 P\u00e4lzisch P\u00e4lzisch P\u00e4lzisch \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc \u067e\u0646\u062c\u0627\u0628\u06cc Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 Runa Simi Runa Simi Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430 Shqip Shqip Shqip \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd Simple English Simple English Simple English Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Suomi Suomi Svenska Svenska Svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0e44\u0e17\u0e22 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrkmen\u00e7e T\u00fcrkmen\u00e7e T\u00fcrkmen\u00e7e Basa Ugi Basa Ugi Basa Ugi \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t \u6587\u8a00 \u6587\u8a00 \u6587\u8a00 Winaray Winaray Winaray \u5434\u8bed \u5434\u8bed \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 Yor\u00f9b\u00e1 Yor\u00f9b\u00e1 Yor\u00f9b\u00e1 \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u017demait\u0117\u0161ka \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read Edit Edit Edit View history View history View history Tools Read Read Read Edit Edit Edit View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons Wikibooks Wikibooks Wikibooks Wikiquote Wikiquote Wikiquote Wikiversity Wikiversity Wikiversity Wikidata item Wikidata item Wikidata item CXX Paradigms Multi-paradigm procedural imperative functional object-oriented generic modular C Designed by Bjarne Stroustrup Developer ISO/IEC JTC 1 (Joint Technical Committee 1) / SC 22 (Subcommittee 22) ; 40 years ago (1985) 1985 Stable release C++23 ; 2 months ago (2024-10-19) 2024-10-19 Preview release C++26 ; 2 months ago (2024-10-16) 2024-10-16 Typing discipline Static strong nominative partially inferred OS Cross-platform Filename extensions .c++ .h++ [1] [ ] isocpp.org isocpp.org implementations GCC, LLVM Clang, Microsoft Visual C++, Embarcadero C++Builder, Intel C++ Compiler, IBM XL C++, EDG GCC LLVM Clang Microsoft Visual C++ Embarcadero C++Builder Intel C++ Compiler IBM XL C++ EDG Ada ALGOL 68 [2] [ ] BCPL [3] [ ] C CLU [2] [ ] F# [4] [ ] [note 1] [ ] ML Mesa [2] [ ] Modula-2 [2] [ ] Simula Smalltalk [2] [ ] Ada 95 C# [5] [ ] C99 Carbon Chapel [6] [ ] Clojure [7] [ ] D Java [8] [ ] JS++ [9] [ ] Lua [10] [ ] Nim [11] [ ] Objective-C++ Perl PHP Python [12] [ ] Rust [13] [ ] Seed7 C++ Programming at Wikibooks C++ Programming C++ (/\u02c8si\u02d0 pl\u028cs pl\u028cs/, pronounced \"C plus plus\" and sometimes abbreviated as CPP) is a high-level, general-purpose programming language created by Danish computer scientist Bjarne Stroustrup. First released in 1985 as an extension of the C programming language, it has since expanded significantly over time; as of 1997[update], C++ has object-oriented, generic, and functional features, in addition to facilities for low-level memory manipulation for systems like microcomputers or to make operating systems like Linux or Windows. It is usually implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.[14] /\u02c8si\u02d0 pl\u028cs pl\u028cs/ /\u02c8si\u02d0 pl\u028cs pl\u028cs/ /\u02c8si\u02d0 pl\u028cs pl\u028cs/ \u02c8si\u02d0 \u02c8 s i\u02d0 pl\u028cs p l \u028c s pl\u028cs p l \u028c s high-level general-purpose programming language Bjarne Stroustrup C programming language [update] object-oriented generic functional low-level memory microcomputers Linux Windows compiled language C++ compilers Free Software Foundation LLVM Microsoft Intel Embarcadero Oracle IBM [14] [ ] C++ was designed with systems programming and embedded, resource-constrained software and large systems in mind, with performance, efficiency, and flexibility of use as its design highlights.[15] C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,[15] including desktop applications, video games, servers (e.g., e-commerce, web search, or databases), and performance-critical applications (e.g., telephone switches or space probes).[16] systems programming embedded performance [15] [ ] [15] [ ] desktop applications video games servers e-commerce web search databases telephone switches space probes [16] [ ] C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in October 2024 as ISO/IEC 14882:2024 (informally known as C++23).[17] The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11, C++14, C++17, and C++20 standards. The current C++23 standard supersedes these with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization.[18] Since 2012, C++ has been on a three-year release schedule[19] with C++26 as the next planned standard.[20] International Organization for Standardization C++23 [17] [ ] C++03 C++11 C++14 C++17 C++20 C++23 C++23 standard library Bell Labs high-level features [18] [ ] [19] [ ] C++26 [20] [ ] Despite its widespread adoption, some notable programmers have criticized the C++ language, including Linus Torvalds,[21] Richard Stallman,[22] Joshua Bloch, Ken Thompson,[23][24][25] and Donald Knuth.[26][27] criticized the C++ language Linus Torvalds [21] [ ] Richard Stallman [22] [ ] Joshua Bloch Ken Thompson [23] [ ] [24] [ ] [25] [ ] Donald Knuth [26] [ ] [27] [ ] History [edit] [ edit edit ] 2000 In 1979, Bjarne Stroustrup, a Danish computer scientist, began work on \"C with Classes\", the predecessor to C++.[28] The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large software development. When Stroustrup started working in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his PhD experience, Stroustrup set out to enhance the C language with Simula-like features.[29] C was chosen because it was general-purpose, fast, portable, and widely used. In addition to C and Simula's influences, other languages influenced this new language, including ALGOL 68, Ada, CLU, and ML.[citation needed] Bjarne Stroustrup computer scientist C with Classes C with Classes Classes [28] [ ] Simula BCPL AT&T Bell Labs UNIX kernel distributed computing C Simula [29] [ ] ALGOL 68 Ada CLU ML citation needed citation needed Initially, Stroustrup's \"C with Classes\" added features to the C compiler, Cpre, including classes, derived classes, strong typing, inlining, and default arguments.[30] classes derived classes strong typing inlining default arguments [30] [ ] In 1982, Stroustrup started to develop a successor to C with Classes, which he named \"C++\" (++ being the increment operator in C) after going through several other names. New features were added, including virtual functions, function name and operator overloading, references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL-style single-line comments with two forward slashes (//). Furthermore, Stroustrup developed a new, standalone compiler for C++, Cfront. ++ increment operator virtual functions operator overloading references // Cfront In 1984, Stroustrup implemented the first stream input/output library. The idea of providing an output operator rather than a named output function was suggested by Doug McIlroy[2] (who had previously suggested Unix pipes). Doug McIlroy [2] [ ] Unix pipes In 1985, the first edition of The C++ Programming Language was released, which became the definitive reference for the language, as there was not yet an official standard.[31] The first commercial implementation of C++ was released in October of the same year.[28] The C++ Programming Language [31] [ ] [28] [ ] In 1989, C++ 2.0 was released, followed by the updated second edition of The C++ Programming Language in 1991.[32] New features in 2.0 included multiple inheritance, abstract classes, static member functions, const member functions, and protected members. In 1990, The Annotated C++ Reference Manual was published. This work became the basis for the future standard. Later feature additions included templates, exceptions, namespaces, new casts, and a Boolean type. [32] [ ] const member functions templates exceptions namespaces casts Boolean type In 1998, C++98 was released, standardizing the language, and a minor update (C++03) was released in 2003. C++03 After C++98, C++ evolved relatively slowly until, in 2011, the C++11 standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor C++14 update released in December 2014, various new additions were introduced in C++17.[33] After becoming finalized in February 2020,[34] a draft of the C++20 standard was approved on 4 September 2020, and officially published on 15 December 2020.[35][36] C++11 C++14 C++14 C++17 [33] [ ] [34] [ ] [35] [ ] [36] [ ] On January 3, 2018, Stroustrup was announced as the 2018 winner of the Charles Stark Draper Prize for Engineering, \"for conceptualizing and developing the C++ programming language\".[37] Charles Stark Draper Prize [37] [ ] In December 2022, C++ ranked third on the TIOBE index, surpassing Java for the first time in the history of the index. As of November 2024[update], the language ranks second after Python, with Java being in third.[38] TIOBE index Java [update] Python [38] [ ] Etymology [edit] [ edit edit ] According to Stroustrup, \"the name signifies the evolutionary nature of the changes from C.\"[39] This name is credited to Rick Mascitti (mid-1983)[30] and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a tongue-in-cheek spirit. The name comes from C's ++ operator (which increments the value of a variable) and a common naming convention of using \"+\" to indicate an enhanced computer program. [39] [ ] [30] [ ] tongue-in-cheek ++ operator increments value variable naming convention During C++'s development period, the language had been referred to as \"new C\" and \"C with Classes\"[30][40] before acquiring its final name. [30] [ ] [40] [ ] Philosophy [edit] [ edit edit ] Throughout C++'s life, its development and evolution has been guided by a set of principles:[29] [29] [ ] It must be driven by actual problems and its features should be immediately useful in real world programs. Every feature should be implementable (with a reasonably obvious way to do so). Programmers should be free to pick their own programming style, and that style should be fully supported by C++. Allowing a useful feature is more important than preventing every possible misuse of C++. It should provide facilities for organising programs into separate, well-defined parts, and provide facilities for combining separately developed parts. No implicit violations of the type system (but allow explicit violations; that is, those explicitly requested by the programmer). type system User-created types need to have the same support and performance as built-in types. Unused features should not negatively impact created executables (e.g. in lower performance). There should be no language beneath C++ (except assembly language). assembly language C++ should work alongside other existing programming languages, rather than fostering its own separate and incompatible programming environment. programming languages programming environment If the programmer's intent is unknown, allow the programmer to specify it by providing manual control. Standardization [edit] [ edit edit ] C++03 C++11 C++14 C++17 C++20 C++23 C++26 [41] [ ] [42] [ ] C++03 [43] [ ] C++11 [44] [ ] C++14 [45] [ ] C++17 [46] [ ] C++20 [17] [ ] C++23 C++26 C++ is standardized by an ISO working group known as JTC1/SC22/WG21. So far, it has published seven revisions of the C++ standard and is currently working on the next revision, C++26. ISO JTC1/SC22/WG21 C++26 In 1998, the ISO working group standardized C++ for the first time as ISO/IEC 14882:1998, which is informally known as C++98. In 2003, it published a new version of the C++ standard called ISO/IEC 14882:2003, which fixed problems identified in C++98. The next major revision of the standard was informally referred to as \"C++0x\", but it was not released until 2011.[47] C++11 (14882:2011) included many additions to both the core language and the standard library.[43] [47] [ ] C++11 [43] [ ] In 2014, C++14 (also known as C++1y) was released as a small extension to C++11, featuring mainly bug fixes and small improvements.[48] The Draft International Standard ballot procedures completed in mid-August 2014.[49] C++14 [48] [ ] [49] [ ] After C++14, a major revision C++17, informally known as C++1z, was completed by the ISO C++ committee in mid July 2017 and was approved and published in December 2017.[50] C++17 [50] [ ] As part of the standardization process, ISO also publishes technical reports and specifications: technical reports and specifications ISO/IEC TR 18015:2006[51] on the use of C++ in embedded systems and on performance implications of C++ language and library features, [51] [ ] ISO/IEC TR 19768:2007[52] (also known as the C++ Technical Report 1) on library extensions mostly integrated into C++11, [52] [ ] C++ Technical Report 1 C++11 ISO/IEC TR 29124:2010[53] on special mathematical functions, integrated into C++17, [53] [ ] C++17 C++17 ISO/IEC TR 24733:2011[54] on decimal floating-point arithmetic, [54] [ ] decimal floating-point ISO/IEC TS 18822:2015[55] on the standard filesystem library, integrated into C++17, [55] [ ] C++17 ISO/IEC TS 19570:2015[56] on parallel versions of the standard library algorithms, integrated into C++17, [56] [ ] parallel C++17 ISO/IEC TS 19841:2015[57] on software transactional memory, [57] [ ] transactional memory ISO/IEC TS 19568:2015[58] on a new set of library extensions, some of which are already integrated into C++17, [58] [ ] C++17 ISO/IEC TS 19217:2015[59] on the C++ concepts, integrated into C++20, [59] [ ] concepts C++20 ISO/IEC TS 19571:2016[60] on the library extensions for concurrency, some of which are already integrated into C++20, [60] [ ] C++20 ISO/IEC TS 19568:2017[61] on a new set of general-purpose library extensions, [61] [ ] ISO/IEC TS 21425:2017[62] on the library extensions for ranges, integrated into C++20, [62] [ ] C++20 ISO/IEC TS 22277:2017[63] on coroutines, integrated into C++20, [63] [ ] C++20 ISO/IEC TS 19216:2018[64] on the networking library, [64] [ ] ISO/IEC TS 21544:2018[65] on modules, integrated into C++20, [65] [ ] C++20 ISO/IEC TS 19570:2018[66] on a new set of library extensions for parallelism, and [66] [ ] ISO/IEC TS 23619:2021[67] on new extensions for reflective programming (reflection). [67] [ ] reflective programming More technical specifications are in development and pending approval, including new set of concurrency extensions. Language [edit] [ edit edit ] The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as \"a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions\";[15] and \"offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from other languages.\"[68] [15] [ ] [68] [ ] C++ inherits most of C's syntax. A hello world program that conforms to the C standard is also a valid C++ hello world program. The following is Bjarne Stroustrup's version of the Hello world program that uses the C++ Standard Library stream facility to write a message to standard output:[69][70][note 2] C's syntax hello world program that conforms to the C standard Hello world program C++ Standard Library standard output [69] [ ] [70] [ ] [note 2] [ ] #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; } Object storage [edit] [ edit edit ] As in C, C++ supports four types of memory management: static storage duration objects, thread storage duration objects, automatic storage duration objects, and dynamic storage duration objects.[71] memory management [71] [ ] Static storage duration objects [edit] [ edit edit ] Static storage duration objects are created before main() is entered (see exceptions below) and destroyed in reverse order of creation after main() exits. The exact order of creation is not specified by the standard (though there are some rules defined below) to allow implementations some freedom in how to organize their implementation. More formally, objects of this type have a lifespan that \"shall last for the duration of the program\".[72] [72] [ ] Static storage duration objects are initialized in two phases. First, \"static initialization\" is performed, and only after all static initialization is performed, \"dynamic initialization\" is performed. In static initialization, all objects are first initialized with zeros; after that, all objects that have a constant initialization phase are initialized with the constant expression (i.e. variables initialized with a literal or constexpr). Though it is not specified in the standard, the static initialization phase can be completed at compile time and saved in the data partition of the executable. Dynamic initialization involves all object initialization done via a constructor or function call (unless the function is marked with constexpr, in C++11). The dynamic initialization order is defined as the order of declaration within the compilation unit (i.e. the same file). No guarantees are provided about the order of initialization between compilation units. Thread storage duration objects [edit] [ edit edit ] Variables of this type are very similar to static storage duration objects. The main difference is the creation time is just before thread creation, and destruction is done after the thread has been joined.[73] [73] [ ] Automatic storage duration objects [edit] [ edit edit ] The most common variable types in C++ are local variables inside a function or block, and temporary variables.[74] The common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable. They are created and potentially initialized at the point of declaration (see below for details) and destroyed in the reverse order of creation when the scope is left. This is implemented by allocation on the stack. local variables function [74] [ ] stack Local variables are created as the point of execution passes the declaration point. If the variable has a constructor or initializer this is used to define the initial state of the object. Local variables are destroyed when the local block or function that they are declared in is closed. C++ destructors for local variables are called at the end of the object lifetime, allowing a discipline for automatic resource management termed RAII, which is widely used in C++. RAII Member variables are created when the parent object is created. Array members are initialized from 0 to the last member of the array in order. Member variables are destroyed when the parent object is destroyed in the reverse order of creation. i.e. If the parent is an \"automatic object\" then it will be destroyed when it goes out of scope which triggers the destruction of all its members. Temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated (usually at the ; at the end of a statement). Dynamic storage duration objects [edit] [ edit edit ] new and delete (C++) These objects have a dynamic lifespan and can be created directly with a call to new and destroyed explicitly with a call to delete.[75] C++ also supports malloc and free, from C, but these are not compatible with new and delete. Use of new returns an address to the allocated memory. The C++ Core Guidelines advise against using new directly for creating dynamic objects in favor of smart pointers through make_unique<T> for single ownership and make_shared<T> for reference-counted multiple ownership,[76] which were introduced in C++11. new delete [75] [ ] new delete new new make_unique < T > make_shared < T > [76] [ ] Templates [edit] [ edit edit ] Template metaprogramming Generic programming C++ templates enable generic programming. C++ supports function, class, alias, and variable templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by instantiation at compile-time. To instantiate a template, compilers substitute specific arguments for a template's parameters to generate a concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase \"Substitution failure is not an error\" (SFINAE). Templates are a powerful tool that can be used for generic programming, template metaprogramming, and code optimization, but this power implies a cost. Template use may increase object code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code were written by hand.[77] This is in contrast to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single template body is preserved. C++ templates generic programming C++ Substitution failure is not an error generic programming template metaprogramming object code [77] [ ] Java Templates are different from macros: while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates are aware of the semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot instantiate new types, recurse, or perform type evaluation and in effect are limited to pre-compilation text-substitution and text-inclusion/exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently instantiate new symbols. Templates are a tool for static polymorphism (see below) and generic programming. macros polymorphism generic programming In addition, templates are a compile-time mechanism in C++ that is Turing-complete, meaning that any computation expressible by a computer program can be computed, in some form, by a template metaprogram before runtime. Turing-complete template metaprogram In summary, a template is a compile-time parameterized function or class written without knowledge of the specific arguments used to instantiate it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction. Objects [edit] [ edit edit ] C++ classes C++ introduces object-oriented programming (OOP) features to C. It offers classes, which provide the four features commonly present in OOP (and some non-OOP) languages: abstraction, encapsulation, inheritance, and polymorphism. One distinguishing feature of C++ classes compared to classes in other programming languages is support for deterministic destructors, which in turn provide support for the Resource Acquisition is Initialization (RAII) concept. object-oriented programming classes abstraction encapsulation inheritance polymorphism C++ destructors Resource Acquisition is Initialization Encapsulation [edit] [ edit edit ] Encapsulation is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer. C++ provides the ability to define classes and functions as its primary encapsulation mechanisms. Within a class, members can be declared as either public, protected, or private to explicitly enforce encapsulation. A public member of the class is accessible to any function. A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class (\"friends\"). A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends. Encapsulation The object-oriented principle ensures the encapsulation of all and only the functions that access the internal representation of a type. C++ supports this principle via member functions and friend functions, but it does not enforce it. Programmers can declare parts or all of the representation of a type to be public, and they are allowed to make public entities not part of the representation of a type. Therefore, C++ supports not just object-oriented programming, but other decomposition paradigms such as modular programming. modular programming It is generally considered good practice to make all data private or protected, and to make public only those functions that are part of a minimal interface for users of the class. This can hide the details of data implementation, allowing the designer to later fundamentally change the implementation without changing the interface in any way.[78][79] data [78] [ ] [79] [ ] Inheritance [edit] [ edit edit ] Inheritance allows one data type to acquire properties of other data types. Inheritance from a base class may be declared as public, protected, or private. This access specifier determines whether unrelated and derived classes can access the inherited public and protected members of the base class. Only public inheritance corresponds to what is usually meant by \"inheritance\". The other two forms are much less frequently used. If the access specifier is omitted, a \"class\" inherits privately, while a \"struct\" inherits publicly. Base classes may be declared as virtual; this is called virtual inheritance. Virtual inheritance ensures that only one instance of a base class exists in the inheritance graph, avoiding some of the ambiguity problems of multiple inheritance. Inheritance base class virtual inheritance Multiple inheritance is a C++ feature allowing a class to be derived from more than one base class; this allows for more elaborate inheritance relationships. For example, a \"Flying Cat\" class can inherit from both \"Cat\" and \"Flying Mammal\". Some other languages, such as C# or Java, accomplish something similar (although more limited) by allowing inheritance of multiple interfaces while restricting the number of base classes to one (interfaces, unlike classes, provide only declarations of member functions, no implementation or member data). An interface as in C# and Java can be defined in C++ as a class containing only pure virtual functions, often known as an abstract base class or \"ABC\". The member functions of such an abstract base class are normally explicitly defined in the derived class, not inherited implicitly. C++ virtual inheritance exhibits an ambiguity resolution feature called dominance. Multiple inheritance C# Java interfaces C++ abstract base class dominance Operators and operator overloading [edit] [ edit edit ] :: ?: . . * sizeof sizeof typeid typeid Operators in C and C++ C++ provides more than 35 operators, covering basic arithmetic, bit manipulation, indirection, comparisons, logical operations and others. Almost all operators can be overloaded for user-defined types, with a few notable exceptions such as member access (. and .*) and the conditional operator. The rich set of overloadable operators is central to making user-defined types in C++ seem like built-in types. overloaded Overloadable operators are also an essential part of many advanced C++ programming techniques, such as smart pointers. Overloading an operator does not change the precedence of calculations involving the operator, nor does it change the number of operands that the operator uses (any operand may however be ignored by the operator, though it will be evaluated prior to execution). Overloaded \"&&\" and \"||\" operators lose their short-circuit evaluation property. smart pointers short-circuit evaluation Polymorphism [edit] [ edit edit ] Polymorphism (computer science) Polymorphism enables one common interface for many implementations, and for objects to act differently under different circumstances. Polymorphism C++ supports several kinds of static (resolved at compile-time) and dynamic (resolved at run-time) polymorphisms, supported by the language features described above. Compile-time polymorphism does not allow for certain run-time decisions, while runtime polymorphism typically incurs a performance penalty. compile-time run-time polymorphisms Compile-time polymorphism runtime polymorphism Static polymorphism [edit] [ edit edit ] Parametric polymorphism ad hoc polymorphism Function overloading allows programs to declare multiple functions having the same name but with different arguments (i.e. ad hoc polymorphism). The functions are distinguished by the number or types of their formal parameters. Thus, the same function name can refer to different functions depending on the context in which it is used. The type returned by the function is not used to distinguish overloaded functions and differing return types would result in a compile-time error message. Function overloading ad hoc polymorphism formal parameters When declaring a function, a programmer can specify for one or more parameters a default value. Doing so allows the parameters with defaults to optionally be omitted when the function is called, in which case the default arguments will be used. When a function is called with fewer arguments than there are declared parameters, explicit arguments are matched to parameters in left-to-right order, with any unmatched parameters at the end of the parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters. default value Templates in C++ provide a sophisticated mechanism for writing generic, polymorphic code (i.e. parametric polymorphism). In particular, through the curiously recurring template pattern, it is possible to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions. Because C++ templates are type-aware and Turing-complete, they can also be used to let the compiler resolve recursive conditionals and generate substantial programs through template metaprogramming. Contrary to some opinion, template code will not generate a bulk code after compilation with the proper compiler settings.[77] Templates in C++ parametric polymorphism curiously recurring template pattern Turing-complete template metaprogramming [77] [ ] Dynamic polymorphism [edit] [ edit edit ] Inheritance [edit] [ edit edit ] Subtyping Variable pointers and references to a base class type in C++ can also refer to objects of any derived classes of that type. This allows arrays and other kinds of containers to hold pointers to objects of differing types (references cannot be directly held in containers). This enables dynamic (run-time) polymorphism, where the referred objects can behave differently, depending on their (actual, derived) types. C++ also provides the dynamic_cast operator, which allows code to safely attempt conversion of an object, via a base reference/pointer, to a more derived type: downcasting. The attempt is necessary as often one does not know which derived type is referenced. (Upcasting, conversion to a more general type, can always be checked/performed at compile-time via static_cast, as ancestral classes are specified in the derived class's interface, visible to all callers.) dynamic_cast relies on run-time type information (RTTI), metadata in the program that enables differentiating types and their relationships. If a dynamic_cast to a pointer fails, the result is the nullptr constant, whereas if the destination is a reference (which cannot be null), the cast throws an exception. Objects known to be of a certain derived type can be cast to that with static_cast, bypassing RTTI and the safe runtime type-checking of dynamic_cast, so this should be used only if the programmer is very confident the cast is, and will always be, valid. dynamic_cast static_cast dynamic_cast run-time type information dynamic_cast nullptr static_cast dynamic_cast Virtual member functions [edit] [ edit edit ] Ordinarily, when a function in a derived class overrides a function in a base class, the function to call is determined by the type of the object. A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a base class pointer; the decision is therefore put off until runtime. This is called dynamic dispatch. Virtual member functions or methods[80] allow the most specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using virtual function tables. If the object type is known, this may be bypassed by prepending a fully qualified class name before the function call, but in general calls to virtual functions are resolved at run time. overrides dynamic dispatch Virtual member functions [80] [ ] virtual function tables fully qualified class name In addition to standard member functions, operator overloads and destructors can be virtual. An inexact rule based on practical experience states that if any function in the class is virtual, the destructor should be as well. As the type of an object at its creation is known at compile time, constructors, and by extension copy constructors, cannot be virtual. Nonetheless, a situation may arise where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object. In such a case, a common solution is to create a clone() (or similar) virtual function that creates and returns a copy of the derived class when called. clone () A member function can also be made \"pure virtual\" by appending it with = 0 after the closing parenthesis and before the semicolon. A class containing a pure virtual function is called an abstract class. Objects cannot be created from an abstract class; they can only be derived from. Any derived class inherits the virtual function as pure and must provide a non-pure definition of it (and all other pure virtual functions) before objects of the derived class can be created. A program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is ill-formed. = 0 Lambda expressions [edit] [ edit edit ] C++ provides support for anonymous functions, also known as lambda expressions, with the following form: anonymous functions lambda expressions [ capture ]( parameters ) -> return_type { function_body } Since C++20, the keyword template is optional for template parameters of lambda expressions: template [ capture ] < template_parameters > ( parameters ) -> return_type { function_body } If the lambda takes no parameters, and no return type or other specifiers are used, the () can be omitted; that is, [ capture ] { function_body } The return type of a lambda expression can be automatically inferred, if possible; e.g.: []( int x , int y ) { return x + y ; } // inferred []( int x , int y ) -> int { return x + y ; } // explicit The [capture] list supports the definition of closures. Such lambda expressions are defined in the standard as syntactic sugar for an unnamed function object. [ capture ] closures syntactic sugar function object Exception handling [edit] [ edit edit ] Exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled.[81] It permits this to be done in a uniform manner and separately from the main code, while detecting all errors.[82] Should an error occur, an exception is thrown (raised), which is then caught by the nearest suitable exception handler. The exception causes the current scope to be exited, and also each outer scope (propagation) until a suitable handler is found, calling in turn the destructors of any objects in these exited scopes.[83] At the same time, an exception is presented as an object carrying the data about the detected problem.[84] [81] [ ] [82] [ ] [83] [ ] [84] [ ] Some C++ style guides, such as Google's,[85] LLVM's,[86] and Qt's,[87] forbid the usage of exceptions. [85] [ ] [86] [ ] [87] [ ] The exception-causing code is placed inside a try block. The exceptions are handled in separate catch blocks (the handlers); each try block can have multiple exception handlers, as it is visible in the example below.[88] try catch try [88] [ ] #include <iostream> #include <vector> #include <stdexcept> int main () { try { std :: vector < int > vec { 3 , 4 , 3 , 1 }; int i { vec . at ( 4 )}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4) } // An exception handler, catches std::out_of_range, which is thrown by vec.at(4) catch ( const std :: out_of_range & e ) { std :: cerr << \"Accessing a non-existent element: \" << e . what () << '\\n' ; } // To catch any other standard library exceptions (they derive from std::exception) catch ( const std :: exception & e ) { std :: cerr << \"Exception thrown: \" << e . what () << '\\n' ; } // Catch any unrecognised exceptions (i.e. those which don't derive from std::exception) catch (...) { std :: cerr << \"Some fatal error \\n \" ; } } It is also possible to raise exceptions purposefully, using the throw keyword; these exceptions are handled in the usual way. In some cases, exceptions cannot be used due to technical reasons. One such example is a critical component of an embedded system, where every operation must be guaranteed to complete within a specified amount of time. This cannot be determined with exceptions as no tools exist to determine the maximum time required for an exception to be handled.[89] throw [89] [ ] Unlike signal handling, in which the handling function is called from the point of failure, exception handling exits the current scope before the catch block is entered, which may be located in the current function or any of the previous function calls currently on the stack. signal handling Enumerated types [edit] [ edit edit ] Enumerated type \u00a7 C++ [edit] [ edit ] C++ has enumeration types that are directly inherited from C's and work mostly like these, except that an enumeration is a real type in C++, giving added compile-time checking. Also (as with structs), the C++ enum keyword is combined with a typedef, so that instead of naming the type enum name, simply name it name. This can be simulated in C using a typedef: typedef enum {Value1, Value2} name; typedef typedef typedef enum { Value1 , Value2 } name ; C++11 also provides a second kind of enumeration, called a scoped enumeration. These are type-safe: the enumerators are not implicitly converted to an integer type. Among other things, this allows I/O streaming to be defined for the enumeration type. Another feature of scoped enumerations is that the enumerators do not leak, so usage requires prefixing with the name of the enumeration (e.g., Color::Red for the first enumerator in the example below), unless a using enum declaration (introduced in C++20) has been used to bring the enumerators into the current scope. A scoped enumeration is specified by the phrase enum class (or enum struct). For example: C++11 C++20 enum class Color { Red , Green , Blue }; The underlying type of an enumeration is an implementation-defined integral type that is large enough to hold all enumerated values; it does not have to be the smallest possible type. The underlying type can be specified directly, which allows \"forward declarations\" of enumerations: enum class Color : long { Red , Green , Blue }; // must fit in size and memory layout the type 'long' enum class Shapes : char ; // forward declaration. If later there are values defined that don't fit in 'char' it is an error. Standard library [edit] [ edit edit ] C++ Standard Library The C++ standard consists of two parts: the core language and the standard library. C++ programmers expect the latter on every major implementation of C++; it includes aggregate types (vectors, lists, maps, sets, queues, stacks, arrays, tuples), algorithms (find, for_each, binary_search, random_shuffle, etc.), input/output facilities (iostream, for reading from and writing to the console and files), filesystem library, localisation support, smart pointers for automatic memory management, regular expression support, multi-threading library, atomics support (allowing a variable to be read or written to by at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that does not use C++ exceptions into C++ exceptions, a random number generator, and a slightly modified version of the C standard library (to make it comply with the C++ type system). standard vectors algorithms for_each binary_search iostream smart pointers regular expression multi-threading exceptions random number generator C standard library A large part of the C++ library is based on the Standard Template Library (STL). Useful tools provided by the STL include containers as the collections of objects (such as vectors and lists), iterators that provide array-like access to containers, and algorithms that perform operations such as searching and sorting. Standard Template Library containers vectors lists iterators algorithms Furthermore, (multi)maps (associative arrays) and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators. As in C, the features of the library are accessed by using the #include directive to include a standard header. The C++ Standard Library provides 105 standard headers, of which 27 are deprecated. associative arrays features library #include directive standard header C++ Standard Library The standard incorporates the STL that was originally designed by Alexander Stepanov, who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function pointers. The standard does not refer to it as \"STL\", as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.).[90] Alexander Stepanov [90] [ ] Most C++ compilers, and all major ones, provide a standards-conforming implementation of the C++ standard library. C++ Core Guidelines [edit] [ edit edit ] The C++ Core Guidelines[91] are an initiative led by Bjarne Stroustrup, the inventor of C++, and Herb Sutter, the convener and chair of the C++ ISO Working Group, to help programmers write 'Modern C++' by using best practices for the language standards C++11 and newer, and to help developers of compilers and static checking tools to create rules for catching bad programming practices. [91] [ ] The main aim is to efficiently and consistently write type and resource safe C++. The Core Guidelines were announced[92] in the opening keynote at CPPCon 2015. [92] [ ] The Guidelines are accompanied by the Guideline Support Library (GSL),[93] a header only library of types and functions to implement the Core Guidelines and static checker tools for enforcing Guideline rules.[94] [93] [ ] [94] [ ] Compatibility [edit] [ edit edit ] To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that object code produced by different compilers is expected to be incompatible. There are, however, attempts to standardize compilers for particular machines or operating systems. For example, the Itanium C++ ABI is processor-independent (despite its name) and is implemented by GCC and Clang.[95] name mangling exception handling object code compilers operating systems [95] [ ] With C [edit] [ edit edit ] Compatibility of C and C++ C++ is often considered to be a superset of C but this is not strictly true.[96] Most C code can easily be made to compile correctly in C++ but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For example, C allows implicit conversion from void* to other pointer types but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as new and class, which may be used as identifiers (for example, variable names) in a C program. C [96] [ ] void * new class Some incompatibilities have been removed by the 1999 revision of the C standard (C99), which now supports C++ features such as line comments (//) and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++ did not support that were incompatible or redundant in C++, such as variable-length arrays, native complex-number types (however, the std::complex class in the C++ standard library provides similar functionality, although not code-compatible), designated initializers, compound literals, and the restrict keyword.[97] Some of the C99-introduced features were included in the subsequent version of the C++ standard, C++11 (out of those which were not redundant).[98][99][100] However, the C++11 standard introduces new incompatibilities, such as disallowing assignment of a string literal to a character pointer, which remains valid C. C99 // variable-length arrays std :: complex compound literals restrict [97] [ ] C++11 [98] [ ] [99] [ ] [100] [ ] To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an extern \"C\" {/*...*/} block. Such a function may not rely on features depending on name mangling (i.e., function overloading). extern \"C\" { /*...*/ } name mangling See also [edit] [ edit edit ] Computer programming portal Computer programming portal Computer programming portal Carbon (programming language) Carbon (programming language) Comparison of programming languages Comparison of programming languages List of C++ compilers List of C++ compilers Outline of C++ Outline of C++ Category:C++ libraries Category:C++ libraries Footnotes [edit] [ edit edit ] ^ For the idea of the C++20 stackless coroutines. ^ ^ For the idea of the C++20 stackless coroutines. ^ This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of '\\n' rather than std::endl. Also see Can I write \"void main()\"? Archived 2 July 2020 at the Wayback Machine for an explanation of the implicit return 0; in the main function. This implicit return is not available in other functions. ^ ^ This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of '\\n' rather than std::endl. Also see Can I write \"void main()\"? Archived 2 July 2020 at the Wayback Machine for an explanation of the implicit return 0; in the main function. This implicit return is not available in other functions. Can I write \"void main()\"? Archived Wayback Machine References [edit] [ edit edit ] ^ \"Overview of modules in C++\". Microsoft. 24 April 2023. ^ ^ \"Overview of modules in C++\". Microsoft. 24 April 2023. \"Overview of modules in C++\" ^ a b c d e f Stroustrup, Bjarne (1996). \"A history of C++: 1979-1991\". History of programming languages---II. ACM. pp. 699\u2013769. doi:10.1145/234286.1057836. ^ a b c d e f a b c d e f Stroustrup, Bjarne (1996). \"A history of C++: 1979-1991\". History of programming languages---II. ACM. pp. 699\u2013769. doi:10.1145/234286.1057836. ACM 699\u2013 doi 10.1145/234286.1057836 10.1145/234286.1057836 ^ Stroustrup, Bjarne (16 December 2021). \"C++20: Reaching for the Aims of C++ - Bjarne Stroustrup - CppCon 2021\". CppCon. Archived from the original on 30 December 2021. Retrieved 30 December 2021. ^ ^ Stroustrup, Bjarne (16 December 2021). \"C++20: Reaching for the Aims of C++ - Bjarne Stroustrup - CppCon 2021\". CppCon. Archived from the original on 30 December 2021. Retrieved 30 December 2021. \"C++20: Reaching for the Aims of C++ - Bjarne Stroustrup - CppCon 2021\" Archived . Retrieved 30 December 2021 30 December ^ Stroustrup, Bjarne (12 June 2020). \"Thriving in a crowded and changing world: C++ 2006\u20132020\". Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1\u2013168. doi:10.1145/3386320. ISSN 2475-1421. S2CID 219603741. ^ ^ Stroustrup, Bjarne (12 June 2020). \"Thriving in a crowded and changing world: C++ 2006\u20132020\". Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1\u2013168. doi:10.1145/3386320. ISSN 2475-1421. S2CID 219603741. \"Thriving in a crowded and changing world: C++ 2006\u20132020\" 1\u2013 doi 10.1145/3386320 10.1145/3386320 ISSN 2475-1421 S2CID 219603741 ^ Naugler, David (May 2007). \"C# 2.0 for C++ and Java programmer: conference workshop\". Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ ^ Naugler, David (May 2007). \"C# 2.0 for C++ and Java programmer: conference workshop\". Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ \"Chapel spec (Acknowledgements)\" (PDF). Cray Inc. 1 October 2015. Archived (PDF) from the original on 24 June 2018. Retrieved 14 January 2016. ^ ^ \"Chapel spec (Acknowledgements)\" (PDF). Cray Inc. 1 October 2015. Archived (PDF) from the original on 24 June 2018. Retrieved 14 January 2016. \"Chapel spec (Acknowledgements)\" (PDF) Archived (PDF) . Retrieved 14 January 2016 14 January ^ Fogus, Michael. \"Rich Hickey Q&A\". Code Quarterly. Archived from the original on 11 January 2017. Retrieved 11 January 2017. ^ ^ Fogus, Michael. \"Rich Hickey Q&A\". Code Quarterly. Archived from the original on 11 January 2017. Retrieved 11 January 2017. \"Rich Hickey Q&A\" the original . Retrieved 11 January 2017 11 January ^ Harry. H. Chaudhary (28 July 2014). \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\". Archived from the original on 27 May 2021. Retrieved 29 May 2016. ^ ^ Harry. H. Chaudhary (28 July 2014). \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\". Archived from the original on 27 May 2021. Retrieved 29 May 2016. \"Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans\" Archived . Retrieved 29 May 2016 29 May ^ Roger Poon (1 May 2017). \"Scaling JS++: Abstraction, Performance, and Readability\". Archived from the original on 11 May 2020. Retrieved 21 April 2020. ^ ^ Roger Poon (1 May 2017). \"Scaling JS++: Abstraction, Performance, and Readability\". Archived from the original on 11 May 2020. Retrieved 21 April 2020. \"Scaling JS++: Abstraction, Performance, and Readability\" Archived . Retrieved 21 April 2020 21 April ^ \"The evolution of an extension language: a history of Lua\". www.lua.org. Retrieved 4 January 2023. ^ ^ \"The evolution of an extension language: a history of Lua\". www.lua.org. Retrieved 4 January 2023. \"The evolution of an extension language: a history of Lua\" . Retrieved 4 January 2023 4 January ^ \"FAQ Nim Programming Language\". Archived from the original on 11 July 2017. Retrieved 21 April 2020. ^ ^ \"FAQ Nim Programming Language\". Archived from the original on 11 July 2017. Retrieved 21 April 2020. \"FAQ Nim Programming Language\" Archived . Retrieved 21 April 2020 21 April ^ \"9. Classes \u2014 Python 3.6.4 documentation\". docs.python.org. Archived from the original on 23 October 2012. Retrieved 9 January 2018. ^ ^ \"9. Classes \u2014 Python 3.6.4 documentation\". docs.python.org. Archived from the original on 23 October 2012. Retrieved 9 January 2018. \"9. Classes \u2014 Python 3.6.4 documentation\" Archived . Retrieved 9 January 2018 9 January ^ \"Influences - The Rust Reference\". doc.rust-lang.org. Retrieved 4 January 2023. ^ ^ \"Influences - The Rust Reference\". doc.rust-lang.org. Retrieved 4 January 2023. \"Influences - The Rust Reference\" . Retrieved 4 January 2023 4 January ^ Stroustrup, Bjarne (1997). \"1\". The C++ Programming Language (Third ed.). Addison-Wesley. ISBN 0-201-88954-4. OCLC 59193992. ^ ^ Stroustrup, Bjarne (1997). \"1\". The C++ Programming Language (Third ed.). Addison-Wesley. ISBN 0-201-88954-4. OCLC 59193992. Stroustrup, Bjarne The C++ Programming Language ISBN 0-201-88954-4 OCLC 59193992 ^ a b c Stroustrup, B. (6 May 2014). \"Lecture:The essence of C++. University of Edinburgh\". YouTube. Archived from the original on 28 April 2015. Retrieved 12 June 2015. ^ a b c a b c Stroustrup, B. (6 May 2014). \"Lecture:The essence of C++. University of Edinburgh\". YouTube. Archived from the original on 28 April 2015. Retrieved 12 June 2015. \"Lecture:The essence of C++. University of Edinburgh\" YouTube Archived . Retrieved 12 June 2015 12 June ^ Stroustrup, Bjarne (17 February 2014). \"C++ Applications\". stroustrup.com. Archived from the original on 4 April 2021. Retrieved 5 May 2014. ^ ^ Stroustrup, Bjarne (17 February 2014). \"C++ Applications\". stroustrup.com. Archived from the original on 4 April 2021. Retrieved 5 May 2014. \"C++ Applications\" Archived . Retrieved 5 May 2014 5 May ^ a b \"ISO/IEC 14882:2024\". International Organization for Standardization. Retrieved 21 October 2020. ^ a b a b \"ISO/IEC 14882:2024\". International Organization for Standardization. Retrieved 21 October 2020. \"ISO/IEC 14882:2024\" . Retrieved 21 October 2020 21 October ^ \"Bjarne Stroustrup's Homepage\". www.stroustrup.com. Archived from the original on 14 May 2019. Retrieved 15 May 2013. ^ ^ \"Bjarne Stroustrup's Homepage\". www.stroustrup.com. Archived from the original on 14 May 2019. Retrieved 15 May 2013. \"Bjarne Stroustrup's Homepage\" Archived . Retrieved 15 May 2013 15 May ^ \"C++ IS schedule\" (PDF). Archived (PDF) from the original on 10 August 2020. Retrieved 9 August 2020. ^ ^ \"C++ IS schedule\" (PDF). Archived (PDF) from the original on 10 August 2020. Retrieved 9 August 2020. \"C++ IS schedule\" (PDF) Archived (PDF) . Retrieved 9 August 2020 9 August ^ \"C++; Where it's heading\". Archived from the original on 3 December 2018. Retrieved 3 December 2018. ^ ^ \"C++; Where it's heading\". Archived from the original on 3 December 2018. Retrieved 3 December 2018. \"C++; Where it's heading\" Archived . Retrieved 3 December 2018 3 December ^ \"Re: [RFC] Convert builin-mailinfo.c to use The Better String Library\" (Mailing list). 6 September 2007. Archived from the original on 8 March 2021. Retrieved 31 March 2015. ^ ^ \"Re: [RFC] Convert builin-mailinfo.c to use The Better String Library\" (Mailing list). 6 September 2007. Archived from the original on 8 March 2021. Retrieved 31 March 2015. \"Re: [RFC] Convert builin-mailinfo.c to use The Better String Library\" Archived . Retrieved 31 March 2015 31 March ^ \"Re: Efforts to attract more users?\" (Mailing list). 12 July 2010. Archived from the original on 21 March 2015. Retrieved 31 March 2015. ^ ^ \"Re: Efforts to attract more users?\" (Mailing list). 12 July 2010. Archived from the original on 21 March 2015. Retrieved 31 March 2015. \"Re: Efforts to attract more users?\" Archived . Retrieved 31 March 2015 31 March ^ Andrew Binstock (18 May 2011). \"Dr. Dobb's: Interview with Ken Thompson\". Archived from the original on 13 March 2014. Retrieved 7 February 2014. ^ ^ Andrew Binstock (18 May 2011). \"Dr. Dobb's: Interview with Ken Thompson\". Archived from the original on 13 March 2014. Retrieved 7 February 2014. \"Dr. Dobb's: Interview with Ken Thompson\" Archived . Retrieved 7 February 2014 7 February ^ Peter Seibel (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. pp. 475\u2013476. ISBN 978-1-4302-1948-4. Archived from the original on 1 December 2019. Retrieved 9 November 2017. ^ ^ Peter Seibel (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. pp. 475\u2013476. ISBN 978-1-4302-1948-4. Archived from the original on 1 December 2019. Retrieved 9 November 2017. Coders at Work: Reflections on the Craft of Programming 475\u2013 ISBN 978-1-4302-1948-4 Archived . Retrieved 9 November 2017 9 November ^ \"C++ in Coders at Work\". 16 October 2009. Archived from the original on 10 November 2017. Retrieved 9 November 2017. ^ ^ \"C++ in Coders at Work\". 16 October 2009. Archived from the original on 10 November 2017. Retrieved 9 November 2017. \"C++ in Coders at Work\" Archived . Retrieved 9 November 2017 9 November ^ \"An Interview with Donald Knuth\". Dr. Dobb's. Archived from the original on 8 March 2021. Retrieved 18 July 2021. ^ ^ \"An Interview with Donald Knuth\". Dr. Dobb's. Archived from the original on 8 March 2021. Retrieved 18 July 2021. \"An Interview with Donald Knuth\" Archived . Retrieved 18 July 2021 18 July ^ \"(La)TeX Navigator\". Archived from the original on 20 November 2017. Retrieved 10 November 2017. ^ ^ \"(La)TeX Navigator\". Archived from the original on 20 November 2017. Retrieved 10 November 2017. \"(La)TeX Navigator\" Archived . Retrieved 10 November 2017 10 November ^ a b Stroustrup, Bjarne (7 March 2010). \"Bjarne Stroustrup's FAQ: When was C++ invented?\". stroustrup.com. Archived from the original on 6 February 2016. Retrieved 16 September 2010. ^ a b a b Stroustrup, Bjarne (7 March 2010). \"Bjarne Stroustrup's FAQ: When was C++ invented?\". stroustrup.com. Archived from the original on 6 February 2016. Retrieved 16 September 2010. \"Bjarne Stroustrup's FAQ: When was C++ invented?\" Archived . Retrieved 16 September 2010 16 September ^ a b Stroustrup, Bjarne. \"Evolving a language in and for the real world: C++ 1991-2006\" (PDF). Archived (PDF) from the original on 20 November 2007. Retrieved 14 August 2013. ^ a b a b Stroustrup, Bjarne. \"Evolving a language in and for the real world: C++ 1991-2006\" (PDF). Archived (PDF) from the original on 20 November 2007. Retrieved 14 August 2013. \"Evolving a language in and for the real world: C++ 1991-2006\" (PDF) Archived (PDF) . Retrieved 14 August 2013 14 August ^ a b c Stroustrup, Bjarne. \"A History of C ++ : 1979\u2212 1991\" (PDF). Archived (PDF) from the original on 2 February 2019. Retrieved 18 July 2013. ^ a b c a b c Stroustrup, Bjarne. \"A History of C ++ : 1979\u2212 1991\" (PDF). Archived (PDF) from the original on 2 February 2019. Retrieved 18 July 2013. \"A History of C ++ : 1979\u2212 1991\" (PDF) Archived (PDF) . Retrieved 18 July 2013 18 July ^ Stroustrup, Bjarne. \"The C++ Programming Language\" (First ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. ^ ^ Stroustrup, Bjarne. \"The C++ Programming Language\" (First ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. \"The C++ Programming Language\" Archived . Retrieved 16 September 2010 16 September ^ Stroustrup, Bjarne. \"The C++ Programming Language\" (Second ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. ^ ^ Stroustrup, Bjarne. \"The C++ Programming Language\" (Second ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. \"The C++ Programming Language\" Archived . Retrieved 16 September 2010 16 September ^ Sutter, Herb (30 June 2016). \"Trip report: Summer ISO C++ standards meeting (Oulu)\". herbsutter.com. Archived from the original on 8 October 2016. the next standard after C++17 will be C++20 ^ ^ Sutter, Herb (30 June 2016). \"Trip report: Summer ISO C++ standards meeting (Oulu)\". herbsutter.com. Archived from the original on 8 October 2016. the next standard after C++17 will be C++20 \"Trip report: Summer ISO C++ standards meeting (Oulu)\" the original ^ Dus\u00edkov\u00e1, Hana (6 November 2019). \"N4817: 2020 Prague Meeting Invitation and Information\" (PDF). Archived (PDF) from the original on 29 December 2019. Retrieved 13 February 2020. ^ ^ Dus\u00edkov\u00e1, Hana (6 November 2019). \"N4817: 2020 Prague Meeting Invitation and Information\" (PDF). Archived (PDF) from the original on 29 December 2019. Retrieved 13 February 2020. \"N4817: 2020 Prague Meeting Invitation and Information\" (PDF) Archived (PDF) . Retrieved 13 February 2020 13 February ^ \"Current Status\". isocpp.org. Archived from the original on 8 September 2020. Retrieved 7 September 2020. ^ ^ \"Current Status\". isocpp.org. Archived from the original on 8 September 2020. Retrieved 7 September 2020. \"Current Status\" Archived . Retrieved 7 September 2020 7 September ^ \"C++20 Approved -- Herb Sutter\". isocpp.org. Archived from the original on 11 September 2020. Retrieved 8 September 2020. ^ ^ \"C++20 Approved -- Herb Sutter\". isocpp.org. Archived from the original on 11 September 2020. Retrieved 8 September 2020. \"C++20 Approved -- Herb Sutter\" Archived . Retrieved 8 September 2020 8 September ^ \"Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering\" (Press release). National Academy of Engineering. 3 January 2018. Archived from the original on 3 January 2018. Retrieved 14 December 2021. ^ ^ \"Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering\" (Press release). National Academy of Engineering. 3 January 2018. Archived from the original on 3 January 2018. Retrieved 14 December 2021. \"Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering\" the original . Retrieved 14 December 2021 14 December ^ TIOBE (November 2024). \"TIOBE Index for November 2024\". TIOBE.com. TIOBE Company. Archived from the original on 18 November 2024. Retrieved 18 November 2024. ^ ^ TIOBE (November 2024). \"TIOBE Index for November 2024\". TIOBE.com. TIOBE Company. Archived from the original on 18 November 2024. Retrieved 18 November 2024. \"TIOBE Index for November 2024\" Archived . Retrieved 18 November 2024 18 November ^ \"Bjarne Stroustrup's FAQ \u2013 Where did the name \"C++\" come from?\". Archived from the original on 6 February 2016. Retrieved 16 January 2008. ^ ^ \"Bjarne Stroustrup's FAQ \u2013 Where did the name \"C++\" come from?\". Archived from the original on 6 February 2016. Retrieved 16 January 2008. \"Bjarne Stroustrup's FAQ \u2013 Where did the name \"C++\" come from?\" Archived . Retrieved 16 January 2008 16 January ^ \"C For C++ Programmers\". Northeastern University. Archived from the original on 17 November 2010. Retrieved 7 September 2015. ^ ^ \"C For C++ Programmers\". Northeastern University. Archived from the original on 17 November 2010. Retrieved 7 September 2015. \"C For C++ Programmers\" Northeastern University the original . Retrieved 7 September 2015 7 September ^ \"ISO/IEC 14882:1998\". International Organization for Standardization. Archived from the original on 15 January 2017. Retrieved 23 November 2018. ^ ^ \"ISO/IEC 14882:1998\". International Organization for Standardization. Archived from the original on 15 January 2017. Retrieved 23 November 2018. \"ISO/IEC 14882:1998\" Archived . Retrieved 23 November 2018 23 November ^ \"ISO/IEC 14882:2003\". International Organization for Standardization. Archived from the original on 13 August 2021. Retrieved 23 November 2018. ^ ^ \"ISO/IEC 14882:2003\". International Organization for Standardization. Archived from the original on 13 August 2021. Retrieved 23 November 2018. \"ISO/IEC 14882:2003\" Archived . Retrieved 23 November 2018 23 November ^ a b \"ISO/IEC 14882:2011\". International Organization for Standardization. Archived from the original on 27 May 2016. Retrieved 23 November 2018. ^ a b a b \"ISO/IEC 14882:2011\". International Organization for Standardization. Archived from the original on 27 May 2016. Retrieved 23 November 2018. \"ISO/IEC 14882:2011\" Archived . Retrieved 23 November 2018 23 November ^ \"ISO/IEC 14882:2014\". International Organization for Standardization. Archived from the original on 29 April 2016. Retrieved 23 November 2018. ^ ^ \"ISO/IEC 14882:2014\". International Organization for Standardization. Archived from the original on 29 April 2016. Retrieved 23 November 2018. \"ISO/IEC 14882:2014\" Archived . Retrieved 23 November 2018 23 November ^ \"ISO/IEC 14882:2017\". International Organization for Standardization. Archived from the original on 29 January 2013. Retrieved 2 December 2017. ^ ^ \"ISO/IEC 14882:2017\". International Organization for Standardization. Archived from the original on 29 January 2013. Retrieved 2 December 2017. \"ISO/IEC 14882:2017\" Archived . Retrieved 2 December 2017 2 December ^ \"ISO/IEC 14882:2020\". International Organization for Standardization. Archived from the original on 16 December 2020. Retrieved 16 December 2020. ^ ^ \"ISO/IEC 14882:2020\". International Organization for Standardization. Archived from the original on 16 December 2020. Retrieved 16 December 2020. \"ISO/IEC 14882:2020\" Archived . Retrieved 16 December 2020 16 December ^ \"We have an international standard: C++0x is unanimously approved\". Sutter's Mill. 12 August 2011. Archived from the original on 28 June 2018. Retrieved 23 November 2018. ^ ^ \"We have an international standard: C++0x is unanimously approved\". Sutter's Mill. 12 August 2011. Archived from the original on 28 June 2018. Retrieved 23 November 2018. \"We have an international standard: C++0x is unanimously approved\" Archived . Retrieved 23 November 2018 23 November ^ \"The Future of C++\". Archived from the original on 23 October 2018. Retrieved 23 November 2018 \u2013 via channel9.msdn.com. ^ ^ \"The Future of C++\". Archived from the original on 23 October 2018. Retrieved 23 November 2018 \u2013 via channel9.msdn.com. \"The Future of C++\" Archived . Retrieved 23 November 2018 23 November ^ \"We have C++14! : Standard C++\". isocpp.org. Archived from the original on 19 August 2014. Retrieved 19 August 2014. ^ ^ \"We have C++14! : Standard C++\". isocpp.org. Archived from the original on 19 August 2014. Retrieved 19 August 2014. \"We have C++14! : Standard C++\" Archived . Retrieved 19 August 2014 19 August ^ Sutter, Herb (15 July 2017). \"Trip report: Summer ISO C++ standards meeting (Toronto)\". Archived from the original on 6 August 2017. Retrieved 4 August 2017. ^ ^ Sutter, Herb (15 July 2017). \"Trip report: Summer ISO C++ standards meeting (Toronto)\". Archived from the original on 6 August 2017. Retrieved 4 August 2017. \"Trip report: Summer ISO C++ standards meeting (Toronto)\" Archived . Retrieved 4 August 2017 4 August ^ \"ISO/IEC TR 18015:2006\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TR 18015:2006\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TR 18015:2006\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TR 19768:2007\". International Organization for Standardization. Archived from the original on 4 March 2016. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TR 19768:2007\". International Organization for Standardization. Archived from the original on 4 March 2016. Retrieved 15 February 2019. \"ISO/IEC TR 19768:2007\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TR 29124:2010\". International Organization for Standardization. Archived from the original on 12 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TR 29124:2010\". International Organization for Standardization. Archived from the original on 12 January 2019. Retrieved 15 February 2019. \"ISO/IEC TR 29124:2010\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TR 24733:2011\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TR 24733:2011\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TR 24733:2011\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 18822:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 18822:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 18822:2015\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19570:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19570:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19570:2015\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19841:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19841:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19841:2015\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19568:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19568:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19568:2015\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19217:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19217:2015\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19217:2015\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19571:2016\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19571:2016\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19571:2016\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19568:2017\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19568:2017\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19568:2017\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 21425:2017\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 21425:2017\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 21425:2017\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 22277:2017\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 22277:2017\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 22277:2017\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19216:2018\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19216:2018\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19216:2018\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 21544:2018\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 21544:2018\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 21544:2018\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 19570:2018\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ^ \"ISO/IEC TS 19570:2018\". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. \"ISO/IEC TS 19570:2018\" Archived . Retrieved 15 February 2019 15 February ^ \"ISO/IEC TS 23619:2021\". International Organization for Standardization. Archived from the original on 15 December 2018. Retrieved 11 October 2021. ^ ^ \"ISO/IEC TS 23619:2021\". International Organization for Standardization. Archived from the original on 15 December 2018. Retrieved 11 October 2021. \"ISO/IEC TS 23619:2021\" Archived . Retrieved 11 October 2021 11 October ^ B. Stroustrup (interviewed by Sergio De Simone) (30 April 2015). \"Stroustrup: Thoughts on C++17 - An Interview\". Archived from the original on 8 July 2015. Retrieved 8 July 2015. ^ ^ B. Stroustrup (interviewed by Sergio De Simone) (30 April 2015). \"Stroustrup: Thoughts on C++17 - An Interview\". Archived from the original on 8 July 2015. Retrieved 8 July 2015. \"Stroustrup: Thoughts on C++17 - An Interview\" Archived . Retrieved 8 July 2015 8 July ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 46. ISBN 0-201-70073-5. ^ ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 46. ISBN 0-201-70073-5. ISBN 0-201-70073-5 ^ Stroustrup, Bjarne. \"Open issues for The C++ Programming Language (3rd Edition)\". Archived from the original on 5 May 2014. Retrieved 5 May 2014. ^ ^ Stroustrup, Bjarne. \"Open issues for The C++ Programming Language (3rd Edition)\". Archived from the original on 5 May 2014. Retrieved 5 May 2014. \"Open issues for The C++ Programming Language (3rd Edition)\" Archived . Retrieved 5 May 2014 5 May ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7 Storage duration [basic.stc] ^ ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7 Storage duration [basic.stc] ISO IEC Programming Languages \u2013 C++11 Draft (n3797) Archived Wayback Machine ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.1 Static Storage duration [basic.stc.static] ^ ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.1 Static Storage duration [basic.stc.static] ISO IEC Programming Languages \u2013 C++11 Draft (n3797) Archived Wayback Machine ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.2 Thread Storage duration [basic.stc.thread] ^ ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.2 Thread Storage duration [basic.stc.thread] ISO IEC Programming Languages \u2013 C++11 Draft (n3797) Archived Wayback Machine ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.3 Automatic Storage duration [basic.stc.auto] ^ ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.3 Automatic Storage duration [basic.stc.auto] ISO IEC Programming Languages \u2013 C++11 Draft (n3797) Archived Wayback Machine ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.4 Dynamic Storage duration [basic.stc.dynamic] ^ ^ ISO/IEC. Programming Languages \u2013 C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine \u00a73.7.4 Dynamic Storage duration [basic.stc.dynamic] ISO IEC Programming Languages \u2013 C++11 Draft (n3797) Archived Wayback Machine ^ \"C++ Core Guidelines\". isocpp.github.io. Archived from the original on 8 February 2020. Retrieved 9 February 2020. ^ ^ \"C++ Core Guidelines\". isocpp.github.io. Archived from the original on 8 February 2020. Retrieved 9 February 2020. \"C++ Core Guidelines\" Archived . Retrieved 9 February 2020 9 February ^ a b \"Nobody Understands C++: Part 5: Template Code Bloat\". articles.emptycrate.com/: EmptyCrate Software. Travel. Stuff. 6 May 2008. Archived from the original on 25 April 2016. Retrieved 8 March 2010. On occasion you will read or hear someone talking about C++ templates causing code bloat. I was thinking about it the other day and thought to myself, \"self, if the code does exactly the same thing then the compiled code cannot really be any bigger, can it?\" [...] And what about compiled code size? Each were compiled with the command g++ <filename>.cpp -O3. Non-template version: 8140 bytes, template version: 8028 bytes! ^ a b a b \"Nobody Understands C++: Part 5: Template Code Bloat\". articles.emptycrate.com/: EmptyCrate Software. Travel. Stuff. 6 May 2008. Archived from the original on 25 April 2016. Retrieved 8 March 2010. On occasion you will read or hear someone talking about C++ templates causing code bloat. I was thinking about it the other day and thought to myself, \"self, if the code does exactly the same thing then the compiled code cannot really be any bigger, can it?\" [...] And what about compiled code size? Each were compiled with the command g++ <filename>.cpp -O3. Non-template version: 8140 bytes, template version: 8028 bytes! \"Nobody Understands C++: Part 5: Template Code Bloat\" Archived . Retrieved 8 March 2010 8 March ^ Sutter, Herb; Alexandrescu, Andrei (2004). C++ Coding Standards: 101 Rules, Guidelines, and Best Practices. Addison-Wesley. ^ ^ Sutter, Herb; Alexandrescu, Andrei (2004). C++ Coding Standards: 101 Rules, Guidelines, and Best Practices. Addison-Wesley. Sutter, Herb Alexandrescu, Andrei ^ Henricson, Mats; Nyquist, Erik (1997). Industrial Strength C++. Prentice Hall. ISBN 0-13-120965-5. ^ ^ Henricson, Mats; Nyquist, Erik (1997). Industrial Strength C++. Prentice Hall. ISBN 0-13-120965-5. Industrial Strength C++ ISBN 0-13-120965-5 ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 310. ISBN 0-201-70073-5. A virtual member function is sometimes called a method. ^ ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 310. ISBN 0-201-70073-5. A virtual member function is sometimes called a method. ISBN 0-201-70073-5 ^ Mycroft, Alan (2013). \"C and C++ Exceptions | Templates\" (PDF). Cambridge Computer Laboratory - Course Materials 2013-14. Archived (PDF) from the original on 13 May 2016. Retrieved 30 August 2016. ^ ^ Mycroft, Alan (2013). \"C and C++ Exceptions | Templates\" (PDF). Cambridge Computer Laboratory - Course Materials 2013-14. Archived (PDF) from the original on 13 May 2016. Retrieved 30 August 2016. \"C and C++ Exceptions | Templates\" (PDF) Archived (PDF) . Retrieved 30 August 2016 30 August ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 345. ISBN 9780321563842. ^ ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 345. ISBN 9780321563842. ISBN 9780321563842 ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 363\u2013365. ISBN 9780321563842. ^ ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 363\u2013365. ISBN 9780321563842. 363\u2013 ISBN 9780321563842 ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 345, 363. ISBN 9780321563842. ^ ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 345, 363. ISBN 9780321563842. ISBN 9780321563842 ^ \"Google C++ Style Guide\". Archived from the original on 16 March 2019. Retrieved 25 June 2019. ^ ^ \"Google C++ Style Guide\". Archived from the original on 16 March 2019. Retrieved 25 June 2019. \"Google C++ Style Guide\" Archived . Retrieved 25 June 2019 25 June ^ \"LLVM Coding Standards\". LLVM 9 documentation. Archived from the original on 27 June 2019. Retrieved 25 June 2019. ^ ^ \"LLVM Coding Standards\". LLVM 9 documentation. Archived from the original on 27 June 2019. Retrieved 25 June 2019. \"LLVM Coding Standards\" Archived . Retrieved 25 June 2019 25 June ^ \"Coding Conventions\". Qt Wiki. Archived from the original on 26 June 2019. Retrieved 26 June 2019. ^ ^ \"Coding Conventions\". Qt Wiki. Archived from the original on 26 June 2019. Retrieved 26 June 2019. \"Coding Conventions\" Archived . Retrieved 26 June 2019 26 June ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 344, 370. ISBN 9780321563842. ^ ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 344, 370. ISBN 9780321563842. ISBN 9780321563842 ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 349. ISBN 9780321563842. ^ ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 349. ISBN 9780321563842. ISBN 9780321563842 ^ Graziano Lo Russo (2008). \"An Interview with A. Stepanov\". stlport.org. Archived from the original on 4 March 2009. Retrieved 8 October 2015. ^ ^ Graziano Lo Russo (2008). \"An Interview with A. Stepanov\". stlport.org. Archived from the original on 4 March 2009. Retrieved 8 October 2015. \"An Interview with A. Stepanov\" Archived . Retrieved 8 October 2015 8 October ^ \"C++ Core Guidelines\". isocpp.github.io. Archived from the original on 16 February 2020. Retrieved 9 February 2020. ^ ^ \"C++ Core Guidelines\". isocpp.github.io. Archived from the original on 16 February 2020. Retrieved 9 February 2020. \"C++ Core Guidelines\" Archived . Retrieved 9 February 2020 9 February ^ \"Bjarne Stroustrup announces C++ Core Guidelines : Standard C++\". isocpp.org. Archived from the original on 11 May 2020. Retrieved 31 March 2020. ^ ^ \"Bjarne Stroustrup announces C++ Core Guidelines : Standard C++\". isocpp.org. Archived from the original on 11 May 2020. Retrieved 31 March 2020. \"Bjarne Stroustrup announces C++ Core Guidelines : Standard C++\" Archived . Retrieved 31 March 2020 31 March ^ \"microsoft/GSL\". 18 July 2021. Archived from the original on 18 July 2021. Retrieved 18 July 2021 \u2013 via GitHub. ^ ^ \"microsoft/GSL\". 18 July 2021. Archived from the original on 18 July 2021. Retrieved 18 July 2021 \u2013 via GitHub. \"microsoft/GSL\" Archived . Retrieved 18 July 2021 18 July ^ \"Using the C++ Core Guidelines checkers\". Microsoft Learn. Archived from the original on 13 August 2021. Retrieved 31 March 2020. ^ ^ \"Using the C++ Core Guidelines checkers\". Microsoft Learn. Archived from the original on 13 August 2021. Retrieved 31 March 2020. \"Using the C++ Core Guidelines checkers\" Archived . Retrieved 31 March 2020 31 March ^ \"C++ ABI Summary\". 20 March 2001. Archived from the original on 10 July 2018. Retrieved 30 May 2006. ^ ^ \"C++ ABI Summary\". 20 March 2001. Archived from the original on 10 July 2018. Retrieved 30 May 2006. \"C++ ABI Summary\" Archived . Retrieved 30 May 2006 30 May ^ \"Bjarne Stroustrup's FAQ \u2013 Is C a subset of C++?\". Archived from the original on 6 February 2016. Retrieved 5 May 2014. ^ ^ \"Bjarne Stroustrup's FAQ \u2013 Is C a subset of C++?\". Archived from the original on 6 February 2016. Retrieved 5 May 2014. \"Bjarne Stroustrup's FAQ \u2013 Is C a subset of C++?\" Archived . Retrieved 5 May 2014 5 May ^ \"C9X \u2013 The New C Standard\". Archived from the original on 21 June 2018. Retrieved 27 December 2008. ^ ^ \"C9X \u2013 The New C Standard\". Archived from the original on 21 June 2018. Retrieved 27 December 2008. \"C9X \u2013 The New C Standard\" Archived . Retrieved 27 December 2008 27 December ^ \"C++0x Support in GCC\". Archived from the original on 21 July 2010. Retrieved 12 October 2010. ^ ^ \"C++0x Support in GCC\". Archived from the original on 21 July 2010. Retrieved 12 October 2010. \"C++0x Support in GCC\" Archived . Retrieved 12 October 2010 12 October ^ \"C++0x Core Language Features In VC10: The Table\". Archived from the original on 21 August 2010. Retrieved 12 October 2010. ^ ^ \"C++0x Core Language Features In VC10: The Table\". Archived from the original on 21 August 2010. Retrieved 12 October 2010. \"C++0x Core Language Features In VC10: The Table\" Archived . Retrieved 12 October 2010 12 October ^ \"Clang - C++98, C++11, and C++14 Status\". Clang.llvm.org. 12 May 2013. Archived from the original on 4 July 2013. Retrieved 10 June 2013. ^ ^ \"Clang - C++98, C++11, and C++14 Status\". Clang.llvm.org. 12 May 2013. Archived from the original on 4 July 2013. Retrieved 10 June 2013. \"Clang - C++98, C++11, and C++14 Status\" Archived . Retrieved 10 June 2013 10 June Further reading [edit] [ edit edit ] Abrahams, David; Gurtovoy, Aleksey (2005). C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond. Addison-Wesley. ISBN 0-321-22725-5. Abrahams, David ISBN 0-321-22725-5 Alexandrescu, Andrei (2001). Modern C++ Design: Generic Programming and Design Patterns Applied. Addison-Wesley. ISBN 0-201-70431-5. Alexandrescu, Andrei ISBN 0-201-70431-5 Alexandrescu, Andrei; Sutter, Herb (2004). C++ Design and Coding Standards: Rules and Guidelines for Writing Programs. Addison-Wesley. ISBN 0-321-11358-6. Alexandrescu, Andrei Sutter, Herb ISBN 0-321-11358-6 Becker, Pete (2006). The C++ Standard Library Extensions : A Tutorial and Reference. Addison-Wesley. ISBN 0-321-41299-0. Becker, Pete ISBN 0-321-41299-0 Brokken, Frank (2010). C++ Annotations. University of Groningen. ISBN 978-90-367-0470-0. Archived from the original on 28 April 2010. Retrieved 28 April 2010. C++ Annotations ISBN 978-90-367-0470-0 Archived . Retrieved 28 April 2010 28 April Coplien, James O. (1994) [reprinted with corrections, original year of publication 1992]. Advanced C++: Programming Styles and Idioms. Addison-Wesley. ISBN 0-201-54855-0. Coplien, James O. Advanced C++: Programming Styles and Idioms ISBN 0-201-54855-0 Dewhurst, Stephen C. (2005). C++ Common Knowledge: Essential Intermediate Programming. Addison-Wesley. ISBN 0-321-32192-8. ISBN 0-321-32192-8 Information Technology Industry Council (15 October 2003). Programming languages \u2013 C++ (Second ed.). Geneva: ISO/IEC. 14882:2003(E). Information Technology Industry Council Josuttis, Nicolai M. (2012). The C++ Standard Library, A Tutorial and Reference (Second ed.). Addison-Wesley. ISBN 978-0-321-62321-8. ISBN 978-0-321-62321-8 Koenig, Andrew; Moo, Barbara E. (2000). Accelerated C++ \u2013 Practical Programming by Example. Addison-Wesley. ISBN 0-201-70353-X. Koenig, Andrew Accelerated C++ \u2013 Practical Programming by Example ISBN 0-201-70353-X Lippman, Stanley B.; Lajoie, Jos\u00e9e; Moo, Barbara E. (2011). C++ Primer (Fifth ed.). Addison-Wesley. ISBN 978-0-321-71411-4. Lippman, Stanley B. C++ Primer C++ Primer ISBN 978-0-321-71411-4 Lippman, Stanley B. (1996). Inside the C++ Object Model. Addison-Wesley. ISBN 0-201-83454-5. ISBN 0-201-83454-5 Meyers, Scott (2005). Effective C++ (Third ed.). Addison-Wesley. ISBN 0-321-33487-6. Meyers, Scott Effective C++ ISBN 0-321-33487-6 Stroustrup, Bjarne (2013). The C++ Programming Language (Fourth ed.). Addison-Wesley. ISBN 978-0-321-56384-2. Stroustrup, Bjarne The C++ Programming Language ISBN 978-0-321-56384-2 Stroustrup, Bjarne (1994). The Design and Evolution of C++. Addison-Wesley. ISBN 0-201-54330-3. Stroustrup, Bjarne The Design and Evolution of C++ ISBN 0-201-54330-3 Stroustrup, Bjarne (2014). Programming: Principles and Practice Using C++ (Second ed.). Addison-Wesley. ISBN 978-0-321-99278-9. Stroustrup, Bjarne ISBN 978-0-321-99278-9 Sutter, Herb (2001). More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions. Addison-Wesley. ISBN 0-201-70434-X. Sutter, Herb ISBN 0-201-70434-X Sutter, Herb (2004). Exceptional C++ Style. Addison-Wesley. ISBN 0-201-76042-8. Sutter, Herb ISBN 0-201-76042-8 Vandevoorde, David; Josuttis, Nicolai M. (2003). C++ Templates: The complete Guide. Addison-Wesley. ISBN 0-201-73484-2. ISBN 0-201-73484-2 External links [edit] [ edit edit ] JTC1/SC22/WG21 \u2013 the ISO/IEC C++ Standard Working Group JTC1/SC22/WG21 Standard C++ Foundation \u2013 a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organization. Standard C++ Foundation Bjarne Stroustrup C++ Keywords C++ Keywords C++ Expressions C++ Expressions C++ Operator Precedence C++ Operator Precedence sister projects sister projects Media from Commons Media from Commons Media Quotations from Wikiquote Quotations from Wikiquote Quotations Textbooks from Wikibooks Textbooks from Wikibooks Textbooks Resources from Wikiversity Resources from Wikiversity Resources v v t t e e C++ C++ C++ Outline Outline C++98 C++98 C++03 C++03 C++11 C++11 C++14 C++14 C++17 C++17 C++20 C++20 C++23 C++23 C++26 C++26 Libraries Libraries Classes Classes Concepts Concepts Copy constructor Copy constructor Exception handling (Exception safety) Exception handling Exception safety Function overloading Function overloading Move semantics Move semantics new and delete new and delete Operator overloading Operator overloading Operators Operators References References Templates Templates Virtual functions Virtual functions Standard Library I/O Streams I/O Streams Smart pointers Smart pointers STL STL Strings Strings As-if rule As-if rule Barton\u2013Nackman trick Barton\u2013Nackman trick Curiously recurring template pattern Curiously recurring template pattern Most vexing parse Most vexing parse One Definition Rule One Definition Rule Resource acquisition is initialization Resource acquisition is initialization Rule of three Rule of three Slicing Slicing Special member functions Special member functions Substitution failure is not an error Substitution failure is not an error Template metaprogramming Template metaprogramming Compilers Comparison of C++ compilers Comparison of C++ compilers Borland C++ Borland C++ Borland Turbo C++ Borland Turbo C++ C++Builder C++Builder Clang Clang GCC GCC Intel C++ Compiler Intel C++ Compiler Oracle Solaris Studio Oracle Solaris Studio Visual C++ (MSVC) Visual C++ (MSVC) Watcom C/C++ Watcom C/C++ IDEs Comparison of C IDEs Comparison of C IDEs Anjuta Anjuta CLion CLion Code::Blocks Code::Blocks CodeLite CodeLite Dev-C++ Dev-C++ Eclipse Eclipse Geany Geany NetBeans NetBeans KDevelop KDevelop Qt Creator Qt Creator Visual Studio Visual Studio Objective-C++ Objective-C++ C++/CLI C++/CLI C++/CX C++/CX C++/WinRT C++/WinRT Ch Ch SYCL SYCL Embedded C++ Embedded C++ Comparison of programming languages Comparison of programming languages Comparison of Java and C++ Comparison of Java and C++ Comparison of ALGOL 68 and C++ Comparison of ALGOL 68 and C++ Compatibility of C and C++ Compatibility of C and C++ Criticism of C++ Criticism of C++ Designer Bjarne Stroustrup Bjarne Stroustrup Category v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category v v t t e e ISO by standard number ISO standards ISO romanizations IEC standards 1 1 2 2 3 3 4 4 6 6 7 7 9 9 16 16 17 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 31 -0 -0 -1 -1 -3 -3 -4 -4 -5 -5 -6 -6 -7 -7 -8 -8 -9 -9 -10 -10 -11 -11 -12 -12 -13 -13 68-1 68-1 128 128 216 216 217 217 226 226 228 228 233 233 259 259 261 261 262 262 302 302 306 306 361 361 500 500 518 518 519 519 639 -1 -2 -3 -5 -6 639 -1 -1 -2 -2 -3 -3 -5 -5 -6 -6 646 646 657 657 668 668 690 690 704 704 732 732 764 764 838 838 843 843 860 860 898 898 965 965 999 999 1000 1000 1004 1004 1007 1007 1073-1 1073-1 1073-2 1073-2 1155 1155 1413 1413 1538 1538 1629 1629 1745 1745 1989 1989 2014 2014 2015 2015 2022 2022 2033 2033 2047 2047 2108 2108 2145 2145 2146 2146 2240 2240 2281 2281 2533 2533 2709 2709 2711 2711 2720 2720 2788 2788 2848 2848 2852 2852 2921 2921 3029 3029 3103 3103 3166 -1 -2 -3 3166 -1 -1 -2 -2 -3 -3 3297 3297 3307 3307 3601 3601 3602 3602 3864 3864 3901 3901 3950 3950 3977 3977 4031 4031 4157 4157 4165 4165 4217 4217 4909 4909 5218 5218 5426 5426 5427 5427 5428 5428 5725 5725 5775 5775 5776 5776 5800 5800 5807 5807 5964 5964 6166 6166 6344 6344 6346 6346 6373 6373 6385 6385 6425 6425 6429 6429 6438 6438 6523 6523 6709 6709 6943 6943 7001 7001 7002 7002 7010 7010 7027 7027 7064 7064 7098 7098 7185 7185 7200 7200 7498 -1 7498 -1 -1 7637 7637 7736 7736 7810 7810 7811 7811 7812 7812 7813 7813 7816 7816 7942 7942 8000 8000 8093 8093 8178 8178 8217 8217 8373 8373 8501-1 8501-1 8571 8571 8583 8583 8601 8601 8613 8613 8632 8632 8651 8651 8652 8652 8691 8691 8805/8806 8805/8806 8807 8807 8820-5 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8859 -1 -1 -2 -2 -3 -3 -4 -4 -5 -5 -6 -6 -7 -7 -8 -8 -8-I -8-I -9 -9 -10 -10 -11 -11 -12 -12 -13 -13 -14 -14 -15 -15 -16 -16 8879 8879 9000/9001 9000/9001 9036 9036 9075 9075 9126 9126 9141 9141 9227 9227 9241 9241 9293 9293 9314 9314 9362 9362 9407 9407 9496 9496 9506 9506 9529 9529 9564 9564 9592/9593 9592/9593 9594 9594 9660 9660 9797-1 9797-1 9897 9897 9899 9899 9945 9945 9984 9984 9985 9985 9995 9995 10006 10006 10007 10007 10116 10116 10118-3 10118-3 10160 10160 10161 10161 10165 10165 10179 10179 10206 10206 10218 10218 10279 10279 10303 -11 -21 -22 -28 -238 10303 -11 -11 -21 -21 -22 -22 -28 -28 -238 -238 10383 10383 10585 10585 10589 10589 10628 10628 10646 10646 10664 10664 10746 10746 10861 10861 10957 10957 10962 10962 10967 10967 11073 11073 11170 11170 11172 11172 11179 11179 11404 11404 11544 11544 11783 11783 11784 11784 11785 11785 11801 11801 11889 11889 11898 11898 11940 (-2) 11940 -2 11941 11941 11941 (TR) 11941 (TR) 11992 11992 12006 12006 12052 12052 12182 12182 12207 12207 12234-2 12234-2 12620 12620 13211 -1 -2 13211 -1 -1 -2 -2 13216 13216 13250 13250 13399 13399 13406-2 13406-2 13450 13450 13485 13485 13490 13490 13567 13567 13568 13568 13584 13584 13616 13616 13816 13816 13818 13818 14000 14000 14031 14031 14224 14224 14289 14289 14396 14396 14443 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14496 -2 -2 -3 -3 -6 -6 -10 -10 -11 -11 -12 -12 -14 -14 -17 -17 -20 -20 14617 14617 14644 14644 14649 14649 14651 14651 14698 14698 14764 14764 14882 14882 14971 14971 15022 15022 15189 15189 15288 15288 15291 15291 15398 15398 15408 15408 15444 -3 -9 15444 -3 -3 -9 -9 15445 15445 15438 15438 15504 15504 15511 15511 15686 15686 15693 15693 15706 -2 15706 -2 -2 15707 15707 15897 15897 15919 15919 15924 15924 15926 15926 15926 WIP 15926 WIP 15930 15930 15938 15938 16023 16023 16262 16262 16355-1 16355-1 16485 16485 16612-2 16612-2 16750 16750 16949 (TS) 16949 (TS) 17024 17024 17025 17025 17100 17100 17203 17203 17369 17369 17442 17442 17506 17506 17799 17799 18004 18004 18014 18014 18181 18181 18245 18245 18629 18629 18916 18916 19005 19005 19011 19011 19092 -1 -2 19092 -1 -1 -2 -2 19114 19114 19115 19115 19125 19125 19136 19136 19407 19407 19439 19439 19500 19500 19501 19501 19502 19502 19503 19503 19505 19505 19506 19506 19507 19507 19508 19508 19509 19509 19510 19510 19600 19600 19752 19752 19757 19757 19770 19770 19775-1 19775-1 19794-5 19794-5 19831 19831 20000 20000 20022 20022 20121 20121 20400 20400 20802 20802 20830 20830 21000 21000 21001 21001 21047 21047 21122 21122 21500 21500 21827 21827 22000 22000 22275 22275 22300 22300 22301 22301 22395 22395 22537 22537 23000 23000 23003 23003 23008 23008 23009 23009 23090-3 23090-3 23092 23092 23094-1 23094-1 23094-2 23094-2 23270 23270 23271 23271 23360 23360 23941 23941 24517 24517 24613 24613 24617 24617 24707 24707 24728 24728 25178 25178 25964 25964 26000 26000 26262 26262 26300 26300 26324 26324 27000 series 27000 series 27000 27000 27001 27001 27002 27002 27005 27005 27006 27006 27729 27729 28000 28000 29110 29148 29148 29199-2 29199-2 29500 29500 30170 30170 31000 31000 32000 32000 37001 37001 38500 38500 39075 39075 40500 40500 42010 42010 45001 45001 50001 50001 55000 55000 56000 56000 80000 80000 Category Category v v t t e e IEC standards 60027 60027 60034 60034 60038 60038 60062 60062 60063 60063 60068 60068 60112 60112 60228 60228 60269 60269 60297 60297 60309 60309 60320 60320 60364 60364 60446 60446 60559 60559 60601 60601 60870 60870-5 60870-6 60870 60870-5 60870-5 60870-6 60870-6 60906-1 60906-1 60908 60908 60929 60929 60958 60958 60980-344 60980-344 61030 61030 61131 61131-3 61131-9 61131 61131-3 61131-3 61131-9 61131-9 61158 61158 61162 61162 61334 61334 61355 61355 61360 61360 61400 61400 61499 61499 61508 61508 61511 61511 61784 61784 61850 61850 61851 61851 61883 61883 61960 61960 61968 61968 61970 61970 62014-4 62014-4 62026 62026 62056 62056 62061 62061 62196 62196 62262 62262 62264 62264 62304 62304 62325 62325 62351 62351 62365 62365 62366 62366 62379 62379 62386 62386 62455 62455 62680 62680 62682 62682 62700 62700 63110 63110 63119 63119 63382 63382 646 646 1989 1989 2022 2022 4909 4909 5218 5218 6429 6429 6523 6523 7810 7810 7811 7811 7812 7812 7813 7813 7816 7816 7942 7942 8613 8613 8632 8632 8652 8652 8859 8859 9126 9126 9293 9293 9496 9496 9529 9529 9592 9592 9593 9593 9899 9899 9945 9945 9995 9995 10021 10021 10116 10116 10165 10165 10179 10179 10279 10279 10646 10646 10967 10967 11172 11172 11179 11179 11404 11404 11544 11544 11801 11801 12207 12207 13250 13250 13346 13346 13522-5 13522-5 13568 13568 13816 13816 13818 13818 14443 14443 14496 14496 14651 14651 14882 14882 15288 15288 15291 15291 15408 15408 15444 15444 15445 15445 15504 15504 15511 15511 15693 15693 15897 15897 15938 15938 16262 16262 16485 16485 17024 17024 17025 17025 18004 18004 18014 18014 18181 18181 19752 19752 19757 19757 19770 19770 19788 19788 20000 20000 20802 20802 21000 21000 21827 21827 22275 22275 22537 22537 23000 23000 23003 23003 23008 23008 23270 23270 23360 23360 24707 24707 24727 24727 24744 24744 24752 24752 26300 26300 27000 27000 27000-series 27000-series 27002 27002 27040 27040 29110 29119 29119 33001 33001 38500 38500 39075 39075 42010 42010 80000 80000 81346 81346 International Electrotechnical Commission International Electrotechnical Commission Authority control databases Germany Germany Germany United States United States United States France France France BnF data BnF data BnF data Czech Republic Czech Republic Czech Republic Czech Republic Spain Spain Spain Israel Israel Israel IdRef IdRef IdRef https://en.wikipedia.org/w/index.php?title=C%2B%2B&oldid=1264775453 Categories C++ C++ Algol programming language family Algol programming language family C++ programming language family C++ programming language family Class-based programming languages Class-based programming languages Cross-platform software Cross-platform software High-level programming languages High-level programming languages Object-oriented programming languages Object-oriented programming languages Programming languages created in 1983 Programming languages created in 1983 Programming languages with an ISO standard Programming languages with an ISO standard Statically typed programming languages Statically typed programming languages Compiled programming languages Compiled programming languages Webarchive template wayback links Webarchive template wayback links Articles with short description Articles with short description Short description matches Wikidata Short description matches Wikidata Wikipedia pages move-protected due to vandalism Wikipedia pages move-protected due to vandalism Use dmy dates from January 2020 Use dmy dates from January 2020 Articles containing potentially dated statements from 1997 Articles containing potentially dated statements from 1997 All articles containing potentially dated statements All articles containing potentially dated statements All articles with unsourced statements All articles with unsourced statements Articles with unsourced statements from February 2024 Articles with unsourced statements from February 2024 Articles containing potentially dated statements from November 2024 Articles containing potentially dated statements from November 2024 Articles with example C++ code Articles with example C++ code Articles with excerpts Articles with excerpts This page was last edited on 23 December 2024, at 13:06 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/Go_(programming_language)": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History Toggle History subsection 1.1 Branding and styling 1.2 Generics 1.3 Versioning 1 History 1 History Toggle History subsection 1.1 Branding and styling 1.1 Branding and styling 1.1 Branding and styling 1.2 Generics 1.2 Generics 1.2 Generics 1.3 Versioning 1.3 Versioning 1.3 Versioning 2 Design Toggle Design subsection 2.1 Syntax 2.2 Types 2.2.1 Interface system 2.2.2 Generic code using parameterized types 2.2.3 Enumerated types 2.3 Package system 2.4 Concurrency: goroutines and channels 2.4.1 Suitability for parallel programming 2.4.2 Lack of data race safety 2.5 Binaries 2.6 Omissions 2 Design 2 Design Toggle Design subsection 2.1 Syntax 2.1 Syntax 2.1 Syntax 2.2 Types 2.2.1 Interface system 2.2.2 Generic code using parameterized types 2.2.3 Enumerated types 2.2 Types 2.2 Types 2.2.1 Interface system 2.2.1 Interface system 2.2.1 Interface system 2.2.2 Generic code using parameterized types 2.2.2 Generic code using parameterized types 2.2.2 Generic code using parameterized types 2.2.3 Enumerated types 2.2.3 Enumerated types 2.2.3 Enumerated types 2.3 Package system 2.3 Package system 2.3 Package system 2.4 Concurrency: goroutines and channels 2.4.1 Suitability for parallel programming 2.4.2 Lack of data race safety 2.4 Concurrency: goroutines and channels 2.4 Concurrency: goroutines and channels 2.4.1 Suitability for parallel programming 2.4.1 Suitability for parallel programming 2.4.1 Suitability for parallel programming 2.4.2 Lack of data race safety 2.4.2 Lack of data race safety 2.4.2 Lack of data race safety 2.5 Binaries 2.5 Binaries 2.5 Binaries 2.6 Omissions 2.6 Omissions 2.6 Omissions 3 Style 3 Style 3 Style 4 Tools 4 Tools 4 Tools 5 Examples Toggle Examples subsection 5.1 Hello world 5.2 Concurrency 5.3 Testing 5.4 Web app 5 Examples 5 Examples Toggle Examples subsection 5.1 Hello world 5.1 Hello world 5.1 Hello world 5.2 Concurrency 5.2 Concurrency 5.2 Concurrency 5.3 Testing 5.3 Testing 5.3 Testing 5.4 Web app 5.4 Web app 5.4 Web app 6 Applications 6 Applications 6 Applications 7 Reception 7 Reception 7 Reception 8 Naming dispute 8 Naming dispute 8 Naming dispute 9 See also 9 See also 9 See also 10 Notes 10 Notes 10 Notes 11 References 11 References 11 References 12 Further reading 12 Further reading 12 Further reading 13 External links 13 External links 13 External links Toggle the table of contents Go (programming language) Go (programming language) 57 languages Afrikaans Afrikaans Afrikaans \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Brezhoneg Brezhoneg Brezhoneg Catal\u00e0 Catal\u00e0 Catal\u00e0 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Dansk Dansk Dansk Deutsch Deutsch Deutsch Eesti Eesti Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Euskara Euskara Euskara \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 Hrvatski Hrvatski Hrvatski Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 Latvie\u0161u Latvie\u0161u Latvie\u0161u Magyar Magyar Magyar \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 Bahasa Melayu Bahasa Melayu Bahasa Melayu Nederlands Nederlands Nederlands \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Shqip Shqip Shqip \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd \u0dc3\u0dd2\u0d82\u0dc4\u0dbd Simple English Simple English Simple English Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Suomi Suomi Suomi Svenska Svenska Svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 \u0627\u0631\u062f\u0648 Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t \u5434\u8bed \u5434\u8bed \u5434\u8bed \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read Edit Edit Edit View history View history View history Tools Read Read Read Edit Edit Edit View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons Wikidata item Wikidata item Wikidata item Go! (programming language) Paradigm Multi-paradigm concurrent imperative functional [1] [ ] object-oriented [2] [ ] [3] [ ] Designed by Robert Griesemer Rob Pike Ken Thompson [4] [ ] Developer [5] [ ] ; 15 years ago (2009-11-10) 2009-11-10 Stable release 1.23.3 1.23.3 ; 57 days ago (6 November 2024) 6 November 2024 Typing discipline Inferred static strong [6] [ ] structural [7] [ ] [8] [ ] nominal Memory management Garbage collection Assembly language C++ OS DragonFly BSD FreeBSD Linux macOS NetBSD OpenBSD [9] [ ] Plan 9 [10] [ ] Solaris Windows License 3-clause BSD [5] [ ] patent [11] [ ] Filename extensions go.dev go.dev implementations C, Oberon-2, Limbo, Active Oberon, communicating sequential processes, Pascal, Oberon, Smalltalk, Newsqueak, Modula-2, Alef, APL, BCPL, Modula, occam C C Oberon-2 Oberon-2 Limbo Limbo Active Oberon Active Oberon communicating sequential processes communicating sequential processes Pascal Pascal Oberon Oberon Smalltalk Smalltalk Newsqueak Newsqueak Modula-2 Modula-2 Alef Alef APL APL BCPL BCPL Modula Modula occam occam Crystal V Go is a fast[12] statically typed, compiled high-level general purpose programming language. It is known for its simplicity and efficiency.[13] Its simplicity express through its basic syntax of the language itself and its large library that help the developer to have a small stack for its project. It was designed at Google[14] in 2009 by Robert Griesemer, Rob Pike, and Ken Thompson.[4] It is syntactically similar to C, but also has memory safety, garbage collection, structural typing,[7] and CSP-style concurrency.[15] It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go.[16] [12] [ ] statically typed compiled high-level general purpose programming language [13] [ ] Google [14] [ ] Robert Griesemer Rob Pike Ken Thompson [4] [ ] syntactically C memory safety garbage collection structural typing [7] [ ] CSP concurrency [15] [ ] [16] [ ] There are two major implementations: The original, self-hosting[17] compiler toolchain, initially developed inside Google;[18] self-hosting [17] [ ] compiler toolchain [18] [ ] A frontend written in C++, called gofrontend,[19] originally a GCC frontend, providing gccgo, a GCC-based Go compiler;[20] later extended to also support LLVM, providing an LLVM-based Go compiler called gollvm.[21] C++ [19] [ ] GCC [20] [ ] LLVM [21] [ ] A third-party source-to-source compiler, GopherJS,[22] transpiles Go to JavaScript for front-end web development. source-to-source compiler [22] [ ] JavaScript front-end web development History [edit] [ edit edit ] Go was designed at Google in 2007 to improve programming productivity in an era of multicore, networked machines and large codebases.[23] The designers wanted to address criticisms of other languages in use at Google, but keep their useful characteristics:[24] Google programming productivity multicore networked machines codebases [23] [ ] [24] [ ] Static typing and run-time efficiency (like C) Static typing run-time C Readability and usability (like Python)[25] Readability usability Python [25] [ ] High-performance networking and multiprocessing networking multiprocessing Its designers were primarily motivated by their shared dislike of C++.[26][27][28] dislike of C++ [26] [ ] [27] [ ] [28] [ ] Go was publicly announced in November 2009,[29] and version 1.0 was released in March 2012.[30][31] Go is widely used in production at Google[32] and in many other organizations and open-source projects. [29] [ ] [30] [ ] [31] [ ] [32] [ ] Branding and styling [edit] [ edit edit ] Gopher The Gopher mascot was introduced in 2009 for the open source launch of the language. The design, by Ren\u00e9e French, borrowed from a c. 2000 WFMU promotion.[33] Gopher mascot open source Ren\u00e9e French WFMU [33] [ ] In November 2016, the Go and Go Mono fonts were released by type designers Charles Bigelow and Kris Holmes specifically for use by the Go project. Go is a humanist sans-serif resembling Lucida Grande, and Go Mono is monospaced. Both fonts adhere to the WGL4 character set and were designed to be legible with a large x-height and distinct letterforms. Both Go and Go Mono adhere to the DIN 1450 standard by having a slashed zero, lowercase l with a tail, and an uppercase I with serifs.[34][35] Charles Bigelow Kris Holmes humanist sans-serif Lucida Grande monospaced WGL4 x-height letterforms DIN [34] [ ] [35] [ ] In April 2018, the original logo was redesigned by brand designer Adam Smith. The new logo is a modern, stylized GO slanting right with trailing streamlines. (The Gopher mascot remained the same.[36]) [36] [ ] Generics [edit] [ edit edit ] The lack of support for generic programming in initial versions of Go drew considerable criticism.[37] The designers expressed an openness to generic programming and noted that built-in functions were in fact type-generic, but are treated as special cases; Pike called this a weakness that might be changed at some point.[38] The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it.[39] generic programming [37] [ ] [38] [ ] [39] [ ] In August 2018, the Go principal contributors published draft designs for generic programming and error handling and asked users to submit feedback.[40][41] However, the error handling proposal was eventually abandoned.[42] error handling [40] [ ] [41] [ ] [42] [ ] In June 2020, a new draft design document[43] was published that would add the necessary syntax to Go for declaring generic functions and types. A code translation tool, go2go, was provided to allow users to try the new syntax, along with a generics-enabled version of the online Go Playground.[44] [43] [ ] go2go [44] [ ] Generics were finally added to Go in version 1.18 on March 15, 2022.[45] [45] [ ] Versioning [edit] [ edit edit ] Go 1 guarantees compatibility[46] for the language specification and major parts of the standard library. All versions up through the current Go 1.23 release[47] have maintained this promise. [46] [ ] [47] [ ] Go does not follow SemVer; rather, each major Go release is supported until there are two newer major releases. Unlike most software, Go calls the second number in a version the major, i.e., in 1.x x is the major version. [48] This is because Go plans to never reach 2.0, given that compatibility is one of language's major selling points.[49] SemVer [48] [ ] [49] [ ] Design [edit] [ edit edit ] Go is influenced by C (especially the Plan 9 dialect[50][failed verification \u2013 see discussion]), but with an emphasis on greater simplicity and safety. It consists of: C Plan 9 dialect [50] [ ] failed verification failed verification see discussion A syntax and environment adopting patterns more common in dynamic languages:[51] Optional concise variable declaration and initialization through type inference (x := 0 instead of var x int = 0; or var x = 0;) Fast compilation[52] Remote package management (go get)[53] and online package documentation[54] dynamic languages [51] [ ] Optional concise variable declaration and initialization through type inference (x := 0 instead of var x int = 0; or var x = 0;) type inference x := 0 var x int = 0 ; var x = 0 ; Fast compilation[52] [52] [ ] Remote package management (go get)[53] and online package documentation[54] [53] [ ] [54] [ ] Distinctive approaches to particular problems: Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance A toolchain that, by default, produces statically linked native binaries without external Go dependencies Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement light-weight processes channels An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance interface virtual inheritance A toolchain that, by default, produces statically linked native binaries without external Go dependencies statically linked A desire to keep the language specification simple enough to hold in a programmer's head,[55] in part by omitting features that are common in similar languages. [55] [ ] omitting features that are common in similar languages Syntax [edit] [ edit edit ] Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := \"Hello, world!\", without specifying the types of variables used. This contrasts with C's int i = 3; and const char *s = \"Hello, world!\";. C i := 3 s := \"Hello, world!\" without specifying the types int i = 3 ; const char * s = \"Hello, world!\" ; Semicolons still terminate statements;[a] but are implicit when the end of a line occurs.[b] [a] [ ] [b] [ ] Methods may return multiple values, and returning a result, err pair is the conventional way a method indicates an error to its caller in Go.[c] Go adds literal syntaxes for initializing struct parameters by name and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels.[58] result , err [c] [ ] maps slices [58] [ ] fmt.Println(\"Hello World!\") is a statement. In Go, statements are separated by ending a line (hitting the Enter key) or by a semicolon \";\". Hitting the Enter key adds \";\" to the end of the line implicitly (does not show up in the source code). The left curly bracket { cannot come at the start of a line.[59] [59] [ ] Types [edit] [ edit edit ] Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), Booleans, and byte strings (string). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding/decoding.[60] Record types can be defined with the struct keyword.[61] byte int64 float32 Booleans string UTF-8 [60] [ ] Record types struct [61] [ ] For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as \"slices\", denoted []T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.[38][62][63] T n array type [n]T Dynamic arrays []T T [38] [ ] [62] [ ] [63] [ ] Pointers are available for all types, and the pointer-to-T type is denoted *T. Address-taking and indirection use the & and * operators, as in C, or happen implicitly through the method call or attribute access syntax.[64][65] There is no pointer arithmetic,[d] except via the special unsafe.Pointer type in the standard library.[66] Pointers T *T & * [64] [ ] [65] [ ] [d] [ ] unsafe.Pointer [66] [ ] For a pair of types K, V, the type map[K]V is the type mapping type-K keys to type-V values, though Go Programming Language specification does not give any performance guarantees or implementation requirements for map types. Hash tables are built into the language, with special syntax and built-in functions. chan T is a channel that allows sending values of type T between concurrent Go processes.[67] K V map[K]V K V chan T concurrent Go processes [67] [ ] Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from other named types that have the same layout (in the case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly.[68] For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers as follows: interfaces nominal type struct [68] [ ] type IPv4 type ipv4addr uint32 With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error.[69] ipv4addr(x) uint32 x x ipv4addr [69] [ ] Constant expressions may be either typed or \"untyped\"; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.[70] [70] [ ] Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error.[71] Function func parameters return func(string, int32) (int, error) string error [71] [ ] Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard: method // ZeroBroadcast reports whether addr is 255.255.255.255. func ( addr ipv4addr ) ZeroBroadcast () bool { return addr == 0xFFFFFFFF } Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type.[72] ipv4addr uint32 [72] [ ] Interface system [edit] [ edit edit ] Go provides two features that replace class inheritance.[citation needed] class inheritance citation needed citation needed The first is embedding, which can be viewed as an automated form of composition.[73] composition [73] [ ] The second are its interfaces, which provides runtime polymorphism.[74]: 266 Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. The design of Go interfaces was inspired by protocols from the Smalltalk programming language.[75] Multiple sources use the term duck typing when describing Go interfaces.[76][77] Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Because conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing.[78] interfaces runtime polymorphism [74] [ ] : 266 structural typing C++ protocols [75] [ ] duck typing [76] [ ] [77] [ ] [78] [ ] The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape, Square and Circle are defined as Shape Square and Circle import \"math\" type Shape interface { Area () float64 } type Square struct { // Note: no \"implements\" declaration side float64 } func ( sq Square ) Area () float64 { return sq . side * sq . side } type Circle struct { // No \"implements\" declaration here either radius float64 } func ( c Circle ) Area () float64 { return math . Pi * math . Pow ( c . radius , 2 ) } then both a Square and a Circle are implicitly a Shape and can be assigned to a Shape-typed variable.[74]: 263\u2013268 In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.[74]: 270 Square Circle Shape Shape [74] [ ] : 263\u2013268 structural nominal [74] [ ] : 270 The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer.[74]: 282\u2013283 Reader Writer [74] [ ] : 282\u2013283 Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion,[79] which checks against a single potential type: [79] [ ] var shp Shape = Square { 5 } square , ok := shp .( Square ) // Asserts Square type on shp, should work if ok { fmt . Printf ( \"%#v\\n\" , square ) } else { fmt . Println ( \"Can't print shape as Square\" ) } and the type switch,[80] which checks against multiple types:[citation needed] [80] [ ] citation needed citation needed func ( sq Square ) Diagonal () float64 { return sq . side * math . Sqrt2 } func ( c Circle ) Diameter () float64 { return 2 * c . radius } func LongestContainedLine ( shp Shape ) float64 { switch v := shp .( type ) { case Square : return v . Diagonal () // Or, with type assertion, shp.(Square).Diagonal() case Circle : return v . Diameter () // Or, with type assertion, shp.(Circle).Diameter() default : return 0 // In practice, this should be handled with errors } } The empty interface interface{} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int.[74]: 284 Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package.[81] Because interface{} can refer to any value, it is a limited way to escape the restrictions of static typing, like void* in C but with additional run-time type checks.[citation needed] interface {} Object Java C# int [74] [ ] : 284 interface {} [81] [ ] interface {} void * citation needed citation needed The interface{} type can be used to model structured data of any arbitrary schema in Go, such as JSON or YAML data, by representing it as a map[string]interface{} (map of string to empty interface). This recursively describes data in the form of a dictionary with string keys and values of any type.[82] interface {} JSON YAML map [ string ] interface {} [82] [ ] Interface values are implemented using pointer to data and a second pointer to run-time type information.[83] Like some other types implemented using pointers in Go, interface values are nil if uninitialized.[84] [83] [ ] [84] [ ] Generic code using parameterized types [edit] [ edit edit ] Since version 1.18, Go supports generic code using parameterized types.[85] [85] [ ] Functions and types now have the ability to be generic using type parameters. These type parameters are specified within square brackets, right after the function or type name.[86] The compiler transforms the generic function or type into non-generic by substituting type arguments for the type parameters provided, either explicitly by the user or type inference by the compiler.[87] This transformation process is referred to as type instantiation.[88] [86] [ ] [87] [ ] [88] [ ] Interfaces now can define a set of types (known as type set) using | (Union) operator, as well as a set of methods. These changes were made to support type constraints in generics code. For a generic function or type, a constraint can be thought of as the type of the type argument: a meta-type. This new ~T syntax will be the first use of ~ as a token in Go. ~T means the set of all types whose underlying type is T.[89] [89] [ ] type Number interface { ~ int | ~ float64 | ~ float32 | ~ int32 | ~ int64 } func Add [ T Number ]( nums ... T ) T { var sum T for _ , v := range nums { sum += v } return sum } func main () { add := Add [ int ] // Type instantiation println ( add ( 1 , 2 , 3 , 4 , 5 )) // 15 res := Add ( 1.1 , 2.2 , 3.3 , 4.4 , 5.5 ) // Type Inference println ( res ) // +1.650000e+001 } Enumerated types [edit] [ edit edit ] Enumerated type \u00a7 Go [edit] [ edit ] Go uses the iota keyword to create enumerated constants.[90] [90] [ ] type ByteSize float64 const ( _ = iota // ignore first value by assigning to blank identifier KB ByteSize = 1 << ( 10 * iota ) MB GB ) Package system [edit] [ edit edit ] In Go's package system, each package has a path (e.g., \"compress/bzip2\" or \"golang.org/x/net/html\") and a name (e.g., bzip2 or html). References to other packages' definitions must always be prefixed with the other package's name, and only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not.[91] The go get command can retrieve packages stored in a remote repository[92] and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.[93] [91] [ ] [92] [ ] [93] [ ] Concurrency: goroutines and channels [edit] [ edit edit ] The Go language has built-in facilities, as well as library support, for writing concurrent programs. Concurrency refers not only to CPU parallelism, but also to asynchrony: letting slow operations like a database or network read run while the program does other work, as is common in event-based servers.[94] concurrent programs asynchrony [94] [ ] The primary concurrency construct is the goroutine, a type of green thread.[95]: 280\u2013281 A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating-system threads, similar to the scheduling performed in Erlang.[96]: 10 green thread [95] [ ] : 280\u2013281 operating-system threads Erlang [96] [ ] : 10 While a standard library package featuring most of the classical concurrency control structures (mutex locks, etc.) is available,[96]: 151\u2013152 idiomatic concurrent programs instead prefer channels, which send messages between goroutines.[97] Optional buffers store messages in FIFO order[98]: 43 and allow sending goroutines to proceed before their messages are received.[95]: 233 concurrency control mutex [96] [ ] : 151\u2013152 send messages [97] [ ] FIFO [98] [ ] : 43 [95] [ ] : 233 Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T. Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch, while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch-like select statement can be used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.[99] chan T T <-ch ch ch <- x x switch select below [99] [ ] The existence of channels does not by itself set Go apart from actor model-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). In the actor model, channels are themselves actors, therefore addressing a channel just means to address an actor. The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.[96]: 147 actor model [96] [ ] : 147 From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, \"fan-out\" parallel calls to a set of services, and others.[100] Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,[101] implementing coroutines (which helped inspire the name goroutine),[102] and implementing iterators.[103] [100] [ ] [101] [ ] coroutines [102] [ ] iterators [103] [ ] Concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked),[104] Go does not provide any built-in notion of safe or verifiable concurrency.[105] While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see \u00a7 Lack of data race safety, below. channels Tony Hoare's communicating sequential processes Occam Limbo [104] [ ] [105] [ ] \u00a7 Lack of data race safety Suitability for parallel programming [edit] [ edit edit ] Although Go's concurrency features are not aimed primarily at parallel processing,[94] they can be used to program shared-memory multi-processor machines. Various studies have been done into the effectiveness of this approach.[106] One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor core. The expert's programs were usually faster, but also longer.[107] parallel processing [94] [ ] shared-memory multi-processor [106] [ ] lines of code Chapel Cilk Intel TBB divide-and-conquer go [107] [ ] Lack of data race safety [edit] [ edit edit ] Go's approach to concurrency can be summarized as \"don't communicate by sharing memory; share memory by communicating\".[108] There are no restrictions on how goroutines access shared data, making data races possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.[105] Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to data races, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.[109][110] Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called \"aliases xor mutable\", meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.[96]: 155 The gc toolchain has an optional data race detector that can check for unsynchronized access to shared memory during runtime since version 1.1,[111] additionally a best-effort race detector is also included by default since version 1.6 of the gc runtime for access to the map data type.[112] [108] [ ] data races [105] [ ] [109] [ ] [110] [ ] xor [96] [ ] : 155 [111] [ ] [112] [ ] Binaries [edit] [ edit edit ] The linker in the gc toolchain creates statically linked binaries by default; therefore all Go binaries include the Go runtime.[113][114] [113] [ ] [114] [ ] Omissions [edit] [ edit edit ] Go deliberately omits certain features common in other languages, including (implementation) inheritance, assertions,[e] pointer arithmetic,[d] implicit type conversions, untagged unions,[f] and tagged unions.[g] The designers added only those facilities that all three agreed on.[117] (implementation) inheritance assertions [e] [ ] pointer arithmetic [d] [ ] implicit type conversions untagged unions [f] [ ] tagged unions [g] [ ] [117] [ ] Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch[h] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature \"has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static\", making it \"not obvious\" whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance.[73] interfaces dynamic dispatch [h] [ ] composition delegation struct [73] [ ] Exception handling was initially omitted in Go due to lack of a \"design that gives value proportionate to the complexity\".[118] An exception-like panic/recover mechanism that avoids the usual try-catch control structure was proposed[119] and released in the March 30, 2010 snapshot.[120] The Go authors advise using it for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package.[121][122] Across package boundaries, Go includes a canonical error type, and multi-value returns using this type are the standard idiom.[4] Exception handling [118] [ ] panic recover [119] [ ] [120] [ ] [121] [ ] [122] [ ] [4] [ ] Style [edit] [ edit edit ] The Go authors put substantial effort into influencing the style of Go programs: Indentation, spacing, and other surface-level details of code are automatically standardized by the gofmt tool. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font.[123] golint does additional style checks automatically, but has been deprecated and archived by the Go maintainers.[124] [123] [ ] [124] [ ] Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc),[125] testing (go test), building (go build), package management (go get), and so on. [125] [ ] Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables[126] or imports,[127] and implicit type conversions. [126] [ ] [127] [ ] The omission of certain features (for example, functional-programming shortcuts like map and Java-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style. On day one the Go team published a collection of Go idioms,[125] and later also collected code review comments,[128] talks,[129] and official blog posts[130] to teach Go style and coding philosophy. [125] [ ] [128] [ ] [129] [ ] [130] [ ] Tools [edit] [ edit edit ] The main Go distribution includes tools for building, testing, and analyzing code: building testing analyzing go build, which builds Go binaries using only information in the source files themselves, no separate makefiles go test, for unit testing and microbenchmarks as well as fuzzing go fmt, for formatting code go install, for retrieving and installing remote packages go vet, a static analyzer looking for potential errors in code go run, a shortcut for building and executing code godoc, for displaying documentation or serving it via HTTP gorename, for renaming variables, functions, and so on in a type-safe way go generate, a standard way to invoke code generators go mod, for creating a new module, adding dependencies, upgrading dependencies, etc. It also includes profiling and debugging support, fuzzing capabilities to detect bugs, runtime instrumentation (for example, to track garbage collection pauses), and a data race detector. profiling debugging fuzzing runtime garbage collection data race Another tool maintained by the Go team but is not included in Go distributions is gopls, a language server that provides IDE features such as intelligent code completion to Language Server Protocol compatible editors.[131] IDE intelligent code completion Language Server Protocol [131] [ ] An ecosystem of third-party tools adds to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports, which automatically adds/removes package imports as needed, and errcheck, which detects code that might unintentionally ignore errors. Examples [edit] [ edit edit ] Hello world [edit] [ edit edit ] package main import \"fmt\" func main () { fmt . Println ( \"hello world\" ) } where \"fmt\" is the package for formatted I/O, similar to C's C file input/output.[132] I/O C file input/output [132] [ ] Concurrency [edit] [ edit edit ] The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads (\"goroutines\"): one waits for the user to type some text, while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall's book).[96]: 152 concurrency features select [96] [ ] : 152 package main import ( \"fmt\" \"time\" ) func readword ( ch chan string ) { fmt . Println ( \"Type a word, then hit Enter.\" ) var word string fmt . Scanf ( \"%s\" , & word ) ch <- word } func timeout ( t chan bool ) { time . Sleep ( 5 * time . Second ) t <- false } func main () { t := make ( chan bool ) go timeout ( t ) ch := make ( chan string ) go readword ( ch ) select { case word := <- ch : fmt . Println ( \"Received\" , word ) case <- t : fmt . Println ( \"Timeout.\" ) } } Testing [edit] [ edit edit ] The testing package provides support for automated testing of go packages.[133] Target function example: [133] [ ] func ExtractUsername ( email string ) string { at := strings . Index ( email , \"@\" ) return email [: at ] } Test code (note that assert keyword is missing in Go; tests live in <filename>_test.go at the same package): import ( \"testing\" ) func TestExtractUsername ( t * testing . T ) { t . Run ( \"withoutDot\" , func ( t * testing . T ) { username := ExtractUsername ( \"r@google.com\" ) if username != \"r\" { t . Fatalf ( \"Got: %v\\n\" , username ) } }) t . Run ( \"withDot\" , func ( t * testing . T ) { username := ExtractUsername ( \"jonh.smith@example.com\" ) if username != \"jonh.smith\" { t . Fatalf ( \"Got: %v\\n\" , username ) } }) } It is possible to run tests in parallel. Web app [edit] [ edit edit ] The net/http[134] package provides support for creating web applications. net/http [134] [ ] This example would show \"Hello world!\" when localhost:8080 is visited. package main import ( \"fmt\" \"log\" \"net/http\" ) func helloFunc ( w http . ResponseWriter , r * http . Request ) { fmt . Fprintf ( w , \"Hello world!\" ) } func main () { http . HandleFunc ( \"/\" , helloFunc ) log . Fatal ( http . ListenAndServe ( \":8080\" , nil )) } Applications [edit] [ edit edit ] Go has found widespread adoption in various domains due to its robust standard library and ease of use.[135] [135] [ ] Popular applications include: Caddy, a web server that automates the process of setting up HTTPS,[136] Docker, which provides a platform for containerization, aiming to ease the complexities of software development and deployment,[137] Kubernetes, which automates the deployment, scaling, and management of containerized applications,[138] CockroachDB, a distributed SQL database engineered for scalability and strong consistency,[139] and Hugo, a static site generator that prioritizes speed and flexibility, allowing developers to create websites efficiently.[140] Caddy [136] [ ] Docker [137] [ ] Kubernetes [138] [ ] CockroachDB [139] [ ] Hugo [140] [ ] Reception [edit] [ edit edit ] The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML, calling it \"a shame that no popular language has followed [this] particular route\".[141] Standard ML [141] [ ] Dave Astels at Engine Yard wrote in 2009:[142] Engine Yard [142] [ ] Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous. Go is still experimental and still a little rough around the edges. syntax Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010,[143] surpassing established languages like Pascal. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran.[144] But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was again awarded TIOBE Programming Language of the Year in 2016.[145] TIOBE Programming Community Index [143] [ ] Pascal COBOL Fortran [144] [ ] [145] [ ] Bruce Eckel has stated:[146] Bruce Eckel [146] [ ] The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve. C++ A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found: gc GCC Scala Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes. [147] [ ] The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was \"never intended to be an example of idiomatic or efficient Go\"; Russ Cox then optimized the Go code, as well as the C++ code, and got the Go code to run almost as fast as the C++ version and more than an order of magnitude faster than the code in the paper.[148] [148] [ ] Go's nil combined with the lack of algebraic types leads to difficulty handling failures and base cases.[149][150] nil algebraic types base cases [149] [ ] [150] [ ] Go does not allow an opening brace to appear on its own line, which forces all Go programmers to use the same brace style.[151] [151] [ ] Go has been criticized for focusing on simplicity of implementation rather than correctness and flexibility; as an example, the language uses POSIX file semantics on all platforms, and therefore provides incorrect information on platforms such as Windows (which do not follow the aforementioned standard).[152][153] POSIX Windows [152] [ ] [153] [ ] A study showed that it is as easy to make concurrency bugs with message passing as with shared memory, sometimes even more.[154] [154] [ ] Naming dispute [edit] [ edit edit ] On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing.[155] McCabe raised concerns that \"the 'big guy' will end up steam-rollering over\" him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some[156] even saying the issue contradicts Google's motto of: Don't be evil.[157] Go! programming language [155] [ ] [156] [ ] Don't be evil [157] [ ] On October 12, 2010, the filed public issue ticket was closed by Google developer Russ Cox (@rsc) with the custom status \"Unfortunate\" accompanied by the following comment: \"There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages.\"[157] [157] [ ] See also [edit] [ edit edit ] Free and open-source software portal Free and open-source software portal Free and open-source software portal Fat pointer Fat pointer Comparison of programming languages Comparison of programming languages Notes [edit] [ edit edit ] ^ But \"To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }\".[56] ^ ^ But \"To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }\".[56] [56] [ ] ^ \"if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon\".[57] ^ ^ \"if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon\".[57] [57] [ ] ^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate problem: Multivalued return. ^ ^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate problem: Multivalued return. Semipredicate problem: Multivalued return ^ a b Language FAQ \"Why is there no pointer arithmetic? Safety ... never derive an illegal address that succeeds incorrectly ... using array indices can be as efficient as ... pointer arithmetic ... simplify the implementation of the garbage collector....\"[4] ^ a b a b Language FAQ \"Why is there no pointer arithmetic? Safety ... never derive an illegal address that succeeds incorrectly ... using array indices can be as efficient as ... pointer arithmetic ... simplify the implementation of the garbage collector....\"[4] [4] [ ] ^ Language FAQ \"Why does Go not have assertions? ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting....\"[4] ^ ^ Language FAQ \"Why does Go not have assertions? ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting....\"[4] [4] [ ] ^ Language FAQ \"Why are there no untagged unions...? [they] would violate Go's memory safety guarantees.\"[4] ^ ^ Language FAQ \"Why are there no untagged unions...? [they] would violate Go's memory safety guarantees.\"[4] [4] [ ] ^ Language FAQ \"Why does Go not have variant types? ... We considered [them but] they overlap in confusing ways with interfaces.... [S]ome of what variant types address is already covered, ... although not as elegantly.\"[4] (The tag of an interface type[115] is accessed with a type assertion[116]). ^ ^ Language FAQ \"Why does Go not have variant types? ... We considered [them but] they overlap in confusing ways with interfaces.... [S]ome of what variant types address is already covered, ... although not as elegantly.\"[4] (The tag of an interface type[115] is accessed with a type assertion[116]). [4] [ ] [115] [ ] [116] [ ] ^ Questions \"How do I get dynamic dispatch of methods?\" and \"Why is there no type inheritance?\" in the language FAQ.[4] ^ ^ Questions \"How do I get dynamic dispatch of methods?\" and \"Why is there no type inheritance?\" in the language FAQ.[4] [4] [ ] References [edit] [ edit edit ] official Go tutorial ^ \"Codewalk: First-Class Functions in Go\". Go supports first class functions, higher-order functions, user-defined function types, function literals, closures, and multiple return values. This rich feature set supports a functional programming style in a strongly typed language. ^ ^ \"Codewalk: First-Class Functions in Go\". Go supports first class functions, higher-order functions, user-defined function types, function literals, closures, and multiple return values. This rich feature set supports a functional programming style in a strongly typed language. \"Codewalk: First-Class Functions in Go\" ^ \"Is Go an object-oriented language?\". Retrieved April 13, 2019. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. ^ ^ \"Is Go an object-oriented language?\". Retrieved April 13, 2019. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. \"Is Go an object-oriented language?\" . Retrieved April 13, 2019 April 13, ^ \"Go: code that grows with grace\". Retrieved June 24, 2018. Go is Object Oriented, but not in the usual way. ^ ^ \"Go: code that grows with grace\". Retrieved June 24, 2018. Go is Object Oriented, but not in the usual way. \"Go: code that grows with grace\" . Retrieved June 24, 2018 June 24, ^ a b c d e f g h \"Language Design FAQ\". The Go Programming Language. January 16, 2010. Retrieved February 27, 2010. ^ a b c d e f g h a b c d e f g h \"Language Design FAQ\". The Go Programming Language. January 16, 2010. Retrieved February 27, 2010. \"Language Design FAQ\" . Retrieved February 27, 2010 February 27, ^ a b \"Text file LICENSE\". The Go Programming Language. Retrieved October 5, 2012. ^ a b a b \"Text file LICENSE\". The Go Programming Language. Retrieved October 5, 2012. \"Text file LICENSE\" . Retrieved October 5, 2012 October 5, ^ \"The Go Programming Language Specification - the Go Programming Language\". ^ ^ \"The Go Programming Language Specification - the Go Programming Language\". \"The Go Programming Language Specification - the Go Programming Language\" ^ a b \"Why doesn't Go have \"implements\" declarations?\". The Go Programming Language. Retrieved October 1, 2015. ^ a b a b \"Why doesn't Go have \"implements\" declarations?\". The Go Programming Language. Retrieved October 1, 2015. \"Why doesn't Go have \"implements\" declarations?\" . Retrieved October 1, 2015 October 1, ^ Pike, Rob (December 22, 2014). \"Rob Pike on Twitter\". Archived from the original on April 7, 2022. Retrieved March 13, 2016. Go has structural typing, not duck typing. Full interface satisfaction is checked and required. ^ ^ Pike, Rob (December 22, 2014). \"Rob Pike on Twitter\". Archived from the original on April 7, 2022. Retrieved March 13, 2016. Go has structural typing, not duck typing. Full interface satisfaction is checked and required. \"Rob Pike on Twitter\" the original . Retrieved March 13, 2016 March 13, ^ \"lang/go: go-1.4\". OpenBSD ports. December 23, 2014. Retrieved January 19, 2015. ^ ^ \"lang/go: go-1.4\". OpenBSD ports. December 23, 2014. Retrieved January 19, 2015. \"lang/go: go-1.4\" . Retrieved January 19, 2015 January 19, ^ \"Go Porting Efforts\". Go Language Resources. cat-v. January 12, 2010. Retrieved January 18, 2010. ^ ^ \"Go Porting Efforts\". Go Language Resources. cat-v. January 12, 2010. Retrieved January 18, 2010. \"Go Porting Efforts\" . Retrieved January 18, 2010 January 18, ^ \"Additional IP Rights Grant\". The Go Programming Language. Retrieved October 5, 2012. ^ ^ \"Additional IP Rights Grant\". The Go Programming Language. Retrieved October 5, 2012. \"Additional IP Rights Grant\" . Retrieved October 5, 2012 October 5, ^ \"Go Introduction\". www.w3schools.com. Retrieved November 23, 2024. ^ ^ \"Go Introduction\". www.w3schools.com. Retrieved November 23, 2024. \"Go Introduction\" . Retrieved November 23, 2024 November 23, ^ \"Go Introduction\". www.w3schools.com. Retrieved November 23, 2024. ^ ^ \"Go Introduction\". www.w3schools.com. Retrieved November 23, 2024. \"Go Introduction\" . Retrieved November 23, 2024 November 23, ^ Kincaid, Jason (November 10, 2009). \"Google's Go: A New Programming Language That's Python Meets C++\". TechCrunch. Retrieved January 18, 2010. ^ ^ Kincaid, Jason (November 10, 2009). \"Google's Go: A New Programming Language That's Python Meets C++\". TechCrunch. Retrieved January 18, 2010. \"Google's Go: A New Programming Language That's Python Meets C++\" . Retrieved January 18, 2010 January 18, ^ Metz, Cade (May 5, 2011). \"Google Go boldly goes where no code has gone before\". The Register. ^ ^ Metz, Cade (May 5, 2011). \"Google Go boldly goes where no code has gone before\". The Register. \"Google Go boldly goes where no code has gone before\" ^ \"Is the language called Go or Golang?\". Retrieved March 16, 2022. The language is called Go. ^ ^ \"Is the language called Go or Golang?\". Retrieved March 16, 2022. The language is called Go. \"Is the language called Go or Golang?\" . Retrieved March 16, 2022 March 16, ^ \"Go 1.5 Release Notes\". Retrieved January 28, 2016. The compiler and runtime are now implemented in Go and assembler, without C. ^ ^ \"Go 1.5 Release Notes\". Retrieved January 28, 2016. The compiler and runtime are now implemented in Go and assembler, without C. \"Go 1.5 Release Notes\" . Retrieved January 28, 2016 January 28, ^ \"The Go programming language\". Retrieved November 1, 2024. ^ ^ \"The Go programming language\". Retrieved November 1, 2024. \"The Go programming language\" . Retrieved November 1, 2024 November 1, ^ \"gofrontend\". Retrieved November 1, 2024. ^ ^ \"gofrontend\". Retrieved November 1, 2024. \"gofrontend\" . Retrieved November 1, 2024 November 1, ^ \"gccgo\". Retrieved November 1, 2024. gccgo, the GNU compiler for the Go programming language ^ ^ \"gccgo\". Retrieved November 1, 2024. gccgo, the GNU compiler for the Go programming language \"gccgo\" . Retrieved November 1, 2024 November 1, ^ \"Gollvm\". Retrieved November 1, 2024. Gollvm is an LLVM-based Go compiler. ^ ^ \"Gollvm\". Retrieved November 1, 2024. Gollvm is an LLVM-based Go compiler. \"Gollvm\" . Retrieved November 1, 2024 November 1, ^ \"A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs\". GitHub. Archived from the original on December 12, 2023. ^ ^ \"A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs\". GitHub. Archived from the original on December 12, 2023. \"A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs\" GitHub Archived ^ \"Go at Google: Language Design in the Service of Software Engineering\". Retrieved October 8, 2018. ^ ^ \"Go at Google: Language Design in the Service of Software Engineering\". Retrieved October 8, 2018. \"Go at Google: Language Design in the Service of Software Engineering\" . Retrieved October 8, 2018 October 8, ^ Pike, Rob (April 28, 2010). \"Another Go at Language Design\". Stanford EE Computer Systems Colloquium. Stanford University. Video available. ^ ^ Pike, Rob (April 28, 2010). \"Another Go at Language Design\". Stanford EE Computer Systems Colloquium. Stanford University. Video available. \"Another Go at Language Design\" Stanford University Video available ^ \"Frequently Asked Questions (FAQ) - The Go Programming Language\". The Go Programming Language. Retrieved February 26, 2016. ^ ^ \"Frequently Asked Questions (FAQ) - The Go Programming Language\". The Go Programming Language. Retrieved February 26, 2016. \"Frequently Asked Questions (FAQ) - The Go Programming Language\" . Retrieved February 26, 2016 February 26, ^ Binstock, Andrew (May 18, 2011). \"Dr. Dobb's: Interview with Ken Thompson\". Archived from the original on January 5, 2013. Retrieved February 7, 2014. ^ ^ Binstock, Andrew (May 18, 2011). \"Dr. Dobb's: Interview with Ken Thompson\". Archived from the original on January 5, 2013. Retrieved February 7, 2014. \"Dr. Dobb's: Interview with Ken Thompson\" the original . Retrieved February 7, 2014 February 7, ^ Pike, Rob (2012). \"Less is exponentially more\". ^ ^ Pike, Rob (2012). \"Less is exponentially more\". \"Less is exponentially more\" ^ Griesemer, Robert (2015). \"The Evolution of Go\". ^ ^ Griesemer, Robert (2015). \"The Evolution of Go\". \"The Evolution of Go\" ^ Griesemer, Robert; Pike, Rob; Thompson, Ken; Taylor, Ian; Cox, Russ; Kim, Jini; Langley, Adam. \"Hey! Ho! Let's Go!\". Google Open Source. Retrieved May 17, 2018. ^ ^ Griesemer, Robert; Pike, Rob; Thompson, Ken; Taylor, Ian; Cox, Russ; Kim, Jini; Langley, Adam. \"Hey! Ho! Let's Go!\". Google Open Source. Retrieved May 17, 2018. \"Hey! Ho! Let's Go!\" . Retrieved May 17, 2018 May 17, ^ Shankland, Stephen (March 30, 2012). \"Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google\". News. CNet. CBS Interactive Inc. Retrieved August 6, 2017. Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++. ^ ^ Shankland, Stephen (March 30, 2012). \"Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google\". News. CNet. CBS Interactive Inc. Retrieved August 6, 2017. Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++. \"Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google\" . Retrieved August 6, 2017 August 6, ^ \"Release History\". The Go Programming Language. ^ ^ \"Release History\". The Go Programming Language. \"Release History\" ^ \"Go FAQ: Is Google using Go internally?\". Retrieved March 9, 2013. ^ ^ \"Go FAQ: Is Google using Go internally?\". Retrieved March 9, 2013. \"Go FAQ: Is Google using Go internally?\" . Retrieved March 9, 2013 March 9, ^ \"The Go Gopher - The Go Programming Language\". go.dev. Retrieved February 9, 2023. ^ ^ \"The Go Gopher - The Go Programming Language\". go.dev. Retrieved February 9, 2023. \"The Go Gopher - The Go Programming Language\" . Retrieved February 9, 2023 February 9, ^ \"Go fonts\". Go. November 16, 2016. Retrieved March 12, 2019. ^ ^ \"Go fonts\". Go. November 16, 2016. Retrieved March 12, 2019. \"Go fonts\" . Retrieved March 12, 2019 March 12, ^ \"Go Font TTFs\". GitHub. Retrieved April 2, 2019. ^ ^ \"Go Font TTFs\". GitHub. Retrieved April 2, 2019. \"Go Font TTFs\" . Retrieved April 2, 2019 April 2, ^ \"Go's New Brand\". The Go Blog. Retrieved November 9, 2018. ^ ^ \"Go's New Brand\". The Go Blog. Retrieved November 9, 2018. \"Go's New Brand\" . Retrieved November 9, 2018 November 9, ^ Merrick, Alice (March 9, 2021). \"Go Developer Survey 2020 Results\". Go Programming Language. Retrieved March 16, 2022. ^ ^ Merrick, Alice (March 9, 2021). \"Go Developer Survey 2020 Results\". Go Programming Language. Retrieved March 16, 2022. \"Go Developer Survey 2020 Results\" . Retrieved March 16, 2022 March 16, ^ a b Pike, Rob (September 26, 2013). \"Arrays, slices (and strings): The mechanics of 'append'\". The Go Blog. Retrieved March 7, 2015. ^ a b a b Pike, Rob (September 26, 2013). \"Arrays, slices (and strings): The mechanics of 'append'\". The Go Blog. Retrieved March 7, 2015. \"Arrays, slices (and strings): The mechanics of 'append'\" . Retrieved March 7, 2015 March 7, ^ \"E2E: Erik Meijer and Robert Griesemer\". Channel 9. Microsoft. May 7, 2012. ^ ^ \"E2E: Erik Meijer and Robert Griesemer\". Channel 9. Microsoft. May 7, 2012. \"E2E: Erik Meijer and Robert Griesemer\" ^ \"Go 2 Draft Designs\". Retrieved September 12, 2018. ^ ^ \"Go 2 Draft Designs\". Retrieved September 12, 2018. \"Go 2 Draft Designs\" . Retrieved September 12, 2018 September 12, ^ \"The Go Blog: Go 2 Draft Designs\". August 28, 2018. ^ ^ \"The Go Blog: Go 2 Draft Designs\". August 28, 2018. \"The Go Blog: Go 2 Draft Designs\" ^ \"Proposal: A built-in Go error check function, \"try\"\". Go repository on GitHub. Retrieved March 16, 2022. ^ ^ \"Proposal: A built-in Go error check function, \"try\"\". Go repository on GitHub. Retrieved March 16, 2022. \"Proposal: A built-in Go error check function, \"try\"\" . Retrieved March 16, 2022 March 16, ^ \"Type Parameters \u2014 Draft Design\". go.googlesource.com. ^ ^ \"Type Parameters \u2014 Draft Design\". go.googlesource.com. \"Type Parameters \u2014 Draft Design\" ^ \"Generics in Go\". bitfieldconsulting.com. December 17, 2021. ^ ^ \"Generics in Go\". bitfieldconsulting.com. December 17, 2021. \"Generics in Go\" ^ \"Go 1.18 is released!\". Go Programming Language. March 15, 2022. Retrieved March 16, 2022. ^ ^ \"Go 1.18 is released!\". Go Programming Language. March 15, 2022. Retrieved March 16, 2022. \"Go 1.18 is released!\" . Retrieved March 16, 2022 March 16, ^ \"Go 1 and the Future of Go Programs\". The Go Programming Language. ^ ^ \"Go 1 and the Future of Go Programs\". The Go Programming Language. \"Go 1 and the Future of Go Programs\" ^ \"Go 1.23 Release Notes\". The Go Programming Language. ^ ^ \"Go 1.23 Release Notes\". The Go Programming Language. \"Go 1.23 Release Notes\" ^ \"Release History\". The Go Programming Language. ^ ^ \"Release History\". The Go Programming Language. \"Release History\" ^ \"Backward Compatibility, Go 1.21, and Go 2\". The Go Programming Language. ^ ^ \"Backward Compatibility, Go 1.21, and Go 2\". The Go Programming Language. \"Backward Compatibility, Go 1.21, and Go 2\" ^ \"A Quick Guide to Go's Assembler\". go.dev. Retrieved December 31, 2021. ^ ^ \"A Quick Guide to Go's Assembler\". go.dev. Retrieved December 31, 2021. \"A Quick Guide to Go's Assembler\" . Retrieved December 31, 2021 December 31, ^ Pike, Rob. \"The Go Programming Language\". YouTube. Retrieved July 1, 2011. ^ ^ Pike, Rob. \"The Go Programming Language\". YouTube. Retrieved July 1, 2011. \"The Go Programming Language\" . Retrieved July 1, 2011 July 1, ^ Pike, Rob (November 10, 2009). The Go Programming Language (flv) (Tech talk). Google. Event occurs at 8:53. ^ ^ Pike, Rob (November 10, 2009). The Go Programming Language (flv) (Tech talk). Google. Event occurs at 8:53. The Go Programming Language (flv) ^ \"Download and install packages and dependencies\". See godoc.org for addresses and documentation of some packages. ^ ^ \"Download and install packages and dependencies\". See godoc.org for addresses and documentation of some packages. \"Download and install packages and dependencies\" godoc.org ^ \"GoDoc\". godoc.org. ^ ^ \"GoDoc\". godoc.org. \"GoDoc\" ^ Pike, Rob. \"The Changelog\" (Podcast). Archived from the original on October 20, 2013. Retrieved October 7, 2013. ^ ^ Pike, Rob. \"The Changelog\" (Podcast). Archived from the original on October 20, 2013. Retrieved October 7, 2013. \"The Changelog\" the original . Retrieved October 7, 2013 October 7, ^ \"Go Programming Language Specification, \u00a7Semicolons\". The Go Programming Language. ^ ^ \"Go Programming Language Specification, \u00a7Semicolons\". The Go Programming Language. \"Go Programming Language Specification, \u00a7Semicolons\" ^ \"Effective Go, \u00a7Semicolons\". The Go Programming Language. ^ ^ \"Effective Go, \u00a7Semicolons\". The Go Programming Language. \"Effective Go, \u00a7Semicolons\" ^ \"The Go Programming Language Specification\". The Go Programming Language. ^ ^ \"The Go Programming Language Specification\". The Go Programming Language. \"The Go Programming Language Specification\" ^ \"Go Syntax\". www.w3schools.com. Retrieved November 23, 2024. ^ ^ \"Go Syntax\". www.w3schools.com. Retrieved November 23, 2024. \"Go Syntax\" . Retrieved November 23, 2024 November 23, ^ Pike, Rob (October 23, 2013). \"Strings, bytes, runes and characters in Go\". ^ ^ Pike, Rob (October 23, 2013). \"Strings, bytes, runes and characters in Go\". \"Strings, bytes, runes and characters in Go\" ^ Doxsey, Caleb. \"Structs and Interfaces \u2014 An Introduction to Programming in Go\". www.golang-book.com. Retrieved October 15, 2018. ^ ^ Doxsey, Caleb. \"Structs and Interfaces \u2014 An Introduction to Programming in Go\". www.golang-book.com. Retrieved October 15, 2018. \"Structs and Interfaces \u2014 An Introduction to Programming in Go\" . Retrieved October 15, 2018 October 15, ^ Gerrand, Andrew. \"Go Slices: usage and internals\". ^ ^ Gerrand, Andrew. \"Go Slices: usage and internals\". \"Go Slices: usage and internals\" ^ The Go Authors. \"Effective Go: Slices\". ^ ^ The Go Authors. \"Effective Go: Slices\". \"Effective Go: Slices\" ^ The Go authors. \"Selectors\". ^ ^ The Go authors. \"Selectors\". \"Selectors\" ^ The Go authors. \"Calls\". ^ ^ The Go authors. \"Calls\". \"Calls\" ^ \"Go Programming Language Specification, \u00a7Package unsafe\". The Go Programming Language. ^ ^ \"Go Programming Language Specification, \u00a7Package unsafe\". The Go Programming Language. \"Go Programming Language Specification, \u00a7Package unsafe\" ^ \"The Go Programming Language Specification\". go.dev. Retrieved December 31, 2021. ^ ^ \"The Go Programming Language Specification\". go.dev. Retrieved December 31, 2021. \"The Go Programming Language Specification\" . Retrieved December 31, 2021 December 31, ^ \"The Go Programming Language Specification\". The Go Programming Language. ^ ^ \"The Go Programming Language Specification\". The Go Programming Language. \"The Go Programming Language Specification\" ^ \"A tour of go\". go.dev. ^ ^ \"A tour of go\". go.dev. \"A tour of go\" ^ \"The Go Programming Language Specification\". The Go Programming Language. ^ ^ \"The Go Programming Language Specification\". The Go Programming Language. \"The Go Programming Language Specification\" ^ \"The Go Programming Language Specification\". go.dev. Retrieved December 31, 2021. ^ ^ \"The Go Programming Language Specification\". go.dev. Retrieved December 31, 2021. \"The Go Programming Language Specification\" . Retrieved December 31, 2021 December 31, ^ \"The Go Programming Language Specification\". The Go Programming Language. ^ ^ \"The Go Programming Language Specification\". The Go Programming Language. \"The Go Programming Language Specification\" ^ a b Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM. ^ a b a b Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM. ^ a b c d e Balbaert, Ivo (2012). The Way to Go: A Thorough Introduction to the Go Programming Language. iUniverse. ^ a b c d e a b c d e Balbaert, Ivo (2012). The Way to Go: A Thorough Introduction to the Go Programming Language. iUniverse. ^ \"The Evolution of Go\". talks.golang.org. Retrieved March 13, 2016. ^ ^ \"The Evolution of Go\". talks.golang.org. Retrieved March 13, 2016. \"The Evolution of Go\" . Retrieved March 13, 2016 March 13, ^ Diggins, Christopher (November 24, 2009). \"Duck Typing and the Go Programming Language\". Dr. Dobb's, The world of software development. Retrieved March 10, 2016. ^ ^ Diggins, Christopher (November 24, 2009). \"Duck Typing and the Go Programming Language\". Dr. Dobb's, The world of software development. Retrieved March 10, 2016. \"Duck Typing and the Go Programming Language\" . Retrieved March 10, 2016 March 10, ^ Ryer, Mat (December 1, 2015). \"Duck typing in Go\". Retrieved March 10, 2016. ^ ^ Ryer, Mat (December 1, 2015). \"Duck typing in Go\". Retrieved March 10, 2016. \"Duck typing in Go\" . Retrieved March 10, 2016 March 10, ^ \"Frequently Asked Questions (FAQ) - The Go Programming Language\". The Go Programming Language. ^ ^ \"Frequently Asked Questions (FAQ) - The Go Programming Language\". The Go Programming Language. \"Frequently Asked Questions (FAQ) - The Go Programming Language\" ^ \"The Go Programming Language Specification\". The Go Programming Language. ^ ^ \"The Go Programming Language Specification\". The Go Programming Language. \"The Go Programming Language Specification\" ^ \"The Go Programming Language Specification\". The Go Programming Language. ^ ^ \"The Go Programming Language Specification\". The Go Programming Language. \"The Go Programming Language Specification\" ^ \"reflect package\". pkg.go.dev. ^ ^ \"reflect package\". pkg.go.dev. \"reflect package\" ^ \"map[string]interface{} in Go\". bitfieldconsulting.com. June 6, 2020. ^ ^ \"map[string]interface{} in Go\". bitfieldconsulting.com. June 6, 2020. \"map[string]interface{} in Go\" ^ \"Go Data Structures: Interfaces\". Retrieved November 15, 2012. ^ ^ \"Go Data Structures: Interfaces\". Retrieved November 15, 2012. \"Go Data Structures: Interfaces\" . Retrieved November 15, 2012 November 15, ^ \"The Go Programming Language Specification\". The Go Programming Language. ^ ^ \"The Go Programming Language Specification\". The Go Programming Language. \"The Go Programming Language Specification\" ^ \"Go 1.18 Release Notes: Generics\". Go Programming Language. March 15, 2022. Retrieved March 16, 2022. ^ ^ \"Go 1.18 Release Notes: Generics\". Go Programming Language. March 15, 2022. Retrieved March 16, 2022. \"Go 1.18 Release Notes: Generics\" . Retrieved March 16, 2022 March 16, ^ \"Type Parameters Proposal\". go.googlesource.com. Retrieved June 25, 2023. ^ ^ \"Type Parameters Proposal\". go.googlesource.com. Retrieved June 25, 2023. \"Type Parameters Proposal\" . Retrieved June 25, 2023 June 25, ^ \"The Go Programming Language Specification - The Go Programming Language\". go.dev. Retrieved June 25, 2023. ^ ^ \"The Go Programming Language Specification - The Go Programming Language\". go.dev. Retrieved June 25, 2023. \"The Go Programming Language Specification - The Go Programming Language\" . Retrieved June 25, 2023 June 25, ^ \"An Introduction To Generics - The Go Programming Language\". go.dev. Retrieved June 25, 2023. ^ ^ \"An Introduction To Generics - The Go Programming Language\". go.dev. Retrieved June 25, 2023. \"An Introduction To Generics - The Go Programming Language\" . Retrieved June 25, 2023 June 25, ^ \"Type Parameters Proposal\". go.googlesource.com. Retrieved June 25, 2023. ^ ^ \"Type Parameters Proposal\". go.googlesource.com. Retrieved June 25, 2023. \"Type Parameters Proposal\" . Retrieved June 25, 2023 June 25, ^ \"Effective Go\". golang.org. The Go Authors. Retrieved May 13, 2014. ^ ^ \"Effective Go\". golang.org. The Go Authors. Retrieved May 13, 2014. \"Effective Go\" . Retrieved May 13, 2014 May 13, ^ \"A Tutorial for the Go Programming Language\". The Go Programming Language. Retrieved March 10, 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared. ^ ^ \"A Tutorial for the Go Programming Language\". The Go Programming Language. Retrieved March 10, 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared. \"A Tutorial for the Go Programming Language\" . Retrieved March 10, 2013 March 10, ^ \"go\". The Go Programming Language. ^ ^ \"go\". The Go Programming Language. \"go\" ^ \"How to Write Go Code\". The Go Programming Language. The packages from the standard library are given short import paths such as \"fmt\" and \"net/http\". For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have an Example account at example.com/user, that should be your base path ^ ^ \"How to Write Go Code\". The Go Programming Language. The packages from the standard library are given short import paths such as \"fmt\" and \"net/http\". For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have an Example account at example.com/user, that should be your base path \"How to Write Go Code\" ^ a b Pike, Rob (September 18, 2012). \"Concurrency is not Parallelism\". ^ a b a b Pike, Rob (September 18, 2012). \"Concurrency is not Parallelism\". \"Concurrency is not Parallelism\" ^ a b Donovan, Alan A. A.; Kernighan, Brian W. (2016). The Go programming language. Addison-Wesley professional computing series. New York, Munich: Addison-Wesley. ISBN 978-0-13-419044-0. ^ a b a b Donovan, Alan A. A.; Kernighan, Brian W. (2016). The Go programming language. Addison-Wesley professional computing series. New York, Munich: Addison-Wesley. ISBN 978-0-13-419044-0. ISBN 978-0-13-419044-0 ^ a b c d e Chisnall, David (2012). The Go Programming Language Phrasebook. Addison-Wesley. ISBN 9780132919005. ^ a b c d e a b c d e Chisnall, David (2012). The Go Programming Language Phrasebook. Addison-Wesley. ISBN 9780132919005. The Go Programming Language Phrasebook ISBN 9780132919005 ^ \"Effective Go\". The Go Programming Language. ^ ^ \"Effective Go\". The Go Programming Language. \"Effective Go\" ^ Summerfield, Mark (2012). Programming in Go: Creating Applications for the 21st Century. Addison-Wesley. ^ ^ Summerfield, Mark (2012). Programming in Go: Creating Applications for the 21st Century. Addison-Wesley. ^ \"The Go Memory Model\". Retrieved April 10, 2017. ^ ^ \"The Go Memory Model\". Retrieved April 10, 2017. \"The Go Memory Model\" . Retrieved April 10, 2017 April 10, ^ \"Go Concurrency Patterns\". The Go Programming Language. ^ ^ \"Go Concurrency Patterns\". The Go Programming Language. \"Go Concurrency Patterns\" ^ Graham-Cumming, John (August 24, 2013). \"Recycling Memory Buffers in Go\". ^ ^ Graham-Cumming, John (August 24, 2013). \"Recycling Memory Buffers in Go\". \"Recycling Memory Buffers in Go\" ^ \"tree.go\". ^ ^ \"tree.go\". \"tree.go\" ^ Cheslack-Postava, Ewen. \"Iterators in Go\". ^ ^ Cheslack-Postava, Ewen. \"Iterators in Go\". \"Iterators in Go\" ^ Kernighan, Brian W. \"A Descent Into Limbo\". ^ ^ Kernighan, Brian W. \"A Descent Into Limbo\". \"A Descent Into Limbo\" ^ a b \"The Go Memory Model\". Retrieved January 5, 2011. ^ a b a b \"The Go Memory Model\". Retrieved January 5, 2011. \"The Go Memory Model\" . Retrieved January 5, 2011 January 5, ^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications. Archived from the original (PDF) on September 9, 2016. Retrieved May 14, 2015. ^ ^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications. Archived from the original (PDF) on September 9, 2016. Retrieved May 14, 2015. Multi-core parallel programming in Go (PDF) the original (PDF) . Retrieved May 14, 2015 May 14, ^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerX 10.1.1.368.6137. ^ ^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerX 10.1.1.368.6137. Examining the expert gap in parallel programming (PDF) CiteSeerX 10.1.1.368.6137 10.1.1.368.6137 ^ Go Authors. \"Share Memory By Communicating\". ^ ^ Go Authors. \"Share Memory By Communicating\". \"Share Memory By Communicating\" ^ Cox, Russ. \"Off to the Races\". ^ ^ Cox, Russ. \"Off to the Races\". Cox, Russ \"Off to the Races\" ^ Pike, Rob (October 25, 2012). \"Go at Google: Language Design in the Service of Software Engineering\". Google, Inc. \"There is one important caveat: Go is not purely memory safe in the presence of concurrency.\" ^ ^ Pike, Rob (October 25, 2012). \"Go at Google: Language Design in the Service of Software Engineering\". Google, Inc. \"There is one important caveat: Go is not purely memory safe in the presence of concurrency.\" Pike, Rob \"Go at Google: Language Design in the Service of Software Engineering\" ^ \"Introducing the Go Race Detector\". The Go Blog. Retrieved June 26, 2013. ^ ^ \"Introducing the Go Race Detector\". The Go Blog. Retrieved June 26, 2013. \"Introducing the Go Race Detector\" . Retrieved June 26, 2013 June 26, ^ \"Go 1.6 Release Notes - The Go Programming Language\". go.dev. Retrieved November 17, 2023. ^ ^ \"Go 1.6 Release Notes - The Go Programming Language\". go.dev. Retrieved November 17, 2023. \"Go 1.6 Release Notes - The Go Programming Language\" . Retrieved November 17, 2023 November 17, ^ \"Frequently Asked Questions (FAQ) - the Go Programming Language\". ^ ^ \"Frequently Asked Questions (FAQ) - the Go Programming Language\". \"Frequently Asked Questions (FAQ) - the Go Programming Language\" ^ \"A Story of a Fat Go Binary\". September 21, 2018. ^ ^ \"A Story of a Fat Go Binary\". September 21, 2018. \"A Story of a Fat Go Binary\" ^ \"Go Programming Language Specification, \u00a7Interface types\". The Go Programming Language. ^ ^ \"Go Programming Language Specification, \u00a7Interface types\". The Go Programming Language. \"Go Programming Language Specification, \u00a7Interface types\" ^ \"Go Programming Language Specification, \u00a7Type assertions\". The Go Programming Language. ^ ^ \"Go Programming Language Specification, \u00a7Type assertions\". The Go Programming Language. \"Go Programming Language Specification, \u00a7Type assertions\" ^ \"All Systems Are Go\". informIT (Interview). August 17, 2010. Retrieved June 21, 2018. ^ ^ \"All Systems Are Go\". informIT (Interview). August 17, 2010. Retrieved June 21, 2018. \"All Systems Are Go\" . Retrieved June 21, 2018 June 21, ^ \"Language Design FAQ\". November 13, 2009. Archived from the original on November 13, 2009. ^ ^ \"Language Design FAQ\". November 13, 2009. Archived from the original on November 13, 2009. \"Language Design FAQ\" the original ^ \"Proposal for an exception-like mechanism\". golang-nuts. March 25, 2010. Retrieved March 25, 2010. ^ ^ \"Proposal for an exception-like mechanism\". golang-nuts. March 25, 2010. Retrieved March 25, 2010. \"Proposal for an exception-like mechanism\" . Retrieved March 25, 2010 March 25, ^ \"Weekly Snapshot History\". The Go Programming Language. ^ ^ \"Weekly Snapshot History\". The Go Programming Language. \"Weekly Snapshot History\" ^ \"Panic And Recover\". Go wiki. ^ ^ \"Panic And Recover\". Go wiki. \"Panic And Recover\" ^ \"Effective Go\". The Go Programming Language. ^ ^ \"Effective Go\". The Go Programming Language. \"Effective Go\" ^ \"gofmt\". The Go Programming Language. Retrieved February 5, 2021. ^ ^ \"gofmt\". The Go Programming Language. Retrieved February 5, 2021. \"gofmt\" . Retrieved February 5, 2021 February 5, ^ \"golang/lint public archive\". github.com. November 30, 2022. ^ ^ \"golang/lint public archive\". github.com. November 30, 2022. \"golang/lint public archive\" ^ a b \"Effective Go\". The Go Programming Language. ^ a b a b \"Effective Go\". The Go Programming Language. \"Effective Go\" ^ \"Unused local variables\". yourbasic.org. Retrieved February 11, 2021. ^ ^ \"Unused local variables\". yourbasic.org. Retrieved February 11, 2021. \"Unused local variables\" . Retrieved February 11, 2021 February 11, ^ \"Unused package imports\". yourbasic.org. Retrieved February 11, 2021. ^ ^ \"Unused package imports\". yourbasic.org. Retrieved February 11, 2021. \"Unused package imports\" . Retrieved February 11, 2021 February 11, ^ \"Code Review Comments\". GitHub. Retrieved July 3, 2018. ^ ^ \"Code Review Comments\". GitHub. Retrieved July 3, 2018. \"Code Review Comments\" GitHub . Retrieved July 3, 2018 July 3, ^ \"Talks\". Retrieved July 3, 2018. ^ ^ \"Talks\". Retrieved July 3, 2018. \"Talks\" . Retrieved July 3, 2018 July 3, ^ \"Errors Are Values\". Retrieved July 3, 2018. ^ ^ \"Errors Are Values\". Retrieved July 3, 2018. \"Errors Are Values\" . Retrieved July 3, 2018 July 3, ^ \"tools/gopls/README.md at master \u00b7 golang/tools\". GitHub. Retrieved November 17, 2023. ^ ^ \"tools/gopls/README.md at master \u00b7 golang/tools\". GitHub. Retrieved November 17, 2023. \"tools/gopls/README.md at master \u00b7 golang/tools\" . Retrieved November 17, 2023 November 17, ^ \"fmt\". The Go Programming Language. Retrieved April 8, 2019. ^ ^ \"fmt\". The Go Programming Language. Retrieved April 8, 2019. \"fmt\" . Retrieved April 8, 2019 April 8, ^ \"testing\". The Go Programming Language. Retrieved December 27, 2020. ^ ^ \"testing\". The Go Programming Language. Retrieved December 27, 2020. \"testing\" . Retrieved December 27, 2020 December 27, ^ \"http package - net/http - Go Packages\". pkg.go.dev. Retrieved November 23, 2024. ^ ^ \"http package - net/http - Go Packages\". pkg.go.dev. Retrieved November 23, 2024. \"http package - net/http - Go Packages\" . Retrieved November 23, 2024 November 23, ^ Lee, Wei-Meng (November 24, 2022). \"Introduction to the Go Programming Language\". Component Developer Magazine. Archived from the original on June 5, 2023. Retrieved September 8, 2023. ^ ^ Lee, Wei-Meng (November 24, 2022). \"Introduction to the Go Programming Language\". Component Developer Magazine. Archived from the original on June 5, 2023. Retrieved September 8, 2023. \"Introduction to the Go Programming Language\" Component Developer Magazine the original . Retrieved September 8, 2023 September 8, ^ Hoffmann, Frank; Neumeyer, Mandy (August 2018). \"Simply Secure\". Linux Magazine. No. 213. Archived from the original on May 28, 2023. Retrieved September 8, 2023. ^ ^ Hoffmann, Frank; Neumeyer, Mandy (August 2018). \"Simply Secure\". Linux Magazine. No. 213. Archived from the original on May 28, 2023. Retrieved September 8, 2023. \"Simply Secure\" Linux Magazine the original . Retrieved September 8, 2023 September 8, ^ Lee, Wei-Meng (August 31, 2022). \"Introduction to Containerization Using Docker\". CODE Magazine. Archived from the original on May 30, 2023. Retrieved September 8, 2023. ^ ^ Lee, Wei-Meng (August 31, 2022). \"Introduction to Containerization Using Docker\". CODE Magazine. Archived from the original on May 30, 2023. Retrieved September 8, 2023. \"Introduction to Containerization Using Docker\" CODE Magazine Archived . Retrieved September 8, 2023 September 8, ^ Pirker, Alexander (February 24, 2023). \"Kubernetes Security for Starters\". CODE Magazine. Archived from the original on April 1, 2023. Retrieved September 8, 2023. ^ ^ Pirker, Alexander (February 24, 2023). \"Kubernetes Security for Starters\". CODE Magazine. Archived from the original on April 1, 2023. Retrieved September 8, 2023. \"Kubernetes Security for Starters\" CODE Magazine Archived . Retrieved September 8, 2023 September 8, ^ Taft, Rebecca; Sharif, Irfan; Matei, Andrei; Van Benschoten, Nathan; Lewis, Jordan; Grieger, Tobias; Niemi, Kai; Woods, Andy; Birzin, Anne; Poss, Raphael; Bardea, Paul; Ranade, Amruta; Darnell, Ben; Gruneir, Bram; Jaffray, Justin; Zhang, Lucy; Mattis, Peter (June 11, 2020). \"CockroachDB: The Resilient Geo-Distributed SQL Database\". Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data. SIGMOD '20. pp. 1493\u20131509. doi:10.1145/3318464.3386134. ISBN 978-1-4503-6735-6. ^ ^ Taft, Rebecca; Sharif, Irfan; Matei, Andrei; Van Benschoten, Nathan; Lewis, Jordan; Grieger, Tobias; Niemi, Kai; Woods, Andy; Birzin, Anne; Poss, Raphael; Bardea, Paul; Ranade, Amruta; Darnell, Ben; Gruneir, Bram; Jaffray, Justin; Zhang, Lucy; Mattis, Peter (June 11, 2020). \"CockroachDB: The Resilient Geo-Distributed SQL Database\". Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data. SIGMOD '20. pp. 1493\u20131509. doi:10.1145/3318464.3386134. ISBN 978-1-4503-6735-6. SIGMOD 1493\u2013 doi 10.1145/3318464.3386134 10.1145/3318464.3386134 ISBN 978-1-4503-6735-6 ^ Hopkins, Brandon (September 13, 2022). \"Static Site Generation with Hugo\". Linux Journal. Archived from the original on April 8, 2023. Retrieved September 8, 2023. ^ ^ Hopkins, Brandon (September 13, 2022). \"Static Site Generation with Hugo\". Linux Journal. Archived from the original on April 8, 2023. Retrieved September 8, 2023. \"Static Site Generation with Hugo\" Archived . Retrieved September 8, 2023 September 8, ^ Simionato, Michele (November 15, 2009). \"Interfaces vs Inheritance (or, watch out for Go!)\". artima. Retrieved November 15, 2009. ^ ^ Simionato, Michele (November 15, 2009). \"Interfaces vs Inheritance (or, watch out for Go!)\". artima. Retrieved November 15, 2009. \"Interfaces vs Inheritance (or, watch out for Go!)\" . Retrieved November 15, 2009 November 15, ^ Astels, Dave (November 9, 2009). \"Ready, Set, Go!\". engineyard. Archived from the original on October 19, 2018. Retrieved November 9, 2009. ^ ^ Astels, Dave (November 9, 2009). \"Ready, Set, Go!\". engineyard. Archived from the original on October 19, 2018. Retrieved November 9, 2009. \"Ready, Set, Go!\" the original . Retrieved November 9, 2009 November 9, ^ jt (January 11, 2010). \"Google's Go Wins Programming Language Of The Year Award\". jaxenter. Retrieved December 5, 2012. ^ ^ jt (January 11, 2010). \"Google's Go Wins Programming Language Of The Year Award\". jaxenter. Retrieved December 5, 2012. \"Google's Go Wins Programming Language Of The Year Award\" . Retrieved December 5, 2012 December 5, ^ \"TIOBE Programming Community Index for June 2015\". TIOBE Software. June 2015. Retrieved July 5, 2015. ^ ^ \"TIOBE Programming Community Index for June 2015\". TIOBE Software. June 2015. Retrieved July 5, 2015. \"TIOBE Programming Community Index for June 2015\" . Retrieved July 5, 2015 July 5, ^ \"TIOBE Index\". TIOBE. Retrieved July 15, 2024. ^ ^ \"TIOBE Index\". TIOBE. Retrieved July 15, 2024. \"TIOBE Index\" . Retrieved July 15, 2024 July 15, ^ Eckel, Bruce (August 27, 2011). \"Calling Go from Python via JSON-RPC\". Retrieved August 29, 2011. ^ ^ Eckel, Bruce (August 27, 2011). \"Calling Go from Python via JSON-RPC\". Retrieved August 29, 2011. \"Calling Go from Python via JSON-RPC\" . Retrieved August 29, 2011 August 29, ^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days. ^ ^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days. Loop recognition in C++/Java/Go/Scala (PDF) ^ Metz, Cade (July 1, 2011). \"Google Go strikes back with C++ bake-off\". The Register. ^ ^ Metz, Cade (July 1, 2011). \"Google Go strikes back with C++ bake-off\". The Register. \"Google Go strikes back with C++ bake-off\" The Register ^ Yager, Will. \"Why Go is not Good\". Retrieved November 4, 2018. ^ ^ Yager, Will. \"Why Go is not Good\". Retrieved November 4, 2018. \"Why Go is not Good\" . Retrieved November 4, 2018 November 4, ^ Dobronszki, Janos. \"Everyday Hassles in Go\". Retrieved November 4, 2018. ^ ^ Dobronszki, Janos. \"Everyday Hassles in Go\". Retrieved November 4, 2018. \"Everyday Hassles in Go\" . Retrieved November 4, 2018 November 4, ^ \"Why are there braces but no semicolons? And why can't I put the opening brace on the next line?\". Retrieved March 26, 2020. The advantages of a single, programmatically mandated format for all Go programs greatly outweigh any perceived disadvantages of the particular style. ^ ^ \"Why are there braces but no semicolons? And why can't I put the opening brace on the next line?\". Retrieved March 26, 2020. The advantages of a single, programmatically mandated format for all Go programs greatly outweigh any perceived disadvantages of the particular style. \"Why are there braces but no semicolons? And why can't I put the opening brace on the next line?\" . Retrieved March 26, 2020 March 26, ^ \"I want off Mr. Golang's Wild Ride\". February 28, 2020. Retrieved November 17, 2020. ^ ^ \"I want off Mr. Golang's Wild Ride\". February 28, 2020. Retrieved November 17, 2020. \"I want off Mr. Golang's Wild Ride\" . Retrieved November 17, 2020 November 17, ^ \"proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088\". GitHub. May 16, 2019. Retrieved November 17, 2020. ^ ^ \"proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088\". GitHub. May 16, 2019. Retrieved November 17, 2020. \"proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088\" GitHub . Retrieved November 17, 2020 November 17, ^ Tu, Tengfei (2019). \"Understanding Real-World Concurrency Bugs in Go\" (PDF). For example, around 58% of blocking bugs are caused by message passing. In addition to the violation of Go's channel usage rules (e.g., waiting on a channel that no one sends data to or close), many concurrency bugs are caused by the mixed usage of message passing and other new semantics and new libraries in Go, which can easily be overlooked but hard to detect ^ ^ Tu, Tengfei (2019). \"Understanding Real-World Concurrency Bugs in Go\" (PDF). For example, around 58% of blocking bugs are caused by message passing. In addition to the violation of Go's channel usage rules (e.g., waiting on a channel that no one sends data to or close), many concurrency bugs are caused by the mixed usage of message passing and other new semantics and new libraries in Go, which can easily be overlooked but hard to detect \"Understanding Real-World Concurrency Bugs in Go\" (PDF) ^ Brownlee, John (November 13, 2009). \"Google didn't google \"Go\" before naming their programming language'\". Archived from the original on December 8, 2015. Retrieved May 26, 2016. ^ ^ Brownlee, John (November 13, 2009). \"Google didn't google \"Go\" before naming their programming language'\". Archived from the original on December 8, 2015. Retrieved May 26, 2016. \"Google didn't google \"Go\" before naming their programming language'\" the original . Retrieved May 26, 2016 May 26, ^ Claburn, Thomas (November 11, 2009). \"Google 'Go' Name Brings Accusations Of Evil'\". InformationWeek. Archived from the original on July 22, 2010. Retrieved January 18, 2010. ^ ^ Claburn, Thomas (November 11, 2009). \"Google 'Go' Name Brings Accusations Of Evil'\". InformationWeek. Archived from the original on July 22, 2010. Retrieved January 18, 2010. \"Google 'Go' Name Brings Accusations Of Evil'\" the original . Retrieved January 18, 2010 January 18, ^ a b \"Issue 9 - go \u2014 I have already used the name for *MY* programming language\". Github. Google Inc. Retrieved October 12, 2010. ^ a b a b \"Issue 9 - go \u2014 I have already used the name for *MY* programming language\". Github. Google Inc. Retrieved October 12, 2010. \"Issue 9 - go \u2014 I have already used the name for *MY* programming language\" Google Inc. Retrieved October 12, 2010 October 12, Further reading [edit] [ edit edit ] Donovan, Alan; Kernighan, Brian (October 2015). The Go Programming Language (1st ed.). Addison-Wesley Professional. p. 400. ISBN 978-0-13-419044-0. The Go Programming Language Addison-Wesley Professional ISBN 978-0-13-419044-0 Bodner, Jon (March 2021). Learning Go (1st ed.). O'Reilly. p. 352. ISBN 9781492077213. Learning Go O'Reilly ISBN 9781492077213 External links [edit] [ edit edit ] Go (programming language) Go (programming language) Official website Official website Official website Official website v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category v v t t e e Google Chromium Chromium Gemma Gemma OpenRefine OpenRefine Tesseract Tesseract Carbon Carbon Dart Dart Go Go Sawzall Sawzall AMP AMP Angular Angular AngularJS AngularJS Beam Beam Bazel Bazel Blockly Blockly Closure Tools Closure Tools Cpplint Cpplint FlatBuffers FlatBuffers Flutter Flutter Ganeti Ganeti Gears Gears Gerrit Gerrit GLOP GLOP gRPC gRPC Gson Gson Guava Guava Guetzli Guetzli Guice Guice gVisor gVisor Kubernetes Kubernetes LevelDB LevelDB libvpx libvpx Lighthouse Lighthouse NaCl NaCl Namebench Namebench Nomulus Nomulus OR-Tools OR-Tools Polymer Polymer Protocol Buffers Protocol Buffers TensorFlow TensorFlow V8 V8 Android Android ChromiumOS ChromiumOS Fuchsia Fuchsia gLinux gLinux Goobuntu Goobuntu Code-in Code-in Google LLC v. Oracle America, Inc. Google LLC v. Oracle America, Inc. Open Source Security Foundation Open Source Security Foundation Summer of Code Summer of Code v v t t e e Rob Pike Plan 9 from Bell Labs Plan 9 from Bell Labs Inferno Inferno Newsqueak Newsqueak Limbo Limbo Sawzall Sawzall Go Go acme acme Blit Blit sam sam rio rio 8\u00bd 8\u00bd The Practice of Programming The Practice of Programming The Unix Programming Environment The Unix Programming Environment Ren\u00e9e French Ren\u00e9e French Mark V. Shaney Mark V. Shaney UTF-8 UTF-8 v v t t e e Ken Thompson Unix Unix Plan 9 from Bell Labs Plan 9 from Bell Labs Inferno Inferno B B Go Go Belle Belle ed ed grep grep sam sam Space Travel Space Travel Thompson shell Thompson shell Bell Labs Bell Labs Google Google UTF-8 UTF-8 Authority control databases FAST FAST FAST Germany Germany Germany United States United States United States United States Israel Israel Israel https://en.wikipedia.org/w/index.php?title=Go_(programming_language)&oldid=1265734780 Categories Go (programming language) Go (programming language) American inventions American inventions C programming language family C programming language family Concurrent programming languages Concurrent programming languages Cross-platform free software Cross-platform free software Cross-platform software Cross-platform software Free and open source compilers Free and open source compilers Google software Google software High-level programming languages High-level programming languages Procedural programming languages Procedural programming languages Programming languages Programming languages Programming languages created in 2009 Programming languages created in 2009 Software using the BSD license Software using the BSD license Statically typed programming languages Statically typed programming languages Systems programming languages Systems programming languages Articles with short description Articles with short description Short description is different from Wikidata Short description is different from Wikidata Use American English from August 2022 Use American English from August 2022 All Wikipedia articles written in American English All Wikipedia articles written in American English Use mdy dates from October 2018 Use mdy dates from October 2018 All articles with failed verification All articles with failed verification Articles with failed verification from June 2022 Articles with failed verification from June 2022 All articles with unsourced statements All articles with unsourced statements Articles with unsourced statements from December 2016 Articles with unsourced statements from December 2016 Articles with excerpts Articles with excerpts Commons category link is on Wikidata Commons category link is on Wikidata Articles prone to spam from June 2013 Articles prone to spam from June 2013 This page was last edited on 28 December 2024, at 11:11 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/Swift_(programming_language)": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Contents (Top) (Top) 1 History Toggle History subsection 1.1 Platforms 1.2 Version history 1 History 1 History Toggle History subsection 1.1 Platforms 1.1 Platforms 1.1 Platforms 1.2 Version history 1.2 Version history 1.2 Version history 2 Features Toggle Features subsection 2.1 Basic syntax 2.2 Closure support 2.3 String support 2.4 Callable objects 2.5 Access control 2.6 Optionals and chaining 2.7 Value types 2.8 Extensions 2.9 Protocol-oriented programming 2.10 Concurrency 2.11 Libraries, runtime, development 2.12 Memory management 2.13 Debugging 2 Features 2 Features Toggle Features subsection 2.1 Basic syntax 2.1 Basic syntax 2.1 Basic syntax 2.2 Closure support 2.2 Closure support 2.2 Closure support 2.3 String support 2.3 String support 2.3 String support 2.4 Callable objects 2.4 Callable objects 2.4 Callable objects 2.5 Access control 2.5 Access control 2.5 Access control 2.6 Optionals and chaining 2.6 Optionals and chaining 2.6 Optionals and chaining 2.7 Value types 2.7 Value types 2.7 Value types 2.8 Extensions 2.8 Extensions 2.8 Extensions 2.9 Protocol-oriented programming 2.9 Protocol-oriented programming 2.9 Protocol-oriented programming 2.10 Concurrency 2.10 Concurrency 2.10 Concurrency 2.11 Libraries, runtime, development 2.11 Libraries, runtime, development 2.11 Libraries, runtime, development 2.12 Memory management 2.12 Memory management 2.12 Memory management 2.13 Debugging 2.13 Debugging 2.13 Debugging 3 Comparisons to other languages 3 Comparisons to other languages 3 Comparisons to other languages 4 Development and other implementations 4 Development and other implementations 4 Development and other implementations 5 See also 5 See also 5 See also 6 References 6 References 6 References 7 External links 7 External links 7 External links Toggle the table of contents Swift (programming language) Swift (programming language) 47 languages \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Az\u0259rbaycanca Az\u0259rbaycanca Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u09ac\u09be\u0982\u09b2\u09be \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 Catal\u00e0 Catal\u00e0 \u010ce\u0161tina \u010ce\u0161tina \u010ce\u0161tina Deutsch Deutsch Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Esperanto Esperanto Esperanto \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 Bahasa Indonesia Bahasa Indonesia Bahasa Indonesia \u00cdslenska \u00cdslenska \u00cdslenska Italiano Italiano Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u05e2\u05d1\u05e8\u05d9\u05ea \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430 Latina Latina Latina Magyar Magyar Magyar \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 Bahasa Melayu Bahasa Melayu Bahasa Melayu Nederlands Nederlands Nederlands \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk bokm\u00e5l Norsk bokm\u00e5l O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 Polski Polski Polski Portugu\u00eas Portugu\u00eas Portugu\u00eas Qaraqalpaqsha Qaraqalpaqsha Qaraqalpaqsha Rom\u00e2n\u0103 Rom\u00e2n\u0103 Rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Simple English Simple English Simple English Sloven\u010dina Sloven\u010dina Sloven\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Suomi Suomi Suomi Svenska Svenska Svenska \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 \u0422\u043e\u04b7\u0438\u043a\u04e3 T\u00fcrk\u00e7e T\u00fcrk\u00e7e T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t Ti\u1ebfng Vi\u1ec7t \u5434\u8bed \u5434\u8bed \u5434\u8bed \u7cb5\u8a9e \u7cb5\u8a9e \u7cb5\u8a9e \u4e2d\u6587 \u4e2d\u6587 \u4e2d\u6587 Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read Edit Edit Edit View history View history View history Tools Read Read Read Edit Edit Edit View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikimedia Commons Wikimedia Commons Wikimedia Commons Wikibooks Wikibooks Wikibooks Wikidata item Wikidata item Wikidata item Swift (parallel scripting language) Swift (CPU) Paradigm Multi-paradigm protocol-oriented object-oriented functional imperative block structured declarative concurrent Designed by Chris Lattner Apple Inc. [1] [ ] Developer Apple Inc. ; 10 years ago (2014-06-02) 2014-06-02 [2] [ ] Stable release [3] [ ] ; 20 days ago (13 December 2024) 13 December 2024 Preview release Typing discipline Static strong inferred Memory management Automatic Reference Counting OS Darwin iOS iPadOS macOS tvOS visionOS watchOS Linux Windows Android z/OS License Apache License 2.0 Proprietary [4] [ ] [5] [ ] Filename extensions www.swift.org www.swift.org www.swift.org developer.apple.com/swift/ developer.apple.com/swift/ developer.apple.com/swift/ Objective-C [6] [ ] Rust Haskell Ruby Python C# CLU [7] [ ] D [8] [ ] Rust [9] [ ] V (Vlang) [10] [ ] Swift is a high-level general-purpose, multi-paradigm, compiled programming language created by Chris Lattner in 2010 for Apple Inc. and maintained by the open-source community. Swift compiles to machine code and uses an LLVM-based compiler. Swift was first released in June 2014[11] and the Swift toolchain has shipped in Xcode since Xcode version 6, released in September 2014. high-level general-purpose multi-paradigm compiled programming language Chris Lattner Apple Inc. the open-source community LLVM [11] [ ] Xcode Apple intended Swift to support many core concepts associated with Objective-C, notably dynamic dispatch, widespread late binding, extensible programming, and similar features, but in a \"safer\" way, making it easier to catch software bugs; Swift has features addressing some common programming errors like null pointer dereferencing and provides syntactic sugar to help avoid the pyramid of doom. Swift supports the concept of protocol extensibility, an extensibility system that can be applied to types, structs and classes, which Apple promotes as a real change in programming paradigms they term \"protocol-oriented programming\"[12] (similar to traits and type classes).[13] Objective-C dynamic dispatch late binding extensible programming software bugs null pointer dereferencing syntactic sugar pyramid of doom protocol structs classes [12] [ ] traits type classes [13] [ ] Swift was introduced at Apple's 2014 Worldwide Developers Conference (WWDC).[14] It underwent an upgrade to version 1.2 during 2014 and a major upgrade to Swift 2 at WWDC 2015. It was initially a proprietary language, but version 2.2 was made open-source software under the Apache License 2.0 on December 3, 2015, for Apple's platforms and Linux.[15][16] 2014 Worldwide Developers Conference [14] [ ] proprietary language open-source software Apache License Linux [15] [ ] [16] [ ] Through version 3.0 the syntax of Swift went through significant evolution, with the core team making source stability a focus in later versions.[17][18] In the first quarter of 2018 Swift surpassed Objective-C in measured popularity.[19] syntax [17] [ ] [18] [ ] Objective-C [19] [ ] Swift 4.0, released in 2017, introduced several changes to some built-in classes and structures. Code written with previous versions of Swift can be updated using the migration functionality built into Xcode. Swift 5, released in March 2019, introduced a stable binary interface on Apple platforms, allowing the Swift runtime to be incorporated into Apple operating systems. It is source compatible with Swift 4.[20] [20] [ ] Swift 5.1 was officially released in September 2019. Swift 5.1 builds on the previous version of Swift 5 by extending the stable features of the language to compile-time with the introduction of module stability. The introduction of module stability makes it possible to create and share binary frameworks that will work with future releases of Swift.[21] [21] [ ] Swift 5.5, officially announced by Apple at the 2021 WWDC, significantly expands language support for concurrency and asynchronous code, notably introducing a unique version of the actor model.[22] WWDC concurrency asynchronous code actor model [22] [ ] Swift 5.9, was released in September 2023 and includes a macro system, generic parameter packs, and ownership features like the new consume operator.[23] [23] [ ] Swift 5.10, was released in March 2024. This version improves the language's concurrency model, allowing for full data isolation to prevent data races. It is also the last release before Swift 6.[24] Version 5.10 is currently available for macOS, Windows and for Linux.[25] data races [24] [ ] [25] [ ] Swift 6 was released in September 2024.[26] [26] [ ] History [edit] [ edit edit ] Development of Swift started in July 2010 by Chris Lattner, with the eventual collaboration of many other programmers at Apple. Swift was motivated by the need for a replacement for Apple's earlier programming language Objective-C, which had been largely unchanged since the early 1980s and lacked modern language features. Swift took language ideas \"from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list\".[7] On June 2, 2014, the Apple Worldwide Developers Conference (WWDC) application became the first publicly released app written with Swift.[27] A beta version of the programming language was released to registered Apple developers at the conference, but the company did not promise that the final version of Swift would be source code compatible with the test version. Apple planned to make source code converters available if needed for the full release.[27] Chris Lattner Apple Objective-C Objective-C Rust Haskell Ruby Python C# CLU [7] [ ] Apple Worldwide Developers Conference [27] [ ] beta version programming language source code [27] [ ] The Swift Programming Language, a free 500-page manual, was also released at WWDC, and is available on the Apple Books Store and the official website.[28] Apple Books [28] [ ] Swift reached the 1.0 milestone on September 9, 2014, with the Gold Master of Xcode 6.0 for iOS.[29] Swift 1.1 was released on October 22, 2014, alongside the launch of Xcode 6.1.[30] Swift 1.2 was released on April 8, 2015, along with Xcode 6.3.[31] Swift 2.0 was announced at WWDC 2015, and was made available for publishing apps in the App Store on September 21, 2015.[32] Swift 3.0 was released on September 13, 2016.[33] Swift 4.0 was released on September 19, 2017.[34] Swift 4.1 was released on March 29, 2018.[35] Xcode iOS [29] [ ] [30] [ ] [31] [ ] [32] [ ] [33] [ ] [34] [ ] [35] [ ] Swift won first place for Most Loved Programming Language in the Stack Overflow Developer Survey 2015[36] and second place in 2016.[37] Stack Overflow [36] [ ] [37] [ ] On December 3, 2015, the Swift language, supporting libraries, debugger, and package manager were open-sourced under the Apache 2.0 license with a Runtime Library Exception,[38] and Swift.org was created to host the project. The source code is hosted on GitHub, where it is easy for anyone to get the code, build it themselves, and even create pull requests to contribute code back to the project. [38] [ ] Swift.org GitHub In December 2015, IBM announced its Swift Sandbox website, which allows developers to write Swift code in one pane and display output in another.[39][40][41] The Swift Sandbox was deprecated in January 2018.[42] IBM [39] [ ] [40] [ ] [41] [ ] [42] [ ] During the WWDC 2016, Apple announced an iPad exclusive app, named Swift Playgrounds, intended to teach people how to code in Swift. The app is presented in a 3D video game-like interface which provides feedback when lines of code are placed in a certain order and executed.[43][44][45] WWDC 2016 iPad app Swift Playgrounds 3D video game-like [43] [ ] [44] [ ] [45] [ ] In January 2017, Chris Lattner announced his departure from Apple for a new position with Tesla Motors, with the Swift project lead role going to team veteran Ted Kremenek.[46][47] Tesla Motors [46] [ ] [47] [ ] During WWDC 2019, Apple announced SwiftUI with Xcode 11, which provides a framework for declarative UI structure design across all Apple platforms.[48] SwiftUI declarative [48] [ ] Official downloads of the SDK and toolchain for the Ubuntu distribution of Linux have been available since Swift 2.2, with more distros added since Swift 5.2.4, CentOS and Amazon Linux.[49] There is an unofficial SDK and native toolchain package for Android too.[50][51] Ubuntu CentOS [49] [ ] [50] [ ] [51] [ ] Platforms [edit] [ edit edit ] The platforms Swift supports are Apple's operating systems (Darwin, iOS, iPadOS, macOS, tvOS, watchOS), Linux, Windows, and Android.[52][53] Darwin iOS iPadOS macOS tvOS watchOS Linux Windows Android [52] [ ] [53] [ ] A key aspect of Swift's design is its ability to interoperate with the huge body of existing Objective-C code developed for Apple products over the previous decades, such as Cocoa and the Cocoa Touch frameworks. On Apple platforms,[54] it links with the Objective-C runtime library, which allows C, Objective-C, C++ and Swift code to run within one program.[55] Cocoa Cocoa Touch frameworks [54] [ ] runtime library C Objective-C C++ [55] [ ] Version history [edit] [ edit edit ] macOS Linux Windows [56] [ ] [57] [ ] [58] [ ] [59] [ ] [60] [ ] [61] [ ] [62] [ ] [63] [ ] [64] [ ] [65] [ ] [66] [ ] [67] [ ] [68] [ ] [69] [ ] [24] [ ] [70] [ ] [71] [ ] Features [edit] [ edit edit ] Please help improve it to make it understandable to non-experts, without removing the technical details. help improve it make it understandable to non-experts (June 2018) June 2018 (Learn how and when to remove this message) Learn how and when to remove this message Swift is a general purpose programming language that employs modern programming-language theory concepts and strives to present a simple, yet powerful syntax. Swift incorporates innovations and conventions from various programming languages, with notable inspiration from Objective-C, which it replaced as the primary development language on Apple Platforms. Swift was designed to be safe and friendly to new programmers while not sacrificing speed. By default Swift manages all memory automatically and ensures variables are always initialized before use. Array accesses are checked for out-of-bounds errors and integer operations are checked for overflow. Parameter names allow creating clear APIs. Protocols define interfaces that types may adopt, while extensions allow developers to add more function to existing types. Swift enables object-oriented programming with the support for classes, subtyping, and method overriding. Optionals allow nil values to be handled explicitly and safely. Concurrent programs can be written using async/await syntax and actors isolate shared mutable state in order to eliminate data races.[72][73] object-oriented programming classes subtyping method overriding nil async/await actors [72] [ ] [73] [ ] Basic syntax [edit] [ edit edit ] Swift's syntax is similar to C-style languages. Code begins executing in the global scope by default.[74] Alternatively, the @main attribute can be applied a structure, class, or enumeration declaration to indicate that it contains the program's entry point.[75] syntax [74] [ ] @ main [75] [ ] Swift's \"Hello, World!\" program is: \"Hello, World!\" program print ( \"Hello, world!\" ) The print(_:separator:terminator:) function used here is included in Swift's standard library, which is available to all programs without the need to import external modules. Statements in Swift don't have to end with a semicolon, however semicolons are required to separate multiple statements written on the same line. Single-line comments begin with // and continue until the end of the current line. Multiline comments are contained by /* and */ characters. Constants are declared with the let keyword and variables with the var keyword. Values must be initialized before they are read. Values may infer their type based on the type of the provided initial value. If the initial value is set after the value's declaration, a type must be declared explicitly.[74] print ( _ : separator : terminator :) comments // /* */ let var [74] [ ] let highScoreThreshold = 1000 // A constant with type Int. The type was inferred based on the provided value. var currentScore = 980 // A variable with type Int. currentScore = 1200 // The value of variables can change over time. let playerMessage : String // A constant with explicit type String. if currentScore > highScoreThreshold { playerMessage = \"You are a top player!\" } else { playerMessage = \"Better luck next time.\" } print ( playerMessage ) // Prints \"You are a top player!\" Control flow in Swift is managed with if-else, guard, and switch statements, along with while and for-in loops. The if statements take a Boolean parameter and execute the body of the if statement if the condition is true, otherwise it executes the optional else body. if-let syntax provides syntactic sugar for checking for the existence of an optional value and unwrapping it at the same time. if-else guard switch while for-in loops if if else if - let let someNumber = 42 if someNumber % 2 == 0 { // Use the remainder operator to find the remainder of someNumber divided by 2. print ( \" \\( someNumber ) is even.\" ) } else { print ( \" \\( someNumber ) is odd.\" ) } // Prints \"42 is even.\" Functions are defined with the func keyword. Function parameters may have names which allow function calls to read like phrases. An underscore before the parameter name allows the argument label to be omitted from the call site. Tuples can be used by functions to return multiple pieces of data at once. func Tuples func constructGreeting ( for name : String ) -> String { return \"Hello \\( name ) !\" } let greeting = constructGreeting ( for : \"Craig\" ) print ( greeting ) // Prints \"Hello Craig!\" Functions, and anonymous functions known as closures, can be assigned to properties and passed around the program like any other value. closures func divideByTwo ( _ aNum : Int ) -> Int { return aNum / 2 } func multiplyByTwo ( _ aNum : Int ) -> Int { return aNum * 2 } let mathOperation = multiplyByTwo print ( mathOperation ( 21 )) // Prints \"42\" guard statements require that the given condition is true before continuing on past the guard statement, otherwise the body of the provided else clause is run. The else clause must exit control of the code block in which the guard statement appears. guard statements are useful for ensuring that certain requirements are met before continuing on with program execution. In particular they can be used to create an unwrapped version of an optional value that is guaranteed to be non-nil for the remainder of the enclosing scope. guard guard else else guard guard func divide ( numerator : Int ?, byDenominator denominator : Int ) -> Int ? { guard denominator != 0 else { print ( \"Can't divide by 0.\" ) return nil } guard let numerator else { print ( \"The provided numerator is nil.\" ) return nil } return numerator / denominator } let result = divide ( numerator : 3 , byDenominator : 0 ) print ( \"Division result is: \\( result ) \" ) // Prints: // \"Can't divide by 0.\" // \"Division result is: nil.\" switch statements compare a value with multiple potential values and then executes an associated code block. switch statements must be made exhaustive, either by including cases for all possible values or by including a default case which is run when the provided value doesn't match any of the other cases. switch cases do not implicitly fall through, although they may explicitly do so with the fallthrough keyword. Pattern matching can be used in various ways inside switch statements. Here is an example of an integer being matched against a number of potential ranges: switch Pattern matching let someNumber = 42 switch someNumber { case ..< 0 : print ( \" \\( someNumber ) negative.\" ) case 0 : print ( \" \\( someNumber ) is 0.\" ) case 1. .. 9 : print ( \" \\( someNumber ) greater than 0, but less than 10.\" ) default : print ( \" \\( someNumber ) is greater than 9.\" ) } // Prints \"42 is greater than 9.\" for-in loops iterate over a sequence of values: let names = [ \"Will\" , \"Anna\" , \"Bart\" ] for name in names { print ( name ) } // Prints: // Will // Anna // Bart while loops iterate as long as the given Boolean condition evaluates to true: while // Add together all the numbers from 1 to 5. var i = 1 var result = 0 while i <= 5 { // The loop performs its body as long as i is less than or equal to 5. result += i // Add i to the current result. i += 1 // Increment i by 1. } print ( result ) // Prints \"15\" Closure support [edit] [ edit edit ] Swift supports closures, which are self-contained blocks of functionality that can be passed around and used in code,[76] and can also be used as anonymous functions. Here are some examples: closures [76] [ ] anonymous functions // Closure type, defined by its input and output values, can be specified outside the closure: let closure1 : ( Int , Int ) -> Int = { arg1 , arg2 in return arg1 + arg2 } // \u2026or inside it: let closure2 = { ( arg1 : Int , arg2 : Int ) -> Int in return arg1 + arg2 } // In most cases, closure's return type can be inferred automatically by the compiler. let closure3 = { arg1 : Int , arg2 : Int in return arg1 + arg2 } Closures can be assigned to variables and constants, and can be passed into other functions or closures as parameters. Single-expression closures may drop the return keyword. return Swift also has a trailing closure syntax, which allows the closure to be written after the end of the function call instead of within the function's parameter list. Parentheses can be omitted altogether if the closure is the function's only parameter: // This function takes a closure which receives no input parameters and returns an integer, // evaluates it, and uses the closure's return value (an Int) as the function's return value. func foo ( closure bar : () -> Int ) -> Int { return bar () } // Without trailing closure syntax: foo ( closure : { return 1 }) // With trailing closure syntax, and implicit return: foo { 1 } Starting from version 5.3, Swift supports multiple trailing closures:[77] [77] [ ] // This function passes the return of the first closure as the parameter of the second, // and returns the second closure's result: func foo ( bar : () -> Int , baz : ( Int ) -> Int ) -> Int { return baz ( bar ()) } // With no trailing closures: foo ( bar : { return 1 }, baz : { x in return x + 1 }) // With 1 trailing closure: foo ( bar : { return 1 }) { x in return x + 1 } // With 2 trailing closures (only the first closure's argument name is omitted): foo { return 1 } baz : { x in return x + 1 } Swift will provide shorthand argument names for inline closures, removing the need to explicitly name all of the closures parameters.[78] Arguments can be referred to with the names $0, $1, $2, and so on: [78] [ ] let names = [ \"Josephine\" , \"Steve\" , \"Chris\" , \"Barbara\" ] // filter calls the given closure for each value in names. // Values with a character count less than 6 are kept, the others are dropped. let shortNames = names . filter { $0 . count < 6 } print ( shortNames ) // Prints \"[\"Steve\", \"Chris\"]\" Closures may capture values from their surrounding scope. The closure will refer to this captured value for as long as the closure exists: func makeMultiplier ( withMultiple multiple : Int ) -> ( Int ) -> ( Int ) { // Create and return a closure that takes in an Int and returns the input multiplied by the value of multiple. return { $0 * multiple } } let multiplier = makeMultiplier ( withMultiple : 3 ) print ( multiplier ( 3 )) // Prints \"9\" print ( multiplier ( 10 )) // Prints \"30\" String support [edit] [ edit edit ] The Swift standard library includes unicode-compliant String and Character types. String values can be initialized with a String literal, a sequence of characters surrounded by double quotation marks. Strings can be concatenated with the + operator: String Character + var someString = \"Hello,\" someString += \" world!\" String interpolation allows for the creation of a new string from other values and expressions. Values written between parentheses preceded by a \\ will be inserted into the enclosing string literal:[79] \\ [79] [ ] var currentScore = 980 print ( \"Your score is \\( currentScore ) .\" ) // Prints \"Your score is 980.\" A for-in loop can be used to iterate over the characters contained in a string: for character in \"Swift\" { print ( character ) } // S // w // i // f // t When the Foundation framework is imported Swift invisibly bridges the String type to NSString, the String class commonly used in Objective-C. Callable objects [edit] [ edit edit ] Callable object \u00a7 In Swift [edit] [ edit ] In Swift, callable objects are defined using callAsFunction.[80] [80] [ ] struct CallableStruct { var value : Int func callAsFunction ( _ number : Int , scale : Int ) { print ( scale * ( number + value )) } } let callable = CallableStruct ( value : 100 ) callable ( 4 , scale : 2 ) callable . callAsFunction ( 4 , scale : 2 ) // Both function calls print 208. Access control [edit] [ edit edit ] Swift supports five access control levels for symbols: open, public, internal, fileprivate, and private. Unlike many object-oriented languages, these access controls ignore inheritance hierarchies: private indicates that a symbol is accessible only in the immediate scope, fileprivate indicates it is accessible only from within the file, internal indicates it is accessible within the containing module, public indicates it is accessible from any module, and open (only for classes and their methods) indicates that the class may be subclassed outside of the module.[81] access control open public internal fileprivate private inheritance private scope fileprivate internal public open [81] [ ] Optionals and chaining [edit] [ edit edit ] An important feature in Swift is option types, which allow references or values to operate in a manner similar to the common pattern in C, where a pointer may either refer to a specific value or no value at all. This implies that non-optional types cannot result in a null-pointer error; the compiler can ensure this is not possible. option types references C pointer null-pointer error Optional types are created with the Optional enum. To make an Integer that is nullable, one would use a declaration similar to var optionalInteger: Optional<Int>. As in C#,[82] Swift also includes syntactic sugar for this, allowing one to indicate a variable is optional by placing a question mark after the type name, var optionalInteger: Int?.[83] Variables or constants that are marked optional either have a value of the underlying type or are nil. Optional types wrap the base type, resulting in a different instance. String and String? are fundamentally different types, the former is of type String while the latter is an Optional that may be holding some String value. [82] [ ] [83] [ ] To access the value inside, assuming it is not nil, it must be unwrapped to expose the instance inside. This is performed with the ! operator: let myValue = anOptionalInstance !. someMethod () In this case, the ! operator unwraps anOptionalInstance to expose the instance inside, allowing the method call to be made on it. If anOptionalInstance is nil, a null-pointer error occurs, terminating the program. This is known as force unwrapping. Optionals may be safely unwrapped using optional chaining which first tests whether the instance is nil, and then unwrap it if it is non-null: optional chaining let myValue = anOptionalInstance ?. someMethod () In this case the runtime calls someMethod only if anOptionalInstance is not nil, suppressing the error. A ? must be placed after every optional property. If any of these properties are nil the entire expression evaluates as nil. The origin of the term chaining comes from the more common case where several method calls/getters are chained together. For instance: let aTenant = aBuilding . tenantList [ 5 ] let theirLease = aTenant . leaseDetails let leaseStart = theirLease ?. startDate can be reduced to: let leaseStart = aBuilding . tenantList [ 5 ]. leaseDetails ?. startDate Swift's use of optionals allows the compiler to use static dispatch because the unwrapping action is called on a defined instance (the wrapper), versus occurring in a runtime dispatch system. static dispatch Value types [edit] [ edit edit ] In many object-oriented languages, objects are represented internally in two parts. The object is stored as a block of data placed on the heap, while the name (or \"handle\") to that object is represented by a pointer. Objects are passed between methods by copying the value of the pointer, allowing the same underlying data on the heap to be accessed by anyone with a copy. In contrast, basic types like integers and floating-point values are represented directly; the handle contains the data, not a pointer to it, and that data is passed directly to methods by copying. These styles of access are termed pass-by-reference in the case of objects, and pass-by-value for basic types. heap pointer Both concepts have their advantages and disadvantages. Objects are useful when the data is large, like the description of a window or the contents of a document. In these cases, access to that data is provided by copying a 32- or 64-bit value, versus copying an entire data structure. However, smaller values like integers are the same size as pointers (typically both are one word), so there is no advantage to passing a pointer, versus passing the value. word Swift offers built-in support for objects using either pass-by-reference or pass-by-value semantics, the former using the class declaration and the latter using struct. Structs in Swift have almost all the same features as classes: methods, implementing protocols and using the extension mechanisms. For this reason, Apple terms all data generically as instances, versus objects or values. Structs do not support inheritance, however.[84] [84] [ ] The programmer is free to choose which semantics are more appropriate for each data structure in the application. Larger structures like windows would be defined as classes, allowing them to be passed around as pointers. Smaller structures, like a 2D point, can be defined as structs, which will be pass-by-value and allow direct access to their internal data with no indirection or reference counting. The performance improvement inherent to the pass-by-value concept is such that Swift uses these types for almost all common data types, including Int and Double, and types normally represented by objects, like String and Array.[84] Using value types can result in significant performance improvements in user applications as well.[85] [84] [ ] [85] [ ] Array, Dictionary, and Set all utilize copy on write so that their data are copied only if and when the program attempts to change a value in them. This means that the various accessors have what is in effect a pointer to the same data storage. So while the data is physically stored as one instance in memory, at the level of the application, these values are separate and physical separation is enforced by copy on write only if needed.[86] copy on write [86] [ ] Extensions [edit] [ edit edit ] Extensions add new functionality to an existing type, without the need to subclass or even have access to the original source code. Extensions can add new methods, initializers, computed properties, subscripts, and protocol conformances.[87] An example might be to add a spell checker to the base String type, which means all instances of String in the program gain the ability to spell-check. The system is also widely used as an organizational technique, allowing related code to be gathered into library-like extensions. [87] [ ] Extensions are declared with the extension keyword. struct Rectangle { let width : Double let height : Double } extension Rectangle { var area : Double { return height * width } } Protocol-oriented programming [edit] [ edit edit ] Protocols promise that a particular type implements a set of methods or properties, meaning that other instances in the system can call those methods on any instance implementing that protocol. This is often used in modern object-oriented languages as a substitute for multiple inheritance, although the feature sets are not entirely similar. multiple inheritance In Objective-C, and most other languages implementing the protocol concept, it is up to the programmer to ensure that the required methods are implemented in each class.[88] Swift adds the ability to add these methods using extensions, and to use generic programming (generics) to implement them. Combined, these allow protocols to be written once and support a wide variety of instances. Also, the extension mechanism can be used to add protocol conformance to an object that does not list that protocol in its definition.[89] [88] [ ] generic programming [89] [ ] For example, a protocol might be declared called Printable, which ensures that instances that conform to the protocol implement a description property and a printDetails() method requirement: // Define a protocol named Printable protocol Printable { var description : String { get } // A read-only property requirement func printDetails () // A method requirement } This protocol can now be adopted by other types: // Adopt the Printable protocol in a class class MyClass : Printable { var description : String { return \"An instance of MyClass\" } func printDetails () { print ( description ) } } Extensions can be used to add protocol conformance to types. Protocols themselves can also be extended to provide default implementations of their requirements. Adopters may define their own implementations, or they may use the default implementation: extension Printable { // All Printable instances will receive this implementation, or they may define their own. func printDetails () { print ( description ) } } // Bool now conforms to Printable, and inherits the printDetails() implementation above. extension Bool : Printable { var description : String { return \"An instance of Bool with value: \\( self ) \" } } In Swift, like many modern languages supporting interfaces, protocols can be used as types, which means variables and methods can be defined by protocol instead of their specific type: func getSomethingPrintable () -> any Printable { return true } var someSortOfPrintableInstance = getSomethingPrintable () print ( someSortOfPrintableInstance . description ) // Prints \"An instance of Bool with value: true\" It does not matter what concrete type of someSortOfPrintableInstance is, the compiler will ensure that it conforms to the protocol and thus this code is safe. This syntax also means that collections can be based on protocols also, like let printableArray = [any Printable]. Both extensions and protocols are used extensively in Swift's standard library; in Swift 5.9, approximately 1.2 percent of all symbols within the standard library were protocols, and another 12.3 percent were protocol requirements or default implementations.[90] For instance, Swift uses extensions to add the Equatable protocol to many of their basic types, like Strings and Arrays, allowing them to be compared with the == operator. The Equatable protocol also defines this default implementation: [90] [ ] func !=< T : Equatable >( lhs : T , rhs : T ) -> Bool This function defines a method that works on any instance conforming to Equatable, providing a not equals operator. Any instance, class or struct, automatically gains this implementation simply by conforming to Equatable.[91] [91] [ ] Protocols, extensions, and generics can be combined to create sophisticated APIs. For example, constraints allow types to conditionally adopt protocols or methods based on the characteristics of the adopting type. A common use case may be adding a method on collection types only when the elements contained within the collection are Equatable: extension Array where Element : Equatable { // allEqual will be available only on instances of Array that contain Equatable elements. func allEqual () -> Bool { for element in self { if element != self . first { return false } } return true } } Concurrency [edit] [ edit edit ] Swift 5.5 introduced structured concurrency into the language.[92] Structured concurrency uses Async/await syntax similar to Kotlin, JavaScript, and Rust. An async function is defined with the async keyword after the parameter list. When calling an async function the await keyword must be written before the function to indicate that execution will potentially suspend while calling function. While a function is suspended the program may run some other concurrent function in the same program. This syntax allows programs to clearly call out potential suspension points and avoid a version of the Pyramid of doom (programming) caused by the previously widespread use of closure callbacks.[93] [92] [ ] Async/await Pyramid of doom (programming) [93] [ ] func downloadText ( name : String ) async -> String { let result = // ... some asynchronous downloading code ... return result } let text = await downloadText ( \"text1\" ) The async let syntax allows multiple functions to run in parallel. await is again used to mark the point at which the program will suspend to wait for the completion of the async functions called earlier. // Each of these calls to downloadText will run in parallel. async let text1 = downloadText ( name : \"text1\" ) async let text2 = downloadText ( name : \"text2\" ) async let text3 = downloadText ( name : \"text3\" ) let textToPrint = await [ text1 , text2 , text3 ] // Suspends until all three downloadText calls have returned. print ( textToPrint ) Tasks and TaskGroups can be created explicitly to create a dynamic number of child tasks during runtime: let taskHandle = Task { await downloadText ( name : \"someText\" ) } let result = await taskHandle . value Swift uses the Actor model to isolate mutable state, allowing different tasks to mutate shared state in a safe manner. Actors are declared with the actor keyword and are reference types, like classes. Only one task may access the mutable state of an actor at the same time. Actors may access and mutate their own internal state freely, but code running in separate tasks must mark each access with the await keyword to indicate that the code may suspend until other tasks finish accessing the actor's state. Actor model actor Directory { var names : [ String ] = [] func add ( name : String ) { names . append ( name ) } } let directory = Directory () // Code suspends until other tasks finish accessing the actor. await directory . add ( name : \"Tucker\" ) print ( await directory . names ) Libraries, runtime, development [edit] [ edit edit ] On Apple systems, Swift uses the same runtime as the extant Objective-C system, but requires iOS 7 or macOS 10.9 or higher. It also depends on Grand Central Dispatch.[94] Swift and Objective-C code can be used in one program, and by extension, C and C++ also. Beginning in Swift 5.9, C++ code can be used directly from Swift code.[95] In the case of Objective-C, Swift has considerable access to the object model, and can be used to subclass, extend and use Objective-C code to provide protocol support.[96] The converse is not true: a Swift class cannot be subclassed in Objective-C.[97] Objective-C Grand Central Dispatch [94] [ ] C++ [95] [ ] [96] [ ] [97] [ ] To aid development of such programs, and the re-use of extant code, Xcode 6 and higher offers a semi-automated system that builds and maintains a bridging header to expose Objective-C code to Swift. This takes the form of an additional header file that simply defines or imports all of the Objective-C symbols that are needed by the project's Swift code. At that point, Swift can refer to the types, functions, and variables declared in those imports as though they were written in Swift. Objective-C code can also use Swift code directly, by importing an automatically maintained header file with Objective-C declarations of the project's Swift symbols. For instance, an Objective-C file in a mixed project called \"MyApp\" could access Swift classes or functions with the code #import \"MyApp-Swift.h\". Not all symbols are available through this mechanism, however\u2014use of Swift-specific features like generic types, non-object optional types, sophisticated enums, or even Unicode identifiers may render a symbol inaccessible from Objective-C.[98] header file [98] [ ] Swift also has limited support for attributes, metadata that is read by the development environment, and is not necessarily part of the compiled code. Like Objective-C, attributes use the @ syntax, but the currently available set is small. One example is the @IBOutlet attribute, which marks a given value in the code as an outlet, available for use within Interface Builder (IB). An outlet is a device that binds the value of the on-screen display to an object in code. Interface Builder On non-Apple systems, Swift does not depend on an Objective-C runtime or other Apple system libraries; a set of Swift \"Corelib\" implementations replace them. These include a \"swift-corelibs-foundation\" to stand in for the Foundation Kit, a \"swift-corelibs-libdispatch\" to stand in for the Grand Central Dispatch, and an \"swift-corelibs-xctest\" to stand in for the XCTest APIs from Xcode.[99] Foundation Kit Xcode [99] [ ] As of 2019, with Xcode 11, Apple has also added a major new UI paradigm called SwiftUI. SwiftUI replaces the older Interface Builder paradigm with a new declarative development paradigm.[100] Interface Builder [100] [ ] Memory management [edit] [ edit edit ] Swift uses Automatic Reference Counting (ARC) to manage memory. Every instance of a class or closure maintains a reference count which keeps a running tally of the number of references the program is holding on to. When this count reaches 0 the instance is deallocated. This automatic deallocation removes the need for a garbage collector as instances are deallocated as soon as they are no longer needed. Automatic Reference Counting manage memory A strong reference cycle can occur if two instances each strongly reference each other (e.g. A references B, B references A). Since neither instances reference count can ever reach zero neither is ever deallocated, resulting in a memory leak. Swift provides the keywords weak and unowned to prevent strong reference cycles. These keywords allow an instance to be referenced without incrementing its reference count. weak references must be optional variables, since they can change and become nil.[101] Attempting to access an unowned value that has already been deallocated results in a runtime error. strong reference cycle memory leak [101] [ ] A closure within a class can also create a strong reference cycle by capturing self references. Self references to be treated as weak or unowned can be indicated using a capture list. class Person { let name : String weak var home : Home ? // Defined as a weak reference in order to break the reference cycle. weak references do not increment the reference count of the instance that they refer to. init ( name : String ) { self . name = name } deinit { print ( \"De-initialized \\( name ) \" ) } } class Home { let address : String var owner : Person ? init ( address : String , owner : Person ?) { self . address = address self . owner = owner } deinit { print ( \"De-initialized \\( address ) \" ) } } var stacy : Person ? = Person ( name : \"Stacy\" ) var house21b : Home ? = Home ( address : \"21b Baker Street\" , owner : stacy ) stacy ?. home = house21b // stacy and house42b now refer to each other. stacy = nil // The reference count for stacy is now 1, because house21b is still holding a reference to it. house21b = nil // house21b's reference count drops to 0, which in turn drops stacy's count to 0 because house21b was the last instance holding a strong reference to stacy. // Prints: // De-initialized 21b Baker Street // De-initialized Stacy Debugging [edit] [ edit edit ] A key element of the Swift system is its ability to be cleanly debugged and run within the development environment, using a read\u2013eval\u2013print loop (REPL), giving it interactive properties more in common with the scripting abilities of Python than traditional system programming languages. The REPL is further enhanced with playgrounds, interactive views running within the Xcode environment or Playgrounds app that respond to code or debugger changes on-the-fly.[102] Playgrounds allow programmers to add in Swift code along with markdown documentation. Programmers can step through code and add breakpoints using LLDB either in a console or an IDE like Xcode. read\u2013eval\u2013print loop system programming playgrounds Playgrounds [102] [ ] LLDB IDE Comparisons to other languages [edit] [ edit edit ] Swift is considered a C family programming language and is similar to C in various ways: C family programming language Most operators in C also appear in Swift, although some operators such as + have slightly different behavior. For example, in Swift, + traps on overflow, whereas &+ is used to denote the C-like behavior of wrapping on overflow. Curly braces are used to group statements. Curly braces Variables are assigned using an equals sign, but compared using two consecutive equals signs. A new identity operator, ===, is provided to check if two data elements refer to the same object. equals sign two consecutive equals signs object Control statements while, if, and switch are similar, but have extended functions, e.g., a switch that takes non-integer cases, while and if supporting pattern matching and conditionally unwrapping optionals, for uses the for i in 1...10 syntax. pattern matching for i in 1. .. 10 Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them. Square brackets arrays It also has similarities to Objective-C: Basic numeric types: Int, UInt, Float, Double Class methods are inherited, like instance methods; self in class methods is the class the method was called on. Similar for...in enumeration syntax. Differences from Objective-C include: Statements need not end with semicolons (;), though these must be used to allow more than one statement on one line. No header files. Uses type inference. type inference Generic programming. Generic programming Functions are first-class objects. first-class Enumeration cases can have associated data (algebraic data types). algebraic data types Operators can be redefined for classes (operator overloading), and new operators can be defined. operator overloading Strings fully support Unicode. Most Unicode characters can be used in either identifiers or operators. Unicode No exception handling. Swift 2 introduces a different and incompatible error-handling model.[103] exception handling [103] [ ] Several features of earlier C-family languages that are easy to misuse have been removed: Pointers are not exposed by default. There is no need for the programmer to keep track of and mark names for referencing or dereferencing. Assignments return no value. This prevents the common error of writing i = 0 instead of i == 0 (which throws a compile-time error). No need to use break statements in switch blocks. Individual cases do not fall through to the next case unless the fallthrough statement is used. Variables and constants are always initialized and array bounds are always checked. Integer overflows, which result in undefined behavior for signed integers in C, are trapped as a run-time error in Swift. Programmers can choose to allow overflows by using the special arithmetical operators &+, &-, &*, &/ and &%. The properties min and max are defined in Swift for all integer types and can be used to safely check for potential overflows, versus relying on constants defined for each type in external libraries. The one-statement form of if and while, which allows for the omission of braces around the statement, is unsupported. C-style enumeration for (int i = 0; i < c; i++), which is prone to off-by-one errors, is unsupported (from Swift 3 onward).[104] The pre- and post- increment and decrement operators (i++, --i ...) are unsupported (from Swift 3 onward), more so since C-style for statements are also unsupported from Swift 3 onward.[105] C-family languages Pointers are not exposed by default. There is no need for the programmer to keep track of and mark names for referencing or dereferencing. Pointers Assignments return no value. This prevents the common error of writing i = 0 instead of i == 0 (which throws a compile-time error). No need to use break statements in switch blocks. Individual cases do not fall through to the next case unless the fallthrough statement is used. switch Variables and constants are always initialized and array bounds are always checked. Integer overflows, which result in undefined behavior for signed integers in C, are trapped as a run-time error in Swift. Programmers can choose to allow overflows by using the special arithmetical operators &+, &-, &*, &/ and &%. The properties min and max are defined in Swift for all integer types and can be used to safely check for potential overflows, versus relying on constants defined for each type in external libraries. Integer overflows undefined behavior The one-statement form of if and while, which allows for the omission of braces around the statement, is unsupported. C-style enumeration for (int i = 0; i < c; i++), which is prone to off-by-one errors, is unsupported (from Swift 3 onward).[104] off-by-one errors [104] [ ] The pre- and post- increment and decrement operators (i++, --i ...) are unsupported (from Swift 3 onward), more so since C-style for statements are also unsupported from Swift 3 onward.[105] increment and decrement operators [105] [ ] Development and other implementations [edit] [ edit edit ] Because Swift can run on Linux, it is sometimes also used as a server-side language.[106] Some web frameworks have already been developed, such as IBM's Kitura (now discontinued), Perfect and Vapor. [106] [ ] IBM Kitura Perfect Vapor An official \"Server APIs\" work group has also been started by Apple,[107] with members of the Swift developer community playing a central role.[108] [107] [ ] [108] [ ] A second free implementation of Swift that targets Cocoa, Microsoft's Common Language Infrastructure (.NET Framework, now .NET), and the Java and Android platform exists as part of the Elements Compiler from RemObjects Software.[109] Cocoa Microsoft Common Language Infrastructure .NET Framework .NET Java Android RemObjects Software [109] [ ] Subsets of Swift have been ported to additional platforms, such as Arduino[110] and Mac OS 9.[111] ported Arduino [110] [ ] Mac OS 9 [111] [ ] See also [edit] [ edit edit ] Computer programming portal Computer programming portal Computer programming portal Comparison of programming languages Comparison of programming languages Objective-C Objective-C D (programming language) D (programming language) Kotlin (programming language) Kotlin (programming language) Python (programming language) Python (programming language) Nim (programming language) Nim (programming language) References [edit] [ edit edit ] ^ U.S. patent no. 9329844 ^ ^ U.S. patent no. 9329844 ^ \"Swift Has Reached 1.0\". Apple. September 9, 2014. Retrieved March 8, 2015. ^ ^ \"Swift Has Reached 1.0\". Apple. September 9, 2014. Retrieved March 8, 2015. \"Swift Has Reached 1.0\" . Retrieved March 8, 2015 March 8, ^ \"Release 6.0.3\". December 13, 2024. Retrieved December 31, 2024. ^ ^ \"Release 6.0.3\". December 13, 2024. Retrieved December 31, 2024. \"Release 6.0.3\" . Retrieved December 31, 2024 December 31, ^ \"Swift, Objectively\". Swift is proprietary and closed: It is entirely controlled by Apple and there is no open source implementation. ^ ^ \"Swift, Objectively\". Swift is proprietary and closed: It is entirely controlled by Apple and there is no open source implementation. \"Swift, Objectively\" ^ Lattner, Chris (June 11, 2014). \"Re: [LLVMdev] [cfe-dev] [Advertisement] open positions in Apple's Swift compiler team\". Archived from the original on July 14, 2014. Retrieved June 12, 2014. You can imagine that many of us want it to be open source and part of LLVM, but the discussion hasn't happened yet, and won't for some time. ^ ^ Lattner, Chris (June 11, 2014). \"Re: [LLVMdev] [cfe-dev] [Advertisement] open positions in Apple's Swift compiler team\". Archived from the original on July 14, 2014. Retrieved June 12, 2014. You can imagine that many of us want it to be open source and part of LLVM, but the discussion hasn't happened yet, and won't for some time. Lattner, Chris \"Re: [LLVMdev] [cfe-dev] [Advertisement] open positions in Apple's Swift compiler team\" the original . Retrieved June 12, 2014 June 12, ^ \"Chris Lattner's Homepage\". Chris Lattner. June 3, 2014. Retrieved June 3, 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ ^ \"Chris Lattner's Homepage\". Chris Lattner. June 3, 2014. Retrieved June 3, 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. \"Chris Lattner's Homepage\" . Retrieved June 3, 2014 June 3, ^ a b Lattner, Chris (June 3, 2014). \"Chris Lattner's Homepage\". Chris Lattner. Retrieved June 3, 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ a b a b Lattner, Chris (June 3, 2014). \"Chris Lattner's Homepage\". Chris Lattner. Retrieved June 3, 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. Lattner, Chris \"Chris Lattner's Homepage\" . Retrieved June 3, 2014 June 3, Objective-C ^ \"Building assert() in Swift, Part 2: __FILE__ and __LINE__\". Retrieved September 25, 2014. ^ ^ \"Building assert() in Swift, Part 2: __FILE__ and __LINE__\". Retrieved September 25, 2014. \"Building assert() in Swift, Part 2: __FILE__ and __LINE__\" . Retrieved September 25, 2014 September 25, ^ \"Influences - The Rust Reference\". doc.rust-lang.org. Retrieved May 2, 2020. ^ ^ \"Influences - The Rust Reference\". doc.rust-lang.org. Retrieved May 2, 2020. \"Influences - The Rust Reference\" . Retrieved May 2, 2020 May 2, ^ \"influenced by - V documentation\". github.com. Retrieved November 3, 2023. ^ ^ \"influenced by - V documentation\". github.com. Retrieved November 3, 2023. \"influenced by - V documentation\" . Retrieved November 3, 2023 November 3, ^ Lardinois, Frederic (June 2, 2014). \"Apple Launches Swift, A New Programming Language For Writing iOS And OS X Apps\". TechCrunch. Retrieved September 7, 2022. ^ ^ Lardinois, Frederic (June 2, 2014). \"Apple Launches Swift, A New Programming Language For Writing iOS And OS X Apps\". TechCrunch. Retrieved September 7, 2022. \"Apple Launches Swift, A New Programming Language For Writing iOS And OS X Apps\" . Retrieved September 7, 2022 September 7, ^ Protocol-oriented Programming in Swift. Apple Inc. YouTube. ^ ^ Protocol-oriented Programming in Swift. Apple Inc. YouTube. Protocol-oriented Programming in Swift YouTube ^ \"Concepts are similar to Rust Traits\". ^ ^ \"Concepts are similar to Rust Traits\". \"Concepts are similar to Rust Traits\" ^ Williams, Owen (June 2, 2014). \"Tim Berners-Lee's sixtieth birthday Apple announces Swift, a new programming language for iOS\". The Next Web. Retrieved June 2, 2014. ^ ^ Williams, Owen (June 2, 2014). \"Tim Berners-Lee's sixtieth birthday Apple announces Swift, a new programming language for iOS\". The Next Web. Retrieved June 2, 2014. \"Tim Berners-Lee's sixtieth birthday Apple announces Swift, a new programming language for iOS\" . Retrieved June 2, 2014 June 2, ^ \"Apple's new programming language Swift is now open source\". The Verge. December 3, 2015. Retrieved December 5, 2015. ^ ^ \"Apple's new programming language Swift is now open source\". The Verge. December 3, 2015. Retrieved December 5, 2015. \"Apple's new programming language Swift is now open source\" . Retrieved December 5, 2015 December 5, ^ \"Apple Open Sources Swift in Latest Pitch to the Enterprise\". CIO Journal. The Wall Street Journal Blogs. December 3, 2015. Retrieved December 5, 2015. ^ ^ \"Apple Open Sources Swift in Latest Pitch to the Enterprise\". CIO Journal. The Wall Street Journal Blogs. December 3, 2015. Retrieved December 5, 2015. \"Apple Open Sources Swift in Latest Pitch to the Enterprise\" \"Apple Open Sources Swift in Latest Pitch to the Enterprise\" The Wall Street Journal . Retrieved December 5, 2015 December 5, ^ \"Looking back on Swift 3 and ahead to Swift 4\". Swift Forums. July 29, 2016. Retrieved November 19, 2018. ^ ^ \"Looking back on Swift 3 and ahead to Swift 4\". Swift Forums. July 29, 2016. Retrieved November 19, 2018. \"Looking back on Swift 3 and ahead to Swift 4\" . Retrieved November 19, 2018 November 19, ^ \"Swift-Evolution\". Swift Evolution. Retrieved November 19, 2018. ^ ^ \"Swift-Evolution\". Swift Evolution. Retrieved November 19, 2018. \"Swift-Evolution\" . Retrieved November 19, 2018 November 19, ^ \"The RedMonk Programming Language Rankings: January 2018 \u2013 tecosystems\". redmonk.com. March 7, 2018. Retrieved November 20, 2018. ^ ^ \"The RedMonk Programming Language Rankings: January 2018 \u2013 tecosystems\". redmonk.com. March 7, 2018. Retrieved November 20, 2018. \"The RedMonk Programming Language Rankings: January 2018 \u2013 tecosystems\" . Retrieved November 20, 2018 November 20, ^ Kremenek, Ted (March 25, 2019). \"Swift 5 Released!\". ^ ^ Kremenek, Ted (March 25, 2019). \"Swift 5 Released!\". \"Swift 5 Released!\" ^ Kremenek, Ted (September 20, 2019). \"Swift 5.1 Released!\". Archived from the original on February 26, 2022. Retrieved October 28, 2019. ^ ^ Kremenek, Ted (September 20, 2019). \"Swift 5.1 Released!\". Archived from the original on February 26, 2022. Retrieved October 28, 2019. \"Swift 5.1 Released!\" the original . Retrieved October 28, 2019 October 28, ^ Hudson, Paul (June 6, 2021). \"What's new in Swift 5.5?\". HackingWithSwift.com. Hacking with Swift. Retrieved June 8, 2021. ^ ^ Hudson, Paul (June 6, 2021). \"What's new in Swift 5.5?\". HackingWithSwift.com. Hacking with Swift. Retrieved June 8, 2021. \"What's new in Swift 5.5?\" . Retrieved June 8, 2021 June 8, ^ \"Swift 5.9 Released\". Swift.org. September 18, 2023. Retrieved October 9, 2023. ^ ^ \"Swift 5.9 Released\". Swift.org. September 18, 2023. Retrieved October 9, 2023. \"Swift 5.9 Released\" . Retrieved October 9, 2023 October 9, ^ a b Borla, Holly (March 5, 2024). \"Swift 5.10 Released\". Swift.org. Retrieved March 13, 2024. ^ a b a b Borla, Holly (March 5, 2024). \"Swift 5.10 Released\". Swift.org. Retrieved March 13, 2024. \"Swift 5.10 Released\" . Retrieved March 13, 2024 March 13, ^ \"Swift.org\". Swift.org. March 2014. Retrieved April 28, 2024. ^ ^ \"Swift.org\". Swift.org. March 2014. Retrieved April 28, 2024. \"Swift.org\" . Retrieved April 28, 2024 April 28, ^ Inc, Apple (September 17, 2024). \"Announcing Swift 6\". Swift.org. Retrieved October 15, 2024. {{cite web}}: |last= has generic name (help) ^ ^ Inc, Apple (September 17, 2024). \"Announcing Swift 6\". Swift.org. Retrieved October 15, 2024. {{cite web}}: |last= has generic name (help) \"Announcing Swift 6\" . Retrieved October 15, 2024 October 15, {{cite web}}: cite web |last= has generic name (help) help ^ a b Platforms State of the Union, Session 102, Apple Worldwide Developers Conference, June 2, 2014 ^ a b a b Platforms State of the Union, Session 102, Apple Worldwide Developers Conference, June 2, 2014 Apple Worldwide Developers Conference ^ The Swift Programming Language. Apple. June 2, 2014. Retrieved June 2, 2014. \"Documentation\". Swift. ^ ^ The Swift Programming Language. Apple. June 2, 2014. Retrieved June 2, 2014. \"Documentation\". Swift. The Swift Programming Language Apple . Retrieved June 2, 2014 June 2, \"Documentation\". Swift. \"Documentation\" ^ \"Swift Has Reached 1.0\". September 9, 2014. Retrieved September 10, 2014. ^ ^ \"Swift Has Reached 1.0\". September 9, 2014. Retrieved September 10, 2014. \"Swift Has Reached 1.0\" . Retrieved September 10, 2014 September 10, ^ \"Xcode 6.1 Release Notes\". October 22, 2014. Retrieved January 23, 2015. ^ ^ \"Xcode 6.1 Release Notes\". October 22, 2014. Retrieved January 23, 2015. \"Xcode 6.1 Release Notes\" . Retrieved January 23, 2015 January 23, ^ \"Xcode 6.3 Release Notes\". April 8, 2015. Retrieved April 8, 2015. ^ ^ \"Xcode 6.3 Release Notes\". April 8, 2015. Retrieved April 8, 2015. \"Xcode 6.3 Release Notes\" . Retrieved April 8, 2015 April 8, ^ \"Swift 2 Apps in the App Store\". Swift Blog. Retrieved March 13, 2016. ^ ^ \"Swift 2 Apps in the App Store\". Swift Blog. Retrieved March 13, 2016. \"Swift 2 Apps in the App Store\" . Retrieved March 13, 2016 March 13, ^ \"Swift 3.0 Released!\". Swift.org. September 13, 2016. Archived from the original on October 14, 2016. Retrieved October 26, 2016. ^ ^ \"Swift 3.0 Released!\". Swift.org. September 13, 2016. Archived from the original on October 14, 2016. Retrieved October 26, 2016. \"Swift 3.0 Released!\" the original . Retrieved October 26, 2016 October 26, ^ \"Swift 4.0 Released!\". Swift.org. September 17, 2017. Archived from the original on March 28, 2019. Retrieved March 1, 2018. ^ ^ \"Swift 4.0 Released!\". Swift.org. September 17, 2017. Archived from the original on March 28, 2019. Retrieved March 1, 2018. \"Swift 4.0 Released!\" the original . Retrieved March 1, 2018 March 1, ^ \"Swift 4.1 Released!\". Swift.org. March 29, 2018. Archived from the original on April 25, 2019. Retrieved March 30, 2018. ^ ^ \"Swift 4.1 Released!\". Swift.org. March 29, 2018. Archived from the original on April 25, 2019. Retrieved March 30, 2018. \"Swift 4.1 Released!\" the original . Retrieved March 30, 2018 March 30, ^ \"Stack Overflow Developer Survey Results 2015\". ^ ^ \"Stack Overflow Developer Survey Results 2015\". \"Stack Overflow Developer Survey Results 2015\" ^ \"Stack Overflow Developer Survey Results 2016\". ^ ^ \"Stack Overflow Developer Survey Results 2016\". \"Stack Overflow Developer Survey Results 2016\" ^ \"Swift.org and Open Source\". Swift.org. Apple Inc. Retrieved February 25, 2019. ^ ^ \"Swift.org and Open Source\". Swift.org. Apple Inc. Retrieved February 25, 2019. \"Swift.org and Open Source\" . Retrieved February 25, 2019 February 25, ^ \"Introducing the IBM Swift Sandbox \u2014 Swift\". Swift. Retrieved December 5, 2015. ^ ^ \"Introducing the IBM Swift Sandbox \u2014 Swift\". Swift. Retrieved December 5, 2015. \"Introducing the IBM Swift Sandbox \u2014 Swift\" . Retrieved December 5, 2015 December 5, ^ Mayo, Benjamin (December 4, 2015). \"Write Swift code in a web browser with the IBM Swift Sandbox\". 9to5Mac. Retrieved December 5, 2015. ^ ^ Mayo, Benjamin (December 4, 2015). \"Write Swift code in a web browser with the IBM Swift Sandbox\". 9to5Mac. Retrieved December 5, 2015. \"Write Swift code in a web browser with the IBM Swift Sandbox\" . Retrieved December 5, 2015 December 5, ^ \"After Apple open sources it, IBM puts Swift programming in the cloud\". ZDNet. Retrieved December 5, 2015. ^ ^ \"After Apple open sources it, IBM puts Swift programming in the cloud\". ZDNet. Retrieved December 5, 2015. \"After Apple open sources it, IBM puts Swift programming in the cloud\" . Retrieved December 5, 2015 December 5, ^ \"Swift Package Catalog and Swift Sandbox Deprecation\". Retrieved November 9, 2018. ^ ^ \"Swift Package Catalog and Swift Sandbox Deprecation\". Retrieved November 9, 2018. \"Swift Package Catalog and Swift Sandbox Deprecation\" . Retrieved November 9, 2018 November 9, ^ \"Swift Playgrounds\". Apple Developer. Retrieved June 19, 2016. ^ ^ \"Swift Playgrounds\". Apple Developer. Retrieved June 19, 2016. \"Swift Playgrounds\" . Retrieved June 19, 2016 June 19, ^ \"Swift Playgrounds \u2014 Preview\". Apple. Retrieved June 19, 2016. ^ ^ \"Swift Playgrounds \u2014 Preview\". Apple. Retrieved June 19, 2016. \"Swift Playgrounds \u2014 Preview\" . Retrieved June 19, 2016 June 19, ^ Mayo, Benjamin (June 13, 2016). \"Apple announces Swift Playgrounds for iPad at WWDC, public release in fall\". 9to5Mac. Retrieved June 19, 2016. ^ ^ Mayo, Benjamin (June 13, 2016). \"Apple announces Swift Playgrounds for iPad at WWDC, public release in fall\". 9to5Mac. Retrieved June 19, 2016. \"Apple announces Swift Playgrounds for iPad at WWDC, public release in fall\" . Retrieved June 19, 2016 June 19, ^ Cunningham, Andrew (January 10, 2017). \"Longtime Apple programmer and Swift creator leaves Apple for Tesla\". Ars Technica. ^ ^ Cunningham, Andrew (January 10, 2017). \"Longtime Apple programmer and Swift creator leaves Apple for Tesla\". Ars Technica. \"Longtime Apple programmer and Swift creator leaves Apple for Tesla\" ^ Wuerthele, Mike (January 13, 2017). \"New Swift project head Ted Kremenek said to be running the show behind the scenes for some time\". AppleInsider. ^ ^ Wuerthele, Mike (January 13, 2017). \"New Swift project head Ted Kremenek said to be running the show behind the scenes for some time\". AppleInsider. \"New Swift project head Ted Kremenek said to be running the show behind the scenes for some time\" ^ Daniel Eran Dilger (June 19, 2019). \"WWDC19: SwiftUI was the brightest star in a galaxy of new ideas\". AppleInsider. Retrieved July 19, 2019. ^ ^ Daniel Eran Dilger (June 19, 2019). \"WWDC19: SwiftUI was the brightest star in a galaxy of new ideas\". AppleInsider. Retrieved July 19, 2019. \"WWDC19: SwiftUI was the brightest star in a galaxy of new ideas\" . Retrieved July 19, 2019 July 19, ^ \"Swift.org - Download Swift\". Retrieved June 21, 2020. ^ ^ \"Swift.org - Download Swift\". Retrieved June 21, 2020. \"Swift.org - Download Swift\" . Retrieved June 21, 2020 June 21, ^ \"Android SDKs for Swift\". GitHub. Retrieved September 10, 2021. ^ ^ \"Android SDKs for Swift\". GitHub. Retrieved September 10, 2021. \"Android SDKs for Swift\" GitHub . Retrieved September 10, 2021 September 10, ^ \"swift-lang package versions\". Retrieved September 10, 2021. ^ ^ \"swift-lang package versions\". Retrieved September 10, 2021. \"swift-lang package versions\" . Retrieved September 10, 2021 September 10, ^ Readdle (January 15, 2020). \"Swift for Android: Our Experience and Tools\". Medium. Retrieved August 20, 2020. ^ ^ Readdle (January 15, 2020). \"Swift for Android: Our Experience and Tools\". Medium. Retrieved August 20, 2020. \"Swift for Android: Our Experience and Tools\" . Retrieved August 20, 2020 August 20, ^ Anderson, Tim (March 30, 2020). \"Official tailored Swift for Windows support promised in 5.3: Swift on more platforms \u2013 provided you do not need a GUI\". The Register. Retrieved September 18, 2020. ^ ^ Anderson, Tim (March 30, 2020). \"Official tailored Swift for Windows support promised in 5.3: Swift on more platforms \u2013 provided you do not need a GUI\". The Register. Retrieved September 18, 2020. \"Official tailored Swift for Windows support promised in 5.3: Swift on more platforms \u2013 provided you do not need a GUI\" The Register . Retrieved September 18, 2020 September 18, ^ \"The Swift Linux Port\". Swift.org. Apple Inc. December 3, 2015. Retrieved August 3, 2016. ^ ^ \"The Swift Linux Port\". Swift.org. Apple Inc. December 3, 2015. Retrieved August 3, 2016. \"The Swift Linux Port\" . Retrieved August 3, 2016 August 3, ^ Timmer, John (June 5, 2014). \"A fast look at Swift, Apple's new programming language\". Ars Technica. Cond\u00e9 Nast. Retrieved June 6, 2014. ^ ^ Timmer, John (June 5, 2014). \"A fast look at Swift, Apple's new programming language\". Ars Technica. Cond\u00e9 Nast. Retrieved June 6, 2014. \"A fast look at Swift, Apple's new programming language\" Ars Technica Cond\u00e9 Nast . Retrieved June 6, 2014 June 6, ^ Kremenek, Ted (March 25, 2019). \"Swift 5 Released!\". Swift.org. Retrieved March 28, 2019. ^ ^ Kremenek, Ted (March 25, 2019). \"Swift 5 Released!\". Swift.org. Retrieved March 28, 2019. \"Swift 5 Released!\" . Retrieved March 28, 2019 March 28, ^ \"Download Swift\". Swift.org. Apple. Retrieved December 15, 2020. ^ ^ \"Download Swift\". Swift.org. Apple. Retrieved December 15, 2020. \"Download Swift\" . Retrieved December 15, 2020 December 15, ^ Kremenek, Ted (April 26, 2021). \"Swift 5.4 Released!\". Swift.org. Apple. Archived from the original on April 26, 2021. Retrieved April 26, 2021. ^ ^ Kremenek, Ted (April 26, 2021). \"Swift 5.4 Released!\". Swift.org. Apple. Archived from the original on April 26, 2021. Retrieved April 26, 2021. \"Swift 5.4 Released!\" the original . Retrieved April 26, 2021 April 26, ^ Kremenek, Ted (March 14, 2022). \"Swift 5.6 Released!\". Swift.org. Apple. Retrieved March 14, 2022. ^ ^ Kremenek, Ted (March 14, 2022). \"Swift 5.6 Released!\". Swift.org. Apple. Retrieved March 14, 2022. \"Swift 5.6 Released!\" . Retrieved March 14, 2022 March 14, ^ \"Release Swift 5.6.1 Release \u00b7 apple/Swift\". GitHub. ^ ^ \"Release Swift 5.6.1 Release \u00b7 apple/Swift\". GitHub. \"Release Swift 5.6.1 Release \u00b7 apple/Swift\" GitHub ^ \"Release Swift 5.6.2 Release \u00b7 apple/Swift\". GitHub. ^ ^ \"Release Swift 5.6.2 Release \u00b7 apple/Swift\". GitHub. \"Release Swift 5.6.2 Release \u00b7 apple/Swift\" GitHub ^ \"Release Swift 5.6.3 Release \u00b7 apple/Swift\". GitHub. ^ ^ \"Release Swift 5.6.3 Release \u00b7 apple/Swift\". GitHub. \"Release Swift 5.6.3 Release \u00b7 apple/Swift\" GitHub ^ Borla, Holly (September 12, 2022). \"Swift 5.7 Released!\". Swift.org. Apple. Retrieved September 23, 2022. ^ ^ Borla, Holly (September 12, 2022). \"Swift 5.7 Released!\". Swift.org. Apple. Retrieved September 23, 2022. \"Swift 5.7 Released!\" . Retrieved September 23, 2022 September 23, ^ \"Release Swift 5.7.1 Release \u00b7 apple/Swift\". GitHub. ^ ^ \"Release Swift 5.7.1 Release \u00b7 apple/Swift\". GitHub. \"Release Swift 5.7.1 Release \u00b7 apple/Swift\" GitHub ^ \"Release Swift 5.8 Release \u00b7 apple/Swift\". GitHub. ^ ^ \"Release Swift 5.8 Release \u00b7 apple/Swift\". GitHub. \"Release Swift 5.8 Release \u00b7 apple/Swift\" GitHub ^ \"Release Swift 5.8.1 Release \u00b7 apple/swift\". GitHub. Retrieved June 14, 2023. ^ ^ \"Release Swift 5.8.1 Release \u00b7 apple/swift\". GitHub. Retrieved June 14, 2023. \"Release Swift 5.8.1 Release \u00b7 apple/swift\" . Retrieved June 14, 2023 June 14, ^ \"Release Swift 5.9 Release \u00b7 apple/swift\". GitHub. Retrieved September 18, 2023. ^ ^ \"Release Swift 5.9 Release \u00b7 apple/swift\". GitHub. Retrieved September 18, 2023. \"Release Swift 5.9 Release \u00b7 apple/swift\" . Retrieved September 18, 2023 September 18, ^ \"Release Swift 5.9.1 Release \u00b7 apple/swift\". GitHub. Retrieved October 19, 2023. ^ ^ \"Release Swift 5.9.1 Release \u00b7 apple/swift\". GitHub. Retrieved October 19, 2023. \"Release Swift 5.9.1 Release \u00b7 apple/swift\" . Retrieved October 19, 2023 October 19, ^ \"Release Swift 5.9.2 Release \u00b7 apple/swift\". GitHub. Retrieved December 11, 2023. ^ ^ \"Release Swift 5.9.2 Release \u00b7 apple/swift\". GitHub. Retrieved December 11, 2023. \"Release Swift 5.9.2 Release \u00b7 apple/swift\" . Retrieved December 11, 2023 December 11, ^ \"Swift 5.10.1 Release\". GitHub. Retrieved June 5, 2024. ^ ^ \"Swift 5.10.1 Release\". GitHub. Retrieved June 5, 2024. \"Swift 5.10.1 Release\" . Retrieved June 5, 2024 June 5, ^ \"Swift 6.0 Release\". GitHub. Retrieved September 17, 2024. ^ ^ \"Swift 6.0 Release\". GitHub. Retrieved September 17, 2024. \"Swift 6.0 Release\" . Retrieved September 17, 2024 September 17, ^ \"Documentation\". docs.swift.org. Retrieved November 17, 2023. ^ ^ \"Documentation\". docs.swift.org. Retrieved November 17, 2023. \"Documentation\" . Retrieved November 17, 2023 November 17, ^ \"Eliminate data races using Swift Concurrency - WWDC22 - Videos\". Apple Inc. Retrieved November 17, 2023. ^ ^ \"Eliminate data races using Swift Concurrency - WWDC22 - Videos\". Apple Inc. Retrieved November 17, 2023. \"Eliminate data races using Swift Concurrency - WWDC22 - Videos\" . Retrieved November 17, 2023 November 17, ^ a b \"Documentation\". docs.swift.org. Retrieved October 15, 2023. ^ a b a b \"Documentation\". docs.swift.org. Retrieved October 15, 2023. \"Documentation\" . Retrieved October 15, 2023 October 15, ^ \"Documentation\". docs.swift.org. Retrieved October 15, 2023. ^ ^ \"Documentation\". docs.swift.org. Retrieved October 15, 2023. \"Documentation\" . Retrieved October 15, 2023 October 15, ^ \"Closures \u2014 The Swift Programming Language (Swift 5.5)\". docs.swift.org. Retrieved August 31, 2021. ^ ^ \"Closures \u2014 The Swift Programming Language (Swift 5.5)\". docs.swift.org. Retrieved August 31, 2021. \"Closures \u2014 The Swift Programming Language (Swift 5.5)\" . Retrieved August 31, 2021 August 31, ^ Macomber, Kyle; Yaskevich, Yavel; Gregor, Doug; McCall, John. \"Multiple Trailing Closures\". GitHub. Retrieved October 19, 2020. ^ ^ Macomber, Kyle; Yaskevich, Yavel; Gregor, Doug; McCall, John. \"Multiple Trailing Closures\". GitHub. Retrieved October 19, 2020. \"Multiple Trailing Closures\" . Retrieved October 19, 2020 October 19, ^ \"Documentation\". docs.swift.org. Retrieved October 16, 2023. ^ ^ \"Documentation\". docs.swift.org. Retrieved October 16, 2023. \"Documentation\" . Retrieved October 16, 2023 October 16, ^ \"Strings and Characters\". docs.swift.org. Retrieved October 16, 2023. ^ ^ \"Strings and Characters\". docs.swift.org. Retrieved October 16, 2023. \"Strings and Characters\" . Retrieved October 16, 2023 October 16, ^ \"Declarations \u2014 The Swift Programming Language (Swift 5.6)\". docs.swift.org. Retrieved February 28, 2022. ^ ^ \"Declarations \u2014 The Swift Programming Language (Swift 5.6)\". docs.swift.org. Retrieved February 28, 2022. \"Declarations \u2014 The Swift Programming Language (Swift 5.6)\" . Retrieved February 28, 2022 February 28, ^ \"Access Control\". The Swift Programming Language. Apple Developer. Retrieved October 25, 2016. ^ ^ \"Access Control\". The Swift Programming Language. Apple Developer. Retrieved October 25, 2016. \"Access Control\" Apple . Retrieved October 25, 2016 October 25, ^ \"Nullable Types\", C# Programming Guide, Microsoft. Archived February 21, 2017, at the Wayback Machine. ^ ^ \"Nullable Types\", C# Programming Guide, Microsoft. Archived February 21, 2017, at the Wayback Machine. \"Nullable Types\" Archived Wayback Machine ^ \"Types\". The Swift Programming Language. Apple Developer. Retrieved July 16, 2014. ^ ^ \"Types\". The Swift Programming Language. Apple Developer. Retrieved July 16, 2014. \"Types\" Apple . Retrieved July 16, 2014 July 16, ^ a b \"Classes and Structures\". The Swift Programming Language. Apple Developer. Archived from the original on March 25, 2016. ^ a b a b \"Classes and Structures\". The Swift Programming Language. Apple Developer. Archived from the original on March 25, 2016. \"Classes and Structures\" Archived ^ Guhit, Fiel (February 14, 2015). \"Performance Case Study on Swift 1.1, Swift 1.2, and Objective-C\". Medium. Archived from the original on December 12, 2023. ^ ^ Guhit, Fiel (February 14, 2015). \"Performance Case Study on Swift 1.1, Swift 1.2, and Objective-C\". Medium. Archived from the original on December 12, 2023. \"Performance Case Study on Swift 1.1, Swift 1.2, and Objective-C\" Archived ^ Building Better Apps with Value Types. Apple. Archived from the original on June 21, 2015. ^ ^ Building Better Apps with Value Types. Apple. Archived from the original on June 21, 2015. Building Better Apps with Value Types the original ^ \"Extensions\". docs.swift.org. Retrieved November 28, 2023. ^ ^ \"Extensions\". docs.swift.org. Retrieved November 28, 2023. \"Extensions\" . Retrieved November 28, 2023 November 28, ^ \"Working with Protocols\". Programming with Objective-C. Apple Developer Documentation Archive. September 17, 2014. Archived from the original on April 29, 2016. ^ ^ \"Working with Protocols\". Programming with Objective-C. Apple Developer Documentation Archive. September 17, 2014. Archived from the original on April 29, 2016. \"Working with Protocols\" Archived ^ \"NSCopying Protocol Reference\". Apple. ^ ^ \"NSCopying Protocol Reference\". Apple. \"NSCopying Protocol Reference\" ^ \"Swift standard library statistics\". swiftinit.org. Swiftinit. Retrieved October 2, 2023. ^ ^ \"Swift standard library statistics\". swiftinit.org. Swiftinit. Retrieved October 2, 2023. \"Swift standard library statistics\" . Retrieved October 2, 2023 October 2, ^ Thompson, Mattt (September 2, 2014). \"Swift Default Protocol Implementations\". NSHipster. ^ ^ Thompson, Mattt (September 2, 2014). \"Swift Default Protocol Implementations\". NSHipster. \"Swift Default Protocol Implementations\" ^ \"swift-evolution/proposals/0304-structured-concurrency.md at main \u00b7 apple/swift-evolution\". GitHub. Retrieved October 16, 2023. ^ ^ \"swift-evolution/proposals/0304-structured-concurrency.md at main \u00b7 apple/swift-evolution\". GitHub. Retrieved October 16, 2023. \"swift-evolution/proposals/0304-structured-concurrency.md at main \u00b7 apple/swift-evolution\" . Retrieved October 16, 2023 October 16, ^ \"swift-evolution/proposals/0296-async-await.md at main \u00b7 apple/swift-evolution\". GitHub. Retrieved October 16, 2023. ^ ^ \"swift-evolution/proposals/0296-async-await.md at main \u00b7 apple/swift-evolution\". GitHub. Retrieved October 16, 2023. \"swift-evolution/proposals/0296-async-await.md at main \u00b7 apple/swift-evolution\" . Retrieved October 16, 2023 October 16, ^ \"Do Swift-based apps work on macOS 10.9/iOS 7 and lower?\", StackOverflow ^ ^ \"Do Swift-based apps work on macOS 10.9/iOS 7 and lower?\", StackOverflow \"Do Swift-based apps work on macOS 10.9/iOS 7 and lower?\" ^ Inc, Apple (September 18, 2023). \"Swift 5.9 Released\". Swift.org. Retrieved October 9, 2023. {{cite web}}: |last= has generic name (help) ^ ^ Inc, Apple (September 18, 2023). \"Swift 5.9 Released\". Swift.org. Retrieved October 9, 2023. {{cite web}}: |last= has generic name (help) \"Swift 5.9 Released\" . Retrieved October 9, 2023 October 9, {{cite web}}: cite web |last= has generic name (help) help ^ \"Writing Swift Classes with Objective-C Behavior\", Apple Inc. ^ ^ \"Writing Swift Classes with Objective-C Behavior\", Apple Inc. \"Writing Swift Classes with Objective-C Behavior\" ^ \"Migrating Your Objective-C Code to Swift\". ^ ^ \"Migrating Your Objective-C Code to Swift\". \"Migrating Your Objective-C Code to Swift\" ^ \"Swift and Objective-C in the Same Project\", Apple Inc. ^ ^ \"Swift and Objective-C in the Same Project\", Apple Inc. \"Swift and Objective-C in the Same Project\" ^ \"Apple: search \"corelib\"\". GitHub. ^ ^ \"Apple: search \"corelib\"\". GitHub. \"Apple: search \"corelib\"\" ^ \"Xcode - SwiftUI- Apple Developer\". developer.apple.com. Retrieved February 1, 2021. ^ ^ \"Xcode - SwiftUI- Apple Developer\". developer.apple.com. Retrieved February 1, 2021. \"Xcode - SwiftUI- Apple Developer\" . Retrieved February 1, 2021 February 1, ^ Lanier, Brian; Groff, Joe. \"Intermediate Swift\". Apple. Retrieved July 3, 2014. ^ ^ Lanier, Brian; Groff, Joe. \"Intermediate Swift\". Apple. Retrieved July 3, 2014. \"Intermediate Swift\" . Retrieved July 3, 2014 July 3, ^ Metz, Cade. \"Why Coders Are Going Nuts Over Apple's New Programming Language\". Wired. Retrieved July 16, 2014. ^ ^ Metz, Cade. \"Why Coders Are Going Nuts Over Apple's New Programming Language\". Wired. Retrieved July 16, 2014. \"Why Coders Are Going Nuts Over Apple's New Programming Language\" Wired . Retrieved July 16, 2014 July 16, ^ \"Error-Handling in Swift-Language\". stackoverflow.com. ^ ^ \"Error-Handling in Swift-Language\". stackoverflow.com. \"Error-Handling in Swift-Language\" ^ \"apple/swift-evolution\". GitHub. Retrieved April 4, 2016. ^ ^ \"apple/swift-evolution\". GitHub. Retrieved April 4, 2016. \"apple/swift-evolution\" . Retrieved April 4, 2016 April 4, ^ \"apple/swift-evolution\". GitHub. Retrieved April 4, 2016. ^ ^ \"apple/swift-evolution\". GitHub. Retrieved April 4, 2016. \"apple/swift-evolution\" . Retrieved April 4, 2016 April 4, ^ Barbosa, Greg (February 22, 2016). \"IBM brings Swift to the cloud, releases web framework Kitura written in Apple's programming language\". 9to5Mac. Retrieved May 16, 2016. ^ ^ Barbosa, Greg (February 22, 2016). \"IBM brings Swift to the cloud, releases web framework Kitura written in Apple's programming language\". 9to5Mac. Retrieved May 16, 2016. \"IBM brings Swift to the cloud, releases web framework Kitura written in Apple's programming language\" . Retrieved May 16, 2016 May 16, ^ \"Server APIs Work Group\". Swift.org. October 25, 2016. Retrieved October 28, 2016. ^ ^ \"Server APIs Work Group\". Swift.org. October 25, 2016. Retrieved October 28, 2016. \"Server APIs Work Group\" . Retrieved October 28, 2016 October 28, ^ \"Swift.org\". Swift.org. Archived from the original on May 10, 2021. Retrieved October 28, 2016. ^ ^ \"Swift.org\". Swift.org. Archived from the original on May 10, 2021. Retrieved October 28, 2016. \"Swift.org\" the original . Retrieved October 28, 2016 October 28, ^ \"RemObjects Elements Compiler\". Retrieved January 17, 2016. ^ ^ \"RemObjects Elements Compiler\". Retrieved January 17, 2016. \"RemObjects Elements Compiler\" . Retrieved January 17, 2016 January 17, ^ \"Swift for Arduino\". ^ ^ \"Swift for Arduino\". \"Swift for Arduino\" ^ Rose, Jordan (April 1, 2020). \"Swift on Mac OS 9\". -dealloc. ^ ^ Rose, Jordan (April 1, 2020). \"Swift on Mac OS 9\". -dealloc. \"Swift on Mac OS 9\" External links [edit] [ edit edit ] Official website Official website Official website Official website Swift at Apple Developer Swift Apple Developer Swift source code on GitHub Swift source code GitHub Swift Example Swift Example Server-side Swift: The Vapor Framework Server-side Swift: The Vapor Framework v v t t e e Programming languages Comparison Comparison Timeline Timeline History History Ada Ada ALGOL Simula ALGOL Simula Simula APL APL Assembly Assembly BASIC Visual Basic classic .NET BASIC Visual Basic classic .NET Visual Basic classic classic .NET .NET C C C++ C++ C# C# COBOL COBOL Erlang Erlang Forth Forth Fortran Fortran Go Go Haskell Haskell Java Java JavaScript JavaScript Julia Julia Kotlin Kotlin Lisp Lisp Lua Lua MATLAB MATLAB ML ML Pascal Object Pascal Pascal Object Pascal Object Pascal Perl Perl PHP PHP Prolog Prolog Python Python R R Ruby Ruby Rust Rust SQL SQL Scratch Scratch Shell Shell Smalltalk Smalltalk Swift Swift more... more... Lists: Alphabetical Alphabetical Categorical Categorical Generational Generational Non-English-based Non-English-based Category Category v v t t e e Apple Operatingsystems Apple DOS Apple DOS Apple III (SOS) Apple III (SOS) Classic Mac OS Classic Mac OS Darwin Darwin iOS iOS iPadOS iPadOS GS/OS GS/OS Lisa OS Lisa OS macOS (OS X) macOS MacWorks XL MacWorks XL ProDOS ProDOS tvOS tvOS visionOS visionOS watchOS watchOS Bento Bento Clips Clips Final Cut Express Final Cut Express Front Row Front Row GarageBand GarageBand iCloud iCloud iDVD iDVD iLife iLife iMovie iMovie iTunes iTunes iWork Keynote Pages Numbers iWork Keynote Keynote Pages Pages Numbers Numbers iPhoto iPhoto Logic Express Logic Express Aperture Aperture Apple Media Tool Apple Media Tool Apple Qmaster Apple Qmaster Color Color DVD Studio Pro DVD Studio Pro FileMaker FileMaker Final Cut Pro Motion Compressor Final Cut Studio Cinema Tools Final Cut Pro Motion Motion Compressor Compressor Final Cut Studio Final Cut Studio Cinema Tools Cinema Tools Logic Studio Logic Studio Logic Pro Logic Pro MacProject MacProject MacTerminal MacTerminal MainStage MainStage Shake Shake Soundtrack Pro Soundtrack Pro Classroom Classroom AppleWorks AppleWorks Books Books Calendar Calendar Contacts Contacts Mail Mail Messages Messages FaceTime FaceTime MacDraw MacDraw MacPaint MacPaint MacWrite MacWrite Music Music Passwords Passwords Photo Booth Photo Booth Photos Photos Podcasts Podcasts Safari Safari TextEdit TextEdit Apple Remote Desktop Apple Remote Desktop FoundationDB FoundationDB macOS Server macOS Server WebObjects WebObjects Xgrid Xgrid Xsan Xsan Developer HyperCard HyperCard iBooks Author iBooks Author Instruments Instruments Interface Builder Interface Builder Quartz Composer Quartz Composer ResEdit ResEdit Swift Swift Xcode Xcode .Mac .Mac Dashcode Dashcode iAd Producer iAd Producer iChat iChat iWeb iWeb MobileMe MobileMe Windows AirPort Utility AirPort Utility AppleWorks AppleWorks Bonjour Bonjour Boot Camp Boot Camp iCloud iCloud iTunes iTunes MobileMe MobileMe QuickTime QuickTime Software Update Software Update List of Apple II application software List of Mac software List of old Macintosh software Authority control databases Germany Germany Germany United States United States United States France France France BnF data BnF data BnF data Israel Israel Israel https://en.wikipedia.org/w/index.php?title=Swift_(programming_language)&oldid=1260160620 Categories Swift (programming language) Swift (programming language) Apple Inc. software Apple Inc. software Programming languages Programming languages High-level programming languages High-level programming languages Declarative programming languages Declarative programming languages Object-oriented programming languages Object-oriented programming languages Functional languages Functional languages Pattern matching programming languages Pattern matching programming languages Programming languages created in 2014 Programming languages created in 2014 Statically typed programming languages Statically typed programming languages Systems programming languages Systems programming languages Cross-platform free software Cross-platform free software Software using the Apache license Software using the Apache license CS1 errors: generic name CS1 errors: generic name Webarchive template wayback links Webarchive template wayback links Articles with short description Articles with short description Short description is different from Wikidata Short description is different from Wikidata Use mdy dates from October 2018 Use mdy dates from October 2018 Wikipedia articles that are too technical from June 2018 Wikipedia articles that are too technical from June 2018 All articles that are too technical All articles that are too technical Articles with excerpts Articles with excerpts Articles with example Swift code Articles with example Swift code This page was last edited on 29 November 2024, at 06:06 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view",
    "https://en.wikipedia.org/wiki/Kotlin": "Jump to content Main menu Main page Main page Main page Contents Contents Contents Current events Current events Current events Random article Random article Random article About Wikipedia About Wikipedia About Wikipedia Contact us Contact us Contact us Help Help Help Learn to edit Learn to edit Learn to edit Community portal Community portal Community portal Recent changes Recent changes Recent changes Upload file Upload file Upload file Search Search Appearance Donate Donate Donate Create account Create account Create account Log in Log in Log in Personal tools Donate Donate Donate Create account Create account Create account Log in Log in Log in learn more learn more Contributions Contributions Contributions Talk Talk Talk Kotlin Kotlin 15 languages \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f Cebuano Cebuano Cebuano Deutsch Deutsch Deutsch Espa\u00f1ol Espa\u00f1ol Espa\u00f1ol Fran\u00e7ais Fran\u00e7ais Fran\u00e7ais \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 \ud55c\uad6d\uc5b4 Hrvatski Hrvatski Hrvatski Italiano Italiano Italiano Nederlands Nederlands Nederlands \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e \u65e5\u672c\u8a9e Polski Polski Polski \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Sloven\u010dina Sloven\u010dina Sloven\u010dina Suomi Suomi Suomi Svenska Svenska Svenska Edit links Edit links Article Article Article Talk Talk Talk English Read Read Read Edit Edit Edit View history View history View history Tools Read Read Read Edit Edit Edit View history View history View history What links here What links here What links here Related changes Related changes Related changes Upload file Upload file Upload file Special pages Special pages Special pages Permanent link Permanent link Permanent link Page information Page information Page information Cite this page Cite this page Cite this page Get shortened URL Get shortened URL Get shortened URL Download QR code Download QR code Download QR code Download as PDF Download as PDF Download as PDF Printable version Printable version Printable version Wikidata item Wikidata item Wikidata item Kotlin Kotlin may refer to: Kotlin, Greater Poland Voivodeship, a village in west-central Poland Kotlin, Greater Poland Voivodeship Kotlin Island, a Russian island near the head of the Gulf of Finland Kotlin Island Kotlin (programming language), a general-purpose programming language Kotlin (programming language) Kotlin-class destroyer, a class of destroyers built for the Soviet Navy Kotlin-class destroyer Kotlin, a brand of fruit and vegetable products made by Agros Nova, a Polish company Agros Nova disambiguation internal link https://en.wikipedia.org/w/index.php?title=Kotlin&oldid=999577926 Categories Disambiguation pages Disambiguation pages Place name disambiguation pages Place name disambiguation pages Short description is different from Wikidata Short description is different from Wikidata All article disambiguation pages All article disambiguation pages All disambiguation pages All disambiguation pages This page was last edited on 10 January 2021, at 22:20 (UTC). (UTC) Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Creative Commons Attribution-ShareAlike 4.0 License Terms of Use Privacy Policy Wikimedia Foundation, Inc. Privacy policy Privacy policy About Wikipedia About Wikipedia Disclaimers Disclaimers Contact Wikipedia Contact Wikipedia Code of Conduct Code of Conduct Developers Developers Statistics Statistics Cookie statement Cookie statement Mobile view Mobile view"
}